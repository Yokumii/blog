<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YokumiのBlog</title>
  
  <subtitle>Here&#39;s an Yokumi...</subtitle>
  <link href="https://yokumii.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://yokumii.github.io/blog/"/>
  <updated>2025-04-04T05:26:33.544Z</updated>
  <id>https://yokumii.github.io/blog/</id>
  
  <author>
    <name>Yokumi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://yokumii.github.io/blog/2025/04/04/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)%EF%BC%9A%E4%BB%8B%E8%B4%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
    <id>https://yokumii.github.io/blog/2025/04/04/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)%EF%BC%9A%E4%BB%8B%E8%B4%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</id>
    <published>2025-04-04T05:26:33.544Z</published>
    <updated>2025-04-04T05:26:33.544Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计组学习笔记(5)：指令系统</title>
    <link href="https://yokumii.github.io/blog/2025/04/04/%E8%AE%A1%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(5)%EF%BC%9A%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/"/>
    <id>https://yokumii.github.io/blog/2025/04/04/%E8%AE%A1%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(5)%EF%BC%9A%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</id>
    <published>2025-04-04T02:12:00.000Z</published>
    <updated>2025-04-04T05:01:58.895Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="2e278c25468b2fb1c50eedba1368fb70631d67ca8a3710da147d3154ecf41fb7">6df07e4654b2f23296fe416e73f530c96bf04cf67b3d4ddcef59c681cd714fa356242f3de69e969ed4d1f2260b48ff1a9b0954dedcea433fe84398842665e80b22d73d8eb24f07f3993b45864abce9dcaf837f65a4262b583e8c1c82a464a684d6b2888e2ee15a98ff2e59b9152b027e27fdc4d3a954b3499ce74749bf0d738efe1601c12b2a2b186ca5c830ccbd6384d0ee0a2a0efe9b3c62af7ff48ae073855232d9ba27b1e65272e322f4e3539c1763dc9ad33d64d1901ec4fe0c854b25cec3df3806f0233b6bf52ee7f1015a33a1a122d824072d016c6ee5170658da211ecb3c99253f30f93f99b71c93cc8854f8648e15caa962ef126af09db22968fcd22ea0de963b20af6b77a6c33940e6ace4758451810eb2e8dd214efee3c1aaa4796c4e88f1f6706b55fa7bdaa6e98fc202e4ca7a8291c269d2f6e1fe82028f835913a3147aef0b3b71bb4a613576c699693cafc2597985c41c4153c2d83dbc248f71785ae66c74c391927a70e63d4354251a8d10f79d665b77ec688bebcd24c25bb024de9496853649634faedb5d96bc121e18c9fd0ec3fed3876db5d5dda889adec1153b9218a728029c317311146787149ffd101b0866d96f4c56a4f73fddae5a0a76aa36c4b93f152a78df952ebfa6d9037a8cdc897aada7bfcd5a9661d1dc23b99de7d3308323cf9191923bdd98e06eb518e21ed59d0f30eeec73a0bdd4041807d6278dc2caac48a82138a7ba734c82e882dc03ea155a7df2973dc7decff5dc30be62e621f60ede6eef6b682b982b56536c6dab3f83da4b7283c61a5780dc926f52d899500a13426965739db22197f29d480ec864406b4e47c73e72d2e2133e54950270fdcd86e47e71428c8a7b2765334830419ca863920be5cfac9a06f38cc4af3ad23240e80da96ee77ffc4c81c39edd0775947e29b60b0625a1fd6d5d0899fc19eb6cd7e7e65f47f2071ba11898d94891c03b504726de6a7e76ac8bb036958084a51acb2fce7e4695335b5c926855365de2d9ab047fa8ec0bf0435bd10d07503015624ed81e11a87248d8910b475fb5211015399c183060d6754a198a8f89b1b690412f64ca414df7ad667ae9077331087a465ce5644db9b9da90638a6e4602dbac1f95bc59f0a37d8b8218076dc82de97eb41528f61cdb6be20bdc168bb8b92f01fd3c3fa0faa1435f3ccfbb92241349e938f18fba6a57d39e6e2cffb68a4482d32ecc81b65dc6b60fd3384ee174d2843d0ce052e87c39ce74f5b9c51ad5c20741abf010f6a1cbd9526a4edecf7fd82f9faa460c4f7d775ce83a7d09bec8da663d87ed614caa806e65f7f012ead9a89b2a1341a6c2652e046109d3962ea3debe0f44c08988cd37eda088cbf478e5b9642c4f086b0fb053f74d5eb3e6ad2415726a9f2a25aabba0b02072264aa8d6f1ef3dc0af06ed1e399cc8030005d8f2f54e24b47f7153c8005fb955f39f5ed59cbcdb99ee453b331fa2112f797c191c5ce1383c849f831eff40b395d07147368c395a82ed54cd2a9207720d9b9b9e0b09cf2f3078728552d7a1e08d7e4152b0ddd942c13f527aa8c2331f0db07acbf815eeedbc3390f3fd8951460dee3a37a41a5fcc2d9fd8869b5877f4533bcd8cc13108e8e7ad742a2fc14bf55f16e7d9d61d170989192342c08a1f1eaded90c7231b9c64f35080c2c4c9228514afddc047c7fb3e7feaf228fbc139b744d16b96e2a6a586907e8b342531b2b3db103774bcf0841a284fbdc0faed325cf2aa44dc6da5a0482823d2f1df857ea81dfb04e7f993a23e90775ca61aa8f7849e71bd57c6355bbd4feae60ca01cb749f93d36a760b67edb9bc9c2c7cea28ff35bbe058b32d36fede96f22718b6def66ff5be3331255d7955b4ddd0c28244af647e990898ac16da345bfa37e5adca41d51fe9ff6c997274f87f9751f11f8419b3fadeb009cc06fef2e84ba2960f349406418fcdd8650fb856202a294e6f68a0f4df964949c73e89cea23b6c91eea377f4edb74abaca5a91afbc244ba16f50df9ba793a01144a82801347fad40f83070b14558259d9432974770eeb09b007d6176874de14666f7a27bff9b5cf0f7560777c4f9e2ceab20b8b9ca0d86e35252dd0f924f7eeef6674422b50bcb5a2d20ae8527511eddd1e65c2a744321d5f68bb799ee6848834edf27bd47c4e92c2346a63e0edd2d6913da078989cd9e41d6be018600de5dafa6a77be79155a2403c54ff8ec5a521beec65964f063424bb6af154e48f02470120af7f1b7e22ac76cd5f6884f7bcef1b597112b4803ccad5e4e7f2f8f10520c7b0d1dce5df121c58dbbf169e492f88ae32ec10f22454136eea67466dfbd4f63802cfc78c5c863b3b8ad127ae5f8eb1a763d0cafca4c2f56fd622e3932d62aa8f176bef5eef85073ce48943bce61f94caa1be771b1fa67569f081777b0301c032e00e7714db9b5aa2b48fb12191f24cce810670b4ccb005ee6036aa7bef4458370596069b3f1fdc5ca5e96c97faefe1a898dc88e9d8fa60f793fae4395cd559ec73959a4be4c221f9de832d1180856767b7ff42249a2b73a6cb044fc01ce50d3e6bf014a48ce472a4f47b42fb880887219058e9f90bfad9ffebfb819f5e16452568137851c0e23643cf3c5c9197f3cb6280ad1d8e618d54eb420cb685bbb6c79b3bfb8ec4e439481d42668c28efe7c66fd3ccbe3cd98fd29c1c2fe955643cac2a6a0e89a6c7c47b6bfe3249fd7a966146ce0f6fc431664b1609afd74f899e6d3d81f58832dbdd56f5c81236be21b933f6011fd3533567213335b1178ff69731e8faae3920174083386f9c628bae8e792af870fc2d2260143ce1f419dd64674479474ad91b8d55b7fcc5cba4fee632da23ee743885a6c21791f029a7bba6e64abadc9991d60bc04baf422d7ac47c1674586c19d54f32c4e34b1cb20eab5804c3d58f1cffee06f66f44c7dade23599d819e160bc871e7144bdb7b71d3d567ea37c3435949a8af06525cd1e434c8a2b8727738b6778fa82fea94dbe1c4e37669f578f7f70237a10183a72603344a46ca974e4b8e276d6dec662bdaa71248c0eabaefc0725c7efdc3b9aafad5e969f5c2beb9280a0225c548af120f28fed34518ebf57aa757cede4aefd74f0d5dabde3947d44be10e24f9abd2cc0b89392df55f62063bf838384f820e616a3bc4f8b7d6e04cc157cbf0af9037054d8e6bb637d8eb1ddaf1415c34ff6230c507845f74aefa2de219bc7105d0dee01598d378664a23899186b98918234af03098f0c53f5c79959d1f49ffab494f0a4d51ab55a34e38da1f4b5f6582e92ff3cf7326c8798678754d003d8bb1f31319ce8b8ed1ed25b559737540ebb69ea4eb2c776c9f2bbb0e91eba78b6bd1be5970f7e78b7753bd1a2af486cd3e8ebe71ddef6b1458dfc80c3c92b25e300c9606135438f278b53ee840f3df015f567dfc1eb172b2516e65b587159d23e0db2aa253b5dc56f0183a3bd4840997f498fde2cec108317263fec4d25b22e15320bf213a925a9a045f94dc3133903eef19288c6b6a77a7427148c2687dfc3836160818fe43f9db8597f93ec4e9e79d557f6dd322f3b0afaf604362633cf768a2e27cb7da599b331128b65ae66194ec56b90661b9c86c2f32beb7c4598db936d27b328c32e6fa8f8619dc31234d07db51f7204ce3c53efb242371b2fa744e3fa0500c97bd960825e6bbad017a3e3bf249e5ca351e6916804fd929d32d6a572034a219bd95934dd892d8d66c0aa6ea1ea4bc4aa5540e763207610783c647d5c04d4632d3f4390a861b3643863e6fd789ff23174c270305c3f4dd3509d9a9c02e5e394a517cc1dc2599b496b4210cd06666f80b59027b9e73562e2fadbc6702d081524888c59ed662d0ab34facc2ac1ceaa81d130e3c50e65a4418ace913a91d4aafcfe82f2693c9a4b9cf31437b5d3424d43603c91cbe9c98b4335bc9742e658493f15f203f9634e7de5e2a7b13ad73ff245e16a27114a719d21b29bd8081c6edd600e3896c4ba8c4b12c951aa8f0e6560d485b2f45fe4dd4898f0ecfa6a5bd1391fedb6d42bf80782a374c8d0692d4be4da43bbab9d2d75706beebde108469d3a226e8c7f0cf234fce5396183702d6414bf9715e18fa9dcb8d01cc7ea9884f07ce539a31026afe2e6fe5948c7920d8297632ef36246b3e8fa40a369149997ba8e74eb1edcec1f09d9355bc27237de8d15fc0ec70a25b8c305cd11f1168ec86c92b2034450e9b1af65fca3cb6dc69d6245838d07ecee8d8fb2661c115e8bc68a5e12357ba6804a162ab57349656618fb0aa9e69152c9fa800730004e2e400a81b9f973ebf620ffd0606b749ae545d935bf936478803236920e6ec1bbdd5636cb6ac1d1cd538769a24110b452bb7e05a5a8d3a597856659f85d6fe9f071a1f27c8922680deb144313f9a3bacd9b86ee454645e9cafc24f6fe68048c5aa836946e6ecbe146e199d7f115443a0cd899e45f9e5f597da2386889bfb3f4630011c1fc56d4dcd3b46fdc3ce857c4de4e17af8de2e0c3a6d073979a51c6503a78de8b827caf9d126c46f64f587b020bda9c802f8b2b30cbfbb53cad8aad7d1f70c1664a2960045632b267404b274ba4f04ef5db06b19d74046e8622ad57849d9e717afec60f3ce1ccf5dddd822d938a1ada478735f239cd44d45ef595eaba7164a48168f779f3e0593a611fa728c4e1793c92769f9c4b75e30a63e46bc4f45244e43b5b937e4b1862cc15ab13d9aad57f5aed74bfdf9ab73acd3482f9bfb5dd82dc948a42ad3a886e44f2e23cffdb2c42e1c08cd2396613f2c2f4e0129fcfb05dc1f2f4c198674e935fff596341b1a14665835a9f438ff71bdb58d029e1931460f38c0f14c8b333460f724e356c84e8651b9ae709574608d29e49e50458a29d0c954583074ede56546470d6ad2fd1f8143372a7e28e1d444525b8ca9ed09441b976932e754736378c2e832205c4af2aa2c29ad76bc5b9d99c7a37a96f480d2c1fd6b4a645efc078891e29fa069b2e4436811a6aece06dd8b9ee02ab6e9d209d6bb4513b372fafd2502669434f7947ea4168bdaadca374cbbd2dacbf58e10de97a541316f71d8a0d242fb501524f626ca22d581af1f13d878f4caca2024a7824d09ad14b4f9fa0ceb172230655c90a80488a2bba901dab531d4d0064f19f6e97dcecd2ba7e6c4d400435be1734eb05e616506190b8d19f3548e578ef866e0689a78f4e741bffdb2707e0fbdfcf38d673e746f7ec5058ecf493163cd9dc263786eb5404e99129a9b3996255576afee01477313eb1f386f2e27eb78310a1adeebc86fe9d39d41864ae9a67a06b59f5d6cb9bff1522adf7b33f38a2dda63809d4ac734f9d6ee944485b4610a632ffa7d491f14980a7effa76f23bf963e7140cab2270a245e2f376ecdd3226b9e50a5d8103bfd5d6376ab8ab8edbcba45629f56354945f22741e6b03e3995e48036058cc92b2ac242660a1e063a17995fe22400a53758d644afe57eb3bdb1c18006d9616be15a1ac6d02c950e571794bdf88b5c45d4f6f75dee059f6104c2eee53b58821412e305334e7c70bbdcbe29e1cfd79ba02087a84a1cc591142bc5ab4e25c43706de20784d92e5ec5e8c88027cb5ce523533051511741a797f904520a76e21d0193a8994c9df70faa7dc654198d4e8242c2039a5defa225272ffb97c100de21e24285bb12a120298c5b616ac47b405c23ddb71cc0658e9a024646e7e1498bc7a278e2a6b0b08cd1274e933ea2ba4a5a83a1436c6264810351c938cecb6b3419af05ee7f2f1d23ff1325fc88aa67c4e8832fc729846704a7b1d822e5fc95ec0516033959998ba001a0a04d1c33174cebb00c877a727bd02f0c2397fac5b441f4610dadcc07d3477039fc18a4bf29e0232d63d06dadac84320665060f60d821a1bc60aa461196fc7a95d11a7559988a489eaca25e85a0fcf6a01598c193171db4b3eef68f11d6141ad83b84c9abc8f783a351761a23284f6fbd497bf3fd57f4b6cd32e132a0a7ccd1922e5bdc0a1b7bd102af8db71ff178f8b890b11e8399e7aa8764a6eb5aae7332cac5fe3dc13a8f01247dc5db89e9c3a9fb874e1bbc36ba2c2714a49d7c7d867af6e8c069f110fb9888a8cacafa8acaf1891adf43cff3d2709a385910809bf03c81d55c6faf521cbde66e29d6c23b1db49a74453aa92ce32ea62290295aaa6126510d46a254b589eefa7b8557464df69cb25154f909b7a4fb2a965fc08e88294b8a5e313313f3e9b08ecc27dd5bed01d3a5c91dd87e032badaa189f0cba5f0949ab5bc8fca9b0764bedbf2569c245a4cc0a0b9c346263fee991a1f8aa5ebf78b72e07d4bc94abafd1ed8d3d77ce8bc4b1d82ce9218f82f9c40b6b885a4d7e5135125c345429fffd92ef0b52ce72b63d6165793060c0b723455b36accec52bb79a3c4d29f224fbdedfb6b3f8dcf78c1b4ebe288fee2c0998ba3e949b0384ab562ea90aa32740a312ba4343fde89ee8bc5e71f42ba2c7bde79a5938d5bb98fb17905bb1a8c198bc3f9a9c65490d089efa52efd3ed8f5287ec855de5161f9e99e3d229ed6753d2e71873411733783de47b5b064d88f4c471bc135b2bc6ae4305c0902b2e086caa21c06324110987fdd7f9b1e5379e9f507121322064fd527eb0dfa9e70e6219ad74d30f46cc07b7ee4d9b6a745052571ffbae0a349215e7d4946fcbe96fc1f267677a9b528e01bfbeab0dd5cf02423f595532f35860e2f8c0bf00932fed6f0a2103e4e856c07218fef6c42b294c2908b13f07f5acfcacc2965fd1abd4ca3147f44ff544808aef73658130655af513ee37f83d90c009a1b5cb6b68fa2098b6df1a2f3cf6e711f768cd372f1cabd6b00a160bed3707c1285001c8d3481da064fed8c4b5d582d35b3a90875c2de9666009df7be3bbfab90c79beafab2e836d834724a2d18d848eb1dbaeddbfa902e978cd1a09546a5e9d9b78d3df3a3b8e9d18344d381a3b93f5b5dfecfde5605ff23ee48012ab1d2c602415049f496ecffd48b15df482705b279bba430a656815a615a985f87ddc586110599cca60a2ab18ac4841a808dace10b13a14e99cf872169dc4cb97c21bc428f17c13559c69835a0d4d5df536250cf6de8310172b8663158dd862fd65bedd601daf642239d0ffa8eb51a5d9e6a4a4039665ede56cf0d41fb416ce5f7a25d78ebb168d5c49e21e4f7f49ae68c07cf7b145b055daa4b13c71964d6f606c820b9ae92e69edd233b692cfa66774e8c9a293e55c021f3ba6308d3f5b4ad855c0df8f4c94964bb060fcbab171257c6a671b9a9f57a40f3198e1feb63bea510e46da59a33aaf682b749970e65172c7a6b3873fff89e5d5e57a0dde4894b5dcabed329515c635fbf344133e50107460a878546cc7241932911f0761fe67532afd7611aab24ae66cac35f0c897bb248025759ffd234b4883a387402e50bb6b5f54f969cbceca3bc119e9754e91ae568aef48597a1e28eeb177e5cd1cc1ac16be4013ae0d7ee547e0aab5ff30311524de05ebf0a0919d1cd6cd58860521aa56f3d78ce04283641e2649cffb2109c438b674ab73c7c81113df49e8ab327c5675519b588ecb3fe2f919b20884bc30cc8fd47a55120e9c65bf16dc8b0f92fdcbc6fac1fd9192db9d12bb86cfb2f1ff898a4c421e74617a0d51f3e46d54722ba85688190141ca0100d9b251db60949c4fcdc8a0770ee9a70c5ddb753e14c90578766afed20d23</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">计组学习笔记(5)：指令系统</summary>
    
    
    
    <category term="计算机组成原理" scheme="https://yokumii.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="private" scheme="https://yokumii.github.io/blog/tags/private/"/>
    
    <category term="计算机组成原理" scheme="https://yokumii.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>计组学习笔记(4)：存储系统I</title>
    <link href="https://yokumii.github.io/blog/2025/04/03/%E8%AE%A1%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)%EF%BC%9A%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9FI/"/>
    <id>https://yokumii.github.io/blog/2025/04/03/%E8%AE%A1%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(4)%EF%BC%9A%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9FI/</id>
    <published>2025-04-03T02:42:00.000Z</published>
    <updated>2025-04-03T05:46:16.614Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="43d16b64870175ea17230934fc9e7dfcae2953ab33d9ae37c0682b540e67d682">6df07e4654b2f23296fe416e73f530c96bf04cf67b3d4ddcef59c681cd714fa3924d7f7b1335a5149f06ce242b3a862d2432ff0670c746149fa808c81a93e5ab2b2fc62317d37474ca54e2b199b8b6617ca78b10addea96ca123237381bb2cfb9de83dbf032c14d268537973821986c1eff101bb961de98aa151cc83235f10dc4c8abc3a8e4ddf5da33b56685359771bb63e7deec7325131d01d975d4ddb0d73ba36031be97fd3ebcd2d9eb6d32d7f038807c19426bf507fa039fc3ccd9d6fb9b36734aab3c8bcd425f5ccfdea037b61d6ada5e7df5b07cdc1b09a75d8964928aede31e161716d67afe9dbca6fbd4306c565bf549106324ccfd41a6aad4b5120a9071842ee8b073b54ba7d4e5c73344dce4add41c2e5e0c7670e61dcc9d8186a9e4f12a0a7735e0ef711a24a1dedb23e25f35fd7635b955542ca368165273802d0176f732f8dccc71b3d4d60907043943d50ab3be4399bae7863c3b3e9e0b2d5b89ca3c3d2d1c1c460dbacc7af1d4818d859d10fee3149eea2c5a827ea63caed1dbf8b7053feb81d3621bb4826f85e16473caff024b5476708cb1ec302972de6c9dc79685f7901285690535f13dc5c4c9071f73d3461c6298882ffdd597452b9ce310c836fa91cbb162eeed75a5374ef4a134d54709a02ba232b3750c2539c442d2d947aba7bf0861e524dec4fdc4ce8ae883c008c9d761f2beccd399ffe905f8869760c867c729c888b273f30a7234aeeec02bfb0938d69f32057a1979825833ded1f00bd86debc2e09a79e3b3c986ec0dad714378ea730661dcbdac2ef2bba703d99423ada8a911e82160ad0f94240902c7a795e744b715a5f1d0c1cc0fb68004da5165f256ee95f26eebc558f7f1fec4a181e1c2f17430bf2d70924403ca15cdbe3dea09750e1c2f6368df1b64d7944a10b06a76931b3fa63a1ec7739a5789bc8c4a40b066b789772d651f84a0084e6a14ec57c8dbe6eabee4aea01c00609616e80e8a50362e4e2685e741cde04fa23b57fafd21e23c117f501bfba42551521f0f4b91986bcd370642e55fbbc0920aabb222cf6556c9b1e7340395dc6a45cffac6e9ce8a183b39d59ee4c25f245386ba131614d2e372f93ee86f594896bef9b25118fd997b89a02821a28bad1795ddc86c848a457c6078599b9b0b470ce959e779b799b51d71570c41b013e46d5b9de897a30df6494b4a1ae3d10db893af59f05ea8f3c66e1a05b6be90f9b89d43e56f31888fbf2df94b71a7348ff6f802f2dddc309812c4aa553bb9034d6ce146963e3c3d29552e92503f6fb25d833bb69d9ccc7081cc066635cacf5366ef24983c035f5f955850c2e5a152bdf5781419b1c0cec29fdf4e6f1654eaf82bbfe0add41e2ee6c5206066c39d5fbe9668b6ea61bc574d50e762acca7b1aa7ae643b93a9ee0269af0cee15b4c1cadaa3eb5296b46f18854e14a543e03348dea094887e86d907d9d0fee0855b0b55b5915af4cb9990b80faee685d379f23e7dd5521da0e5dffeb7ba9c15c03537a60fcb345b6a181bfb830510a98da681f4c619b02b37d37ad1b55ec3d47d4deb578bf79d4f80340259afd6c194cf3fcf0921e9d12e597dbd7dd861fe78ee70504e59ebfa5f1b695e4d1926fd2b2f2b49a4a41878db1e56eeb87b69c416583dc97fc27963d77ec13281f8ee91d49a36f44ab62159d94895003bb55c89cd0feff0db21787b8106ae7a9347e38e1170588b4a2283bd00a269f3c7c47c9590e93f4259a4e7f29c5d9c3530f90957e3ee03a6c8598609e6bc587030dc6fe5d5f91f61d719fccbcd6e7fc2a23c68be360834b1c4ff008a4c3dd7b55d5cc20a8e1933c90a5dbd7ded81631271f31cc0a27991d0e8b8a4e3a64baabd1be016a365e79d5c4414d8866f8a87ca41cc77c8f1f79bb3a09d75ca051a21143216eea91a03eec8e234dc95224b1e172f169709d1ab7f6885a9a50ff3a063c6b706f34df9cd64eda8897d9f35b4882a01508c7ff2b5faf1fec97cf2650dac9d1578d816bb4e6d94945267e37f0bdc922abe8b7a39cba976d014706d8e0f1aa7656bd8845286550ff590a71caa8b9bab5c4d138984a3faf432a9c5b153bff14bcaf2ecbc42c3da5bb3b7233a2ace7eac92a2f7526593a4b7ff83b4ab19d816832155f77c23e2bd11847d43b2e936500fcfb2efa8a0161fad5e954bbf6f85d0c7e7f1d109ab7451bba51b62f99e3850cfc8ff301d9a4f340e9dc16bf747142f818ad0e8d87666fc4c88df7f54c4b3d381f484e4fbfce6c8ebe65f9b40b32a072081fa6393dba1e12cb87019760c708bba4296fe07ba6a01f109c403c240d602196725b2016bf62bf0cfff89603ec12d9ec136a8b3c5623551228ec32fbfba785ab4f6284a0f29e6ae3438f82d00267045f537a67d0f2928b2d1a8683890feb0b86ebea47254fc35a56c39e7ee27955ffcfa91c5c2e8cf5d4adb7556348a391c6539ea37e2cba8fe30355410bf8284a79e80233e3128d9246f4d05de1395466c658fbe666c8e3f9ff69a076641f03877b39df1abf26f2142aca1a47f998537f100fc331b9e846182d6adf138b990f22ec0050d12d85f2e644bacad8be4d521c8e65b2d1936b33eb7a27937e9a3a9427d137785f33e8057ab7cc36fb5fe8d0c85f232ea5bbde1ae1ba5bc6799d32d38f61a1fc3fde59c7867956cfb1ab4c7032096a8fe57ca7ca7a58324b61fdf76787360ef703bbb13083fbbfc081e30f05262b9918b50d376f0fdfa1b6268f6f042ad5cb3c573818ef8a822300355662bb22a4db63e863140bbf0cebeca73891d7ab11d97114ddc8319b0e44d252497424610d3bb53ee21d112352ee980d326a4f4f2b428e8e9b020c6233a92787215e4d5774443ef4da2a64362402f66b6af69dfd45f29226e2b260c81a052650877e3de3075dc0306a5bd9476c5094bc0ca726f762b56650299b767b7e35e1a84bb9119304558cffa4920f43c52ce8e43f63edf46588b532092ca7f6acd865c251b34cfbf4f746b74c79048c95ad03fa0a69f15876bf82329707378e350615aba4570e51938e152ebdef505afb1f8ac0e7873c26bdba2601a0175700195c2d1cdc5ea2c2fa55baef5a8a27bcc786ab3227f4674f231a8555c3aef1f13e6a698efa828fe832839a5ac6b75464155a476e3ef21a39beb518a8500f405b4f67837ae2d9da11c7f23a9355ed33043326c95f76274773763ecb577592fbd1bf68f848a38af8acc35f99e8dabd74b57317eface83aa0069ce482958cc746efbd09cf4300d216c6769cc8e1ed41719bc442902d30d21afc6db622fb1412c86c899e08a77a62ca054422207d74618df1d6a582b625c89bd77627f3723a33109e8fc1a41489937b6f66f8b68b7971d30aaa0730c7a05b562aa20b8e1c9b9db6f4c8f659832ba92c2cfa85bb7f95ee85fb2028570877e17e315ab4f773d6b5586374414b4006382761181232b20da79a7422932ad4de10895d75580e60fe6356b46995612b382f540ca4dd93b92b2081f20fa2359d96c99aa868a5dbf125d4b26c743e0b94826262df57b4fb5ec948544385dce0dd17ad7193648a1d2cd4ca4cbda679ee136cda2d29333c0b0ec16a15011c4e0e497b259ba692c33bcd38c1a407ea7718c8e3dde31f038e7b021d89f5573039a134c5cd5f94949f2c10e15c5f0c12a4c36ddd7c54502f03cacd77284ec871ba455c133feea9cb41cfbb3527a4b40da4e6ecce60dd3729b64480e5aa9b3100007264412d4def35c681cbf535801a80748cd2f50cba5fa49c47d6cbec549429fbc1eb564fa3b8657d4d86f0ec7eb5a0c8847998d2f31476ee51725deb90a543db780ce8e7a3cd5a7b8d59cd7bebac6d46585b4d75d406ae5ef12ca1bf849e98c36eb68bf61be2f37bd395cc0f8fdc808769a13b2b3ebdd82c5bd7e8953e003a80f6a946d9941e65c4d9032f75a79eff05afee5e50256326097b558a4e687ae842a5223cdf8a92bbbfbf5f3204c59e23ae784f39e97e5ec5a4617e201daccb5385de98d7330a445c855ac341b7309095adb1f94aa14692b8d9a2cb48c6f75079451e7fc53d7b3a3ed8c88f0f1c6d0e33c342aed3dce13d5026a1e7af9725932063ea811ae747ae851b9e7d1bfc8fde54fb630db44d527e4a7eba94434e9b81e15a75efbe93681f6f781e9eb4c1a2292288760c270c4559b9f01c4e987fba81e65d26eb68d7dfffcc9ff0faf0d5f977f66b1f9e112c578274b9f547bd7c10416e1937690e540fb66b881afa70642917a293ec06c94f188501d3d2cf6338c296f85c26d3241fa34b24379389bdc442b9a8c49f2264dfe0e22a62169bdcb9b74fe031774628bb1876ff5984be46ac6b5641beaea0c231a4f1e70b026b92a2c33ffd75801301a90113d50c4933f9b914447f58db6480d790d49a0f9692edb71cfb31fd030d346e271f6e7a7e8d2169e203e17863c21699e309402e0bb3985e7a8025aacaef17a28bbbfe616287bf2df189321f6bd1a51e75d06572528af37be67480ea1c19aa0d67defaeda9bf30b5ab0fed8799a5f93390124f0a5464aa3a75cfa3d11863f7340d65e694c02b1f766d6e90a38eb668205bc82f33311fbf5425ed1ef2249c779f7087d85227b8ebfb913504d20fe763a19bf83d9cda9dcc775d9c9a8258082ae4909c3ef10877bb2afe3018eed90a90a46033fe711cc5814d2d1075adae84d7b47bac6351e9ba6f58fdd9c5522fbf9e35dcde288b9f975c05fb5cc8ad7cf69f07232bae549a95e2aba546e5de1211c2d3dfb690332ddd74e0dc4404f2798a65af3b6e44ca1d0e996133430042119a7a459fa51b402688e5b99f8b2d92140e01cd4fd141366f9955d74c2c0ab46cd2295b4c77183415e270d5036415316213dfd7aa0e28e23e5d3e954deb8e1bb8cbd4bae0a8bea2627650fb510ac492ffadc1cc5b73f4b3c56c51f4ab73c4318c2b8a97e97e08b3002b668fe442d10ade16e5f76b5ab7997190fc6917ead7fc56596c027b1623563e3c5fc667e6a50e081f9068552745c06560076e4750babe70aa31cd780291eb01c64b5cafa7b96ee78c14492877c4b95b46a8e8609a1f299159a11a73b882b96805ccb49b5e58fabe0147c5cd2f82f87268a85bfb42690b833c93f00dfe20982cfba8cf8c142d05fc54f81e0bee284fb40c4eed71ba9af2894b8e117c322cde6256c22e3f1e3989ef125fdca11d93ad9f421c591304f6c9b30534ab3f270a9f39247e242a483d07d0fed6c1398b29f422ac1b23c84addac148ca492d7ff1cffbfd3430761d11af72639c08ba87f18e218ad4420610089070fca13881b17d4334e8391c19a86c6a3556a7c1006fd01fc5ca6ba7eae97189dfaa08a97ae999060a785764123542ee5d690ccf0941cffca803fc6fdf6b88e5de900c4cda5cb62f7aa1daafdf95d3516ee0f631f9eebf7cd94d74b98139610cf000a6983b6328ad231cb95c02733016aae98989244cd9f15d5df5ab2de5e0e5ba05f6fee12123f3955494c8e3138f7ab56800f4ba371371c74fdd100b55cbdaff9a902adeabddf7ee985c6abe6d6c9c0383e95b9e6d7e79d871e52f7370a688d0f764c1438b8bffd975f7934e8367bd584bf476c62891f9411566ce7c23462d22ba7def6c6cd09da4e9dc2e2c2366e08089f0f78f1c32f245690dfacbf791d98a56e5034b56a38f7fcbb74d88eab7ef0276e4577987024fcca722750d2b3d84d0c36ef9f50e167ee34cad314d53d65c0dc51c4e24d026b2c1eed5cd22b11931ac1a8acdcf23aa6141cc27a78e8b1dd64d4466dd122c571196b27024103845d8ae479439d3e7ca8ba641c511d30895b01335959292a5a7f09bae1bf3c12ddeb70d6510a757e51c69b12f72f6aec1c4b4cd9f828537e2782d4a4452aed334ca879f425bb5b650589f1b59e3e83b18324da8af0145c6dd73d0ac54854c5a6c0d236a6f6fc38fa22768c0ffc1e2d1f22a0590ed5e0b776acde76b83b015653fafd87e2a0989a27fb6339cb98d78351b34a27338756c9d5388598127f24ddb6bdc9b74ebfee3c018ce0ed196ef263ff3d9b737ba9c3dc44e6530c6f7a67ed50326e98d95a05a7fe6df276d7fe246d9b8ac61cd6e74a2c067fc1aa35e70968684b641a2744dcf5bfc2d900a1f2aa45b95a5b1ca8b64c69273be781dfae827347d7f9248c115f48b1136c1bad08652cca514e0ee05dabd732b1d972c2776a530a68d2f7bfaf92b5893dd8dc0fdd845362e9fcfeb8e5c02578761a4ebdd3a0a95e79afbacf678194af636c879eb8d4ce4797ccc3fe4c032f50191b3b0565881abacb00449492df89a67c8e629a7a03bf07cbfb1f9dd890b8d9d8b66fc0d3cf304640ca23865c89931c7d00cdc3521cc5fb56271bef3a505dbebf70e8245e270627307ca01f90b929b16797141dc6849b7eb12d19672b13b37b785aeb89c625e13984e63ddbf10398e805225912043dbae7b01323afcbe97963e09180a50eec8a90af7d502349e9e6e7b23bc21005ed902a60b0aec2a8e7f339f9c6773f26a59e9d65d70ad6ead68ad6b5a4ccacc2f22c3374c174c9a8d1729a384ba13fec6a1fe8e5d83de79cf40a592123236481de565ec12249aa4ad99b49e5d3c75429b4204f479a7ec9c6da3c1e5db45222449fdb267c2a3a94ea409f22b71b5c2a490cdada15672a510e4b7b5363ddbf379bac6b6631e41d87a061e5312cdcfe2084423c48ed097072fc989ffa7175ab751591572765ae8751c32badeeb64a68e7ea328c1630ff114b5c455a66ecbedcb4e8ca9726d7920b9fd7c8e267908b987b892790cfdbb47136b638f2b4d8502cae415a590ad7336c27c87e4448419e60f20ff6584dcd82d61b2849092b91584fcb91c6b6adf31f0721a7d8dd153540d419a054c332c9114ceb5eb69de6e23ae33374492f849d7d2f532be89061871413c57694ccfcca9c116d64411c70426823f886c5bdfe203e7e3338ecc95f8a4d7c445bb41623d8ccf4638b360e06f28939f751d655346a8aa3ffd68f008ef9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">计组学习笔记(4)：存储系统I</summary>
    
    
    
    <category term="计算机组成原理" scheme="https://yokumii.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="private" scheme="https://yokumii.github.io/blog/tags/private/"/>
    
    <category term="计算机组成原理" scheme="https://yokumii.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>阿里云ESC + V2RayA实现科学上网</title>
    <link href="https://yokumii.github.io/blog/2025/04/03/%E9%98%BF%E9%87%8C%E4%BA%91ESC%20+%20V2RayA%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>https://yokumii.github.io/blog/2025/04/03/%E9%98%BF%E9%87%8C%E4%BA%91ESC%20+%20V2RayA%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</id>
    <published>2025-04-03T00:45:00.000Z</published>
    <updated>2025-04-03T05:14:47.996Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因为个人的阿里云国内服务器偶遇运营商垃圾跨境节点导致连接github及其不稳定，所以有了这篇帖子；</p></blockquote><h1 id="环境">环境</h1><blockquote><p>操作系统：Ubuntu 20.04.6 LTS (GNU/Linux 5.4.0-202-genericx86_64)<br>云服务器：阿里云ESC<br>代理客户端：V2RayA，优点是适用于无图形化的操作系统；</p></blockquote><h1 id="v2raya-简介">V2RayA 简介</h1><blockquote><p>一个易用而强大的，跨平台的 V2Ray 客户端<br>使用 Golang 和 Vue.js编写，运行时没有任何外部依赖库，可跨平台运行，借助任意一款浏览器均可操作；<br>对于无图形界面的操作系统，打开它提供的 Web UI就能完成配置工作，对于远程服务器及其友好；</p></blockquote><h1 id="v2raya-安装">V2RayA 安装</h1><p>演示通过软件源安装，其他安装方法和操作系统请参考：<a href="https://v2raya.org/docs/prologue/installation">请选择你的英雄</a></p><blockquote><p><strong>添加公钥</strong></p></blockquote><pre class="bash"><code>wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo tee /etc/apt/keyrings/v2raya.asc</code></pre><blockquote><p><strong>添加 V2RayA 软件源</strong></p></blockquote><pre class="bash"><code>echo &quot;deb [signed-by=/etc/apt/keyrings/v2raya.asc] https://apt.v2raya.org/ v2raya main&quot; | sudo tee /etc/apt/sources.list.d/v2raya.listsudo apt update</code></pre><blockquote><p><strong>安装 V2RayA</strong></p></blockquote><pre class="bash"><code>sudo apt install v2raya v2ray</code></pre><p>出现以下信息，说明安装成功：<img src="1.png"></p><h1 id="启动-v2raya">启动 V2RayA</h1><blockquote><p><strong>启动 V2RayA</strong></p></blockquote><pre class="bash"><code>sudo systemctl start v2raya.service</code></pre><blockquote><p><strong>设置 V2RayA 为开机自启动</strong></p></blockquote><pre class="bash"><code>sudo systemctl enable v2raya.service</code></pre><blockquote><p><strong>检查V2RayA 启动状态</strong></p></blockquote><pre class="bash"><code>sudo systemctl status v2raya.service</code></pre><p>如果看到类似以下信息，说明启动成功：<img src="2.png"></p><h1 id="v2raya-配置">V2RayA 配置</h1>]]></content>
    
    
    <summary type="html">让你的云服务器能够科学上网</summary>
    
    
    
    <category term="云服务器" scheme="https://yokumii.github.io/blog/categories/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="云服务器" scheme="https://yokumii.github.io/blog/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>形式语言与自动机学习笔记(2)</title>
    <link href="https://yokumii.github.io/blog/2025/03/31/%E5%BD%A2%E5%BC%8F%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/"/>
    <id>https://yokumii.github.io/blog/2025/03/31/%E5%BD%A2%E5%BC%8F%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)/</id>
    <published>2025-03-31T13:40:00.000Z</published>
    <updated>2025-03-31T15:50:44.411Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="189fbe28c16ee14a7387a37a47507cad942df94b77060faa101963dafaad3b7f">6df07e4654b2f23296fe416e73f530c96bf04cf67b3d4ddcef59c681cd714fa3588e7f6d9d374c58b6006b26d49580e514088992e3327c975c1855fa71960639a0c308816ef93bc1cbd080b87d392e1aa141ec7c21858128c2be971f90b6f4f04906e511b484e3d982acae2b9e44eff21970cbec8deb4a16c9b9cb8511091cd360ec8facc028520b0eab8ca791354f940478eb2bf8b0ebbae5bd1bd83c24945325f34bf0c6b9a90de3e1c3fc1042a10b74c494c4fe36ca0d725928fe6db08e2928c5fbd35019200663731e9ffcb6833b872449b40e72f5f5b2a968b9c849d4b2410849efea285b0b8b01d9564ba0cb920277dbd8e8a4b8695cb32e865f96332af0ebb1f35ebecf116a69d7f920bd45d6012846948114267bea7c6dde9f222de02252ae96d545d39a5e2a4c61abcbb1b7a8561e706b97116bbc37cd504791109006b1462ce400228776494c7c57b52d38d5dcfdb6922029ae98d1509496053735dc04295165565b7d0d83db366f56462ba4e01c8ae9ae53782c631cf6666d10417062a3d6657a6802b33b85f44b53ced9e58f91bdde12e5d2dd3d85a36d447f04781cb984f8443368e60c6508f60b5d322efb3a6b92d9e71adfa878a72c2e3f41b4c0fa135eafc7d1b5296da762d7d382e0e088659a1c3634b92629eba32b37d75753ae90b72e13263bbf20ad66e4c6429cac5f9206cd6e22c2f1166f4948101773abadc56580f7cf858348175ca33b512ba639b36275c05831477e4879fa8de0e28459402d0515246b488b325a9c138ab24907aab8441879febc442158c39d07e00874966dc4b7af93b9a3f1eae2da13fda6bee1f9df99f128c854d0374f9021f990641115f3730a100171fda2f876a8eb0848daa136ea33c68b005d5180df5e631860b5f1fc790cfa12034a2894b242e65933ab9ab1a31cb55bac7f0b80298114d194848ba408818a87060d229daaff23fa672546b7d27ecf6366d0b50d3b0f57b85a3aebcc2fde8eefd52199ec21b6c5f63a436304f3e0471c1dfb03a2c9785bf237776493ba6478fa6c6d4f6ea55b9d5200e0d39e9a7e7cc4a35ee59035d94047a95af0ed27eb64cc0e4eb13395d900705304e9c29cf537bfb33446d8e613842750e26317f3288d185d24bfad79857c30580743797805db823342c26e8e1974e30abc578df2b577fea0ab981491dfb93ae4b0fc6f48262b860bc87e9043dafdec41ff12aa4f320223ff9996f3f34efddb104352b59db1f53d44f10408e7288d02f6241022490ec46469e20114058abc97b84c061818ad5408d6d35f6036b6184b12426203dfee360b96d38bc25ea47f2a68f5098af5196889350f422d66cf89248b26c60e89ab87ed1677938c5b6bfed1b5534742d34ced062c22c813b8c9370c852fafd385553e1d08d2e20df98baf677f9c36c4666ff95ac3d8a8beee01f5acf7bb51f16f9fc27ab9d8050e89a91c6d7e12803cfa5322e3c1a93e47e0c5be7b02b6c20c0b9a7c2b567cdacad578c641ba453852b1c4714af2c4bc8f7211316e8a38db6e2a0ebc7d40e758d7a2f0f465e006f3336171c8755a965e8fba477cc9a54fa7e7b6baed569236706e7f01a553e39cc8a80f9588160512dcd053231d6aad40a1734011408c4d7cf57588d1422134df8aba450edb898121f04df7b98b2dede0129400a08ce69f570f7e7d7ac5ade910f94dc0a8dcad07ae5db91ff6630843508f29a66cc2c34042720f0f692eafbf67f63e70275ad82e057801e229a52610689cab3963b0192644419f678471871c39196db00c8115a99a26d31cf00c0c34893f4e4e7a266b83fe9b04246b1282df04e88dd5d34d831bab43da3300d7752eeda07de2df026409086d033612534bf58a91a5ce507d2d734a93d2e232d21f65871976fae14a83358749e1c3e46680030f1f4f168dae1f0d93c54b59571c66e9ab5c8d23471e438645bcf9fed300509e0484cdbd529a683a8946a685dea8dd4e8a72f9bf952c70cd541cb22410d2e5e1721ec0443aadc601690262eda9dc6dc74b6c0885ed8a66df13b4bfa19ab8e79fcd53c429a02f687c6f2a3ed188f21d69e65b31c9e06a150627f5d79513ea920de905a59601dd2ee1ef788bcf32a7d628cfda2d61c8d39652e9735fe86a0035bd113d32c402ce6882107c4099e35c73546136e80048a13bd5d0ee1cb1153c149dc92b6f385912bf991d95512e5f2aef5779bc124dd524feee9efaae713f6ef6831f15085887fff3af8f0d97d290a8e4449034ecc3aa04644776476634dfc2803ae48be668e4a2c7fcea99f210e9ab434710e097beeb883965aafbffb232c43e33810d83287d929cea117a38b97edf413fd13629e4f250ee26211a4caf64e50fd535502255cc85e5433be5e82fa532fd5cb15db3ed54132cd32ee82849a583bb441491acaaafea47c499f8b0a0fd25cea1dee97c08758835c4f78a9fa20e33c112c586d4c493500033d5683822d1c684f527c46aac333cf7badf0f8154c07026346f8aca39f01b6a7c99061fb495d5da53842b48233d42b61a84fbb078dfa3f717ea9cd39604ca90b910f5cf3a13b114b940277496dcd806d93cb95d4d628d97024f32b7dca96cf21724f75b8bf9bfafc0df409f05887c708aadbfce734b2ce93c836ed5a92a0fdabdf7bcbc5f389f79929bc00307ba832c53ae2f947389eb4a3f25cf9f30272700b50b514301e890760ba06d1828ce7ca486c453566d6be6f5c28742f9cfb4e2d9119756d9f341a0bd4caa32d32ff5bf974ea1bfdb8db76905d6f733c11a56a5ed20adc81b4ff8e6ac68d21f66154034d155f1da422bc38b3d0082206ac770bbae60b6ae63e2e92dadfbb0583313be85ffae518423ed762a7349f776080b6f07ac8fb50ea086a8daff44fdee87a79c72005446f4397787bd9a221d7c2c6a8204956ed0b1defb7a3da63cd02dc8cf6bdbaed113dd0cb05d61499e0f23c29fc8b7f0bfb4b9e0a0fe63fb46aaf6082ad792001e73cad7a700</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">形式语言与自动机</summary>
    
    
    
    <category term="计算机基础" scheme="https://yokumii.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机基础" scheme="https://yokumii.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="private" scheme="https://yokumii.github.io/blog/tags/private/"/>
    
  </entry>
  
  <entry>
    <title>计组学习笔记(2)：运算方法与运算器II</title>
    <link href="https://yokumii.github.io/blog/2025/03/22/%E8%AE%A1%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)%EF%BC%9A%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95%E4%B8%8E%E8%BF%90%E7%AE%97%E5%99%A8II/"/>
    <id>https://yokumii.github.io/blog/2025/03/22/%E8%AE%A1%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)%EF%BC%9A%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95%E4%B8%8E%E8%BF%90%E7%AE%97%E5%99%A8II/</id>
    <published>2025-03-22T12:40:00.000Z</published>
    <updated>2025-03-27T05:09:15.668Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="ffd4fa042db55c1a2b44762272dd8a879660bd2547591f53d34000fe4a2f57cd">6df07e4654b2f23296fe416e73f530c96bf04cf67b3d4ddcef59c681cd714fa3b20c9aa5417eaafb7d243b2e9137c1d8aa5f0f2b4157a25a0ced9051dede5e72a8109f9114eb306c80301ca92ffeb36d36d6b3c4715358093ba5422f00b81da44a7a37c4b5e181dbc8d551fd07dc39bd5bc7baeef445393a0628bfa0965a1de81160b783d2cb7345b117d8983e297d6ed877c36a6fac89b1e4c2a925a68a331902f3add7c3870c5993072d7dda1dd29e0c0f7f1804082d90935c13e8ef9ead87bf3f33907bb98a59662e6b89be14a0942115cb0f326e053764841bbbf59f182df3d027ddc229dde690fe1356ac35ff77f198ee1ee8fffc0635fa4356edddeba143f0d7fd0c80944b734c33e478c56c812b146298c3dbff109b31a638b53ee7a4518a9696f9cc838def5df7707f6f0afb22bf7a4c44a77ca9d2b54bf7aa27e1fc41c6957000914a576a22fc0eb02f38b47b58e8e3319a9d7c88357aea6a040f88227f4afd5ceab94e669ad74884c6baca044a4817a1a0f356bd245839d8d2bde7d97311a8481f0a0d56173987769b975ed3d0b67b8ac219a54cb765e19bec103b455397350955d6210669186626f32b59f97d74ac629ac60a3e5f938dce5d328a1a3090444970fff080b05205f6351a52d818a8620e293fcd04695cacaae932782e5775d45d86157f8a10a2c79db4f09d15e1ec34a7b50f6a0a0b76e6579348f7550ebad788d8541cc62e3983f4f90c2c1596bf153259c0a10f6e260c7332c673c7fd1d12984f8fc34e30105a2ff2eb24cacfce590c746af5af524784b7abec955a38763959ae9b59425c2543e65e0bdaba48ffaa27da0b59d60ac8c3f092889e6b6e55c858a344850432b21067e15b246e3cec7c88eac779693e7dd63deeaf5ab5050b5cf864b649ec16607aec2665576786dc5028c0b780f84e15de4b854f443bf57fa4af5cd13c1b8f6ea2936c90d50fc4d3f60b2b686cf2851cac5458b520b9c91efbf15485d8a05a29b984f3b97d791ce281414757c56edae470ff6cd93dedf94770e5150051cf1fd25557ac316738c46a948da60e6d42f6c16d15dcd9015acfc58bbc6f82fde31e166692144831ea9a3288d2827ccbee6b4d0f063d32320c99a99a98243eb0a131b213043eeda13bcd6c410f550f0aaf20c0d9bbac4e2c0e3b47b81ef7991fde4c31782f963dbaff590f190a890f40a10e18357bdcb373381bbe7b0085d7fc91fbfb044d8925d3aee7b9d210714c82f4cf53b236188524533384a01bc89ae0131a65d9416f60cf66d337a9ae82c759df87ea4ca9eafc7bcb4e4cf6b991bf2de2bdc7efc642ab9ed60efe2717d62cc62f107c0731a0e6b0404b2481a0f36ff21b0bdd8bc2d6a0244c926f1010206185b2695c6f97325f06b8f603f640fc036ec4a79266d56a5b00c827cce4babec57dc75b5c2dcdcf58d4b8704c8a97f727dd6ec4742b2fce79fee16f8673336a2ca4dd1d22a4b7368d8b256dd49b32acdf41d974c85cb7eda36cba7b6d2190cd0a06f6ecfc7d7b14c117a31fc1f5c63564944d1c4e37f8b78370de69981fe53a121fef5f3f9541a858d9903fa0cecb88dcf37a79ec7751029356df7922ad4de08e1ee8b9947cbf620524589e2fecdcad3883d099bd0b883c8f7ec750d0bea7c56552dfc62df7eb2d5b707c9fc6f64602747c28c64320c71ae95737173b214cbeba430c6d42bc848678f2546aaf5792ee87689ee67e924ac73544f1353125f2a7fbc080bd302927ff97d13666a649290235da6858705b98dba355a56a29de228bc6b41e005fa23b6039f58ebc2c9a1255bf06f743c091d16e6882c7c465af301a602b8154ecb8877ef4af686881dcb63a8ffc793a74cda8dd77ba61012e00fe0d95cf594aca6b6566ed7256effc14dae5f4ed8296aac80fef2e34612c3f7e9a2c408d10ef14933d255e0c190e5a76e4d6c654478cbac35c0b7fc6dc321854cda35f0f117f36ba4ae659146ed618e6d30b91d94266faeb037a0ba58348618cf408d472297cff7446ead3c32d7f5fd004cce8cd23c282a9ae5e22b616bafb164647f5eee3e202d986dd1d7ba7897f3f92848aa75af27c006119ed5ed96f2902b5b88929d304a68ef428f00e7f0f6f9c51f8f781a117b864e41cf89f8010979ffed5ab920c9504d2b0995b924d87df4883be130de2393846d41319b78335dd70ec687f92fc5e5527a51dcc1f7aaadd50900cf0e97e273780bf196ef37c1b2d8f21137916010f55986e2a991463f6ba6e309a606737412a4d86d3d75140b62a3025e53fa7b3f3b06d77f9cedc22319f4fba407f91402b68136036c75b4dbe4a992c884d7dd6a5b0ba966cdc05e91844431737e79d3a05cf8277c42e1058849923fb0b65c2519541280fb8bd0a905b622525b3ff14a8e8fb8534da53250418c6238191127907b25ffd4da3c7658845df279c3cc2a16df78d0453f1c1a5f2a26be8f2771f4eccd6bbbcaa8b0ca1706e16ba7132a61daa5fb7d78c108b7fb3f881008aee9e8e516aabc752f6fe65975c32f67bf4af253830e7e3810262537e2851ae5561b8b67c84071a5b270ebf27e561599907254538f61b156b13ecc030b11168cf8ddf3b8b56c0e1067ee480223175ec9d7e2f95c0d84373272eb1f01f127f2cb24120e4f834270a6bb6e3b269b9d756d9fdf17bd7281e41559dcb61fc37bdb9da9a6b52fb81f26118fdb178e3b887ff53f161a7962b8845660c229be58d5ebee6a587392983bdd0754e66ec8461ac418cf1321c3e9f60a1b6f3830ada625d28a30b12e741d6c9ec48219159a85a466bd7a4766c4b740d916cdb88ddf642af5a0065652e8aa0c869391ce8dbc832e2f2ed96f1f940e7bff2f525341279a754c13f9b0b46eead5d56bb4a8899a47ae8d67f3e153cdf29d182abf9dd3fd0e0cfb34bfdb2e243342d3f5413807bb522652966697e42423e32743c44979697e1ea150eb74c07594d3977f531e0d9702fefdfdf09b43050c5cc2c1acba7e6a5a1aae6c1a2d99949373bc8d8d0a88354d47e4c5aed0440a87fa3d68d67b2a5b408cd1ab6d9cd7ec555b93b908295a5ebbce0d64e4e62617f9d5ed48c1237f47c2a40ac69feb82027bede9a67fdef9c678ad60e701dc6a3adbb679c6073308a1297ab5fa8fdddac701c7194d9890ed7bf0fe6694d7493f0d9f1e5a93ffbb6b5a1f0a02da6debaaffb7962f4b8839d82bf38a9b3db01e9f7fc289ec60ee152c93220c7f02cc0750f42303f74a65ead395aec455b6e925c0c8c3ccafbb3bfd010751c709b40e4853f9a2866bab506a9db2aa6a26c37506f0c149170294b92a3a0340564672e9b61073a154acb9046bd9d847e3ba3da471eca04b03234847061c6af8cac66a19612be9842fc0c0b1b24d8e8a2450f8ec5b88fcb522965d26d07adb00da6379acc3d9b7d329ae6712d84a54d2ebd9db406670b87cabe3383a54b210599e61ec8446d5b95eb800997aa8c306022bf3b5ea514512ce5c2da4e1d8a5fa85d97e2e3d1bce9348f4ce7f0bc5d338f3c7b1d2f861de2d4e932207d978d65fc3f8df1161cec39429e5b086534e8027ebbb24ee7fc8db35ecacb41b0594281c22c5d1d7639fd2998d5e5c02e3864719be6ca0f71fb05be5e70a1afeda72655cfdb203fd5752dd92b8b2bcb8e1629c98bd9940ae4764912e671d25e31e412c2e31ed631155f100a9c1081c8c67afcb37aaf7fe9d81d4fffcb8e5072ee0053f230c08758998ec810f5bbbd2e593fa457fd665dfa1b24ffef0c0d7c0da7c7cd6b3e497fcc0b4cce8572898fd987a70cd9a763c1cc5f303b8b308aaec0b8f4a91f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">运算方法与运算器II</summary>
    
    
    
    <category term="计算机组成原理" scheme="https://yokumii.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="private" scheme="https://yokumii.github.io/blog/tags/private/"/>
    
    <category term="计算机组成原理" scheme="https://yokumii.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>计网学习笔记(3)：数据链路层</title>
    <link href="https://yokumii.github.io/blog/2025/03/21/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)%EF%BC%9A%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <id>https://yokumii.github.io/blog/2025/03/21/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(3)%EF%BC%9A%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</id>
    <published>2025-03-21T01:17:00.000Z</published>
    <updated>2025-04-04T05:57:49.297Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="a80b89b0519061e249cddde70c271eb3104d938b51d59379bb0b793e4045393e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">数据链路层</summary>
    
    
    
    <category term="计算机网络" scheme="https://yokumii.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="private" scheme="https://yokumii.github.io/blog/tags/private/"/>
    
    <category term="计算机网络" scheme="https://yokumii.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计组学习笔记(2)：运算方法与运算器Ⅰ</title>
    <link href="https://yokumii.github.io/blog/2025/03/13/%E8%AE%A1%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)%EF%BC%9A%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95%E4%B8%8E%E8%BF%90%E7%AE%97%E5%99%A8%E2%85%A0/"/>
    <id>https://yokumii.github.io/blog/2025/03/13/%E8%AE%A1%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)%EF%BC%9A%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95%E4%B8%8E%E8%BF%90%E7%AE%97%E5%99%A8%E2%85%A0/</id>
    <published>2025-03-13T04:26:00.000Z</published>
    <updated>2025-03-27T02:26:27.452Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="8c8297aabfd7128a4637baa22db74ef2f32e045e67675931ae529d55ed3d5cbd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">运算方法与运算器Ⅰ</summary>
    
    
    
    <category term="计算机组成原理" scheme="https://yokumii.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="private" scheme="https://yokumii.github.io/blog/tags/private/"/>
    
    <category term="计算机组成原理" scheme="https://yokumii.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>计网学习笔记(2)：物理层</title>
    <link href="https://yokumii.github.io/blog/2025/03/07/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)%EF%BC%9A%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <id>https://yokumii.github.io/blog/2025/03/07/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(2)%EF%BC%9A%E7%89%A9%E7%90%86%E5%B1%82/</id>
    <published>2025-03-07T13:58:00.000Z</published>
    <updated>2025-03-22T13:37:49.184Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="71efd60f2805107f68e63973786f414b3a7d89b802a05144d66b7cd95671a3cf"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">物理层</summary>
    
    
    
    <category term="计算机网络" scheme="https://yokumii.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="private" scheme="https://yokumii.github.io/blog/tags/private/"/>
    
    <category term="计算机网络" scheme="https://yokumii.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>形式语言与自动机学习笔记(1)</title>
    <link href="https://yokumii.github.io/blog/2025/03/05/%E5%BD%A2%E5%BC%8F%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/"/>
    <id>https://yokumii.github.io/blog/2025/03/05/%E5%BD%A2%E5%BC%8F%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/</id>
    <published>2025-03-05T13:20:00.000Z</published>
    <updated>2025-03-31T13:40:32.892Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="c24200eb87efe16e780d6d62e2c5bc1027c6e17edcd6aaba46ec0c1bc97f0e3d">6df07e4654b2f23296fe416e73f530c96bf04cf67b3d4ddcef59c681cd714fa3f2c6baf4988eb7beafb34d41450f840117a1384450a9a3a5a8a75599d62c1e91b13e58e6a9fd8a10b8d38d9eea7414795626a16243394e80dfbd64329f024aba967a3bbd3c7f12e0b6c5180258cdc11e3495882c3663834552e4b3ee3f92584d8141aec1e05058cd04f63e30aab2a8c01b880bf458ee0803b182be7e8df7ee4cc0403964f6e1486021e3abe5e7459efc097c13af8b32914619736d68ac991de72d046fa900651597051dca21aefc883e947289b3f01c3de2bb88092f02fde9ab5b708640369747f7043846936b0c56a2131a2e6d844eb6f388214731bc893196e9ad069a46e43f6204315ab63302cfcf23747794008f8ac0f966eb913e998e8e843ca7ffd5de1905e5411c56df429963c19214fe4877bb5b9527b30ddb68ea70d1ec701832ea231370e8d3e45f3d65eb359c6c91b85d4d7d5687f44852ca45e174ef0bfee09fe58bad408001e1ac1ed4904f38c217f5320ac0a4aee36370ac3480a800c596dc82799b3fc933bffcaeb8804a9f67081c90f86109312084cb253a0a5b7d0df8d03b32784951a3d9a36062d32d8251f3ed21744d99f8832b535ede57e981b7c739ac85f1ed2b49e4a3facded7c32fe5609c2651a52407c577d38b9deddce2684b9bf7313ca36160d7c639500d257709d1674c19c77714e57584eb737a8eeb956cdec47c2c3b90257c99de8b95edeb2ad63d7278da3c3487ed09f101914da34ece7e7e8610639ba85e50528c44d2b240b96e2fb1ccc4fb0caebf30bc57a7cb92807a2a4428a7fe5ba2d962df99731d9b9914a83c8b779c58c2d32d46490af7f4fe00c1f57755fa9cff6d4813310dcaae8c1afd1c8934d63b43d78163585255714d9f29acab703d4d4f83236c2078d3483739cf9faa4006c91e39f36a4990552bb4ac7fc9052d7456f6ff3747b85a66a8abf281af9305e6c7b5c9927ea84e8add55a38d1a9405722d6ee3f6bbcd21aaec46865cee93321541273d15b47e3860dae8747e4d354219187da19272a7be56463c4ca8530f441186e4d0efbf8a5f75de4df6dd62d4858292d27696f9dca4350c9304804913f6e67fb8cb2c0db17793c33773579fe69130ed9d36a50344413d4c2c717521d26dafab208e4fbe5df3725e6b28f8749cb3a7ad766110c2a8af2cbbb31afc190b98f1dfa19076136bf9f4ce5e035ddaa18737f966334970ee73aa3427475d20172fe23ee9360413e4f1eb81b2254e720f860f1de2d0dc3ade25bab807151ab3063751e5b8c61650b8d39a9c7d14e1cafeda849a228f2c4fd4e984be703a8e32a5285aa50dfa3783818ea85b3dbf5fbc9cd1c25a38f81b87c375a5cf11f341fad25d679344e36d417b273e6607b56732b210488b0df2a76619430fa10ba492da42fda5c8ca94732fe4f388a527f1f2e5d2ddb18e16165ed2bd0606008d3cac84901c9bda29e76e40825b228e47f7a07e546452788a6ce12fa21f829f2d7542d7c7d11fb873d7c9532f9bf59764919ea827895ede8adec50aed7e904854e56209f5472f2196b27203a4cf5cee5028b788e83c8fdf7d62ba5c8e53f1948c6aa6eb3ddfa7879024692bf47ab53a5caa4b8b6cda59958c6a99851b67e50f0fcc301e1bef555e24806226030dd3bfa49279cb2366d40b7740cdfbf9453c271846f69c8b687356cc7383345eafea680558bbc04c7a3f1c9ac7977bb0d561eb68800659a5b01c14de661368a22528d27e6a3d53898a832b5f1e86f13710d5a764bd7a643e4a558d1b44d5d6264e914f94403339e7f7b23197266b5707e6d497e243ab7599bfac92b83e934a85a97f6293cd9e4b62bb318e157121c2e9d132cc3fec7b095daf01f032d42c091932e5a23acd8af3f7d072d421f15290f56ac3b29c325b3b44586fdb8115c9ba7f6c92d93ebd38172605e972505cec3baa7a7cd7f843f00ba268b5fbbf5ff574bcd771d7a8ebaa44b67046a719ff3235041e74d23859b029ddac57cfa7a0e77d3535b16afc33c34419d8a16b3ea99358acb573cee1692e5718c6240e5c1153a3d29dd27d3ffba975bd6fafed1a0bf864abd198cf1b4d6e5ff0a25d8f4bd78cd7ff4b7ea977ddb08320199b4f9e6f445fbe60e9b62cc056a7ca5848587e2c09302c4d2d8699d9e3497e56767b9fd008337d38b9fec76ff902cd2580b51bfea7652a563a356189e1e99c46e2bc5a0e5076b2c3dfbf374236a5d5ca467193ba87e3d3a4e5890b886f3fd07c612b2992236717176e3eb7a594dd4851b866a1f5c5c6e0687468c687a3d248908105aefbd4b2e3800ead882fc6372e55457ad408ee7b1e193f016653acec6c4eea2b2664882716737ff180f8aef5d8d96d605a149bd0e9c314188f6bee264433d400501098b4c8052bdf82dea527e6163cbdc1072d6f0b89c9fa1cf0f03010331d21d46418035d04f8a2b5d7f368fb00e3a6614d108f502cba3b64dbb3127b087e79c7c90e0e6fb67a680a0ec89ad6fda487dadec3fbb411932f3e65028ad6d4d9ee60892a06c068152a7cdf005b3b0a3256f8274026dea9a6f083b7050be022a3e38710f695e440793cfcb904d2a63a68b80e8ee81a870ec6619f7b9627c47d75587b4ad40662540a79c508c6c7db3bab4fb5c79913b09892038e62d880507e1324cb810372187e5f2e88646e7838c7ac4cdebfa4f726b6c5ad7a2bf299fde70f927e56a3d13f32815389ff7e7464d113d36e085ec1164acaee8e0c253547a24f2aae3988c9617c9e0ad306a099d25e600c50ddc52bf8d747f6d2a976830621571af44f38f5ea1efc0c678fb79abcff796bf9a87e9969f6f6269571276376bf6b58d3f372642da42798e39898ae4b4e00d99b991a861e52bba0e583e080a88db3a9f8ec4cd120ddf98d304a16a4cfc01b8a294ac48dd0a1fe28c01d086db4cf67f9fb891e1f4a35f9158ee46acb9b83bbead8592fed5c8de1677197ca34d0e8ecce227b41410dbd922dea36d6a11a5dcebb3c5ad0f700983e4261d71a592b1542d2ef9921c6ca213e8336f116587c1a0631a67915418e645563e2541de7ca302ae154fe908f49914fbe50f3489c1f413ba0e720ba9c044cf4b97a4dda89e034da3ac1649c21d2446ac69043cdc74444dff4a7e9cbd04d75624cb9dd6f23f7c01634d98b6e7c9575e811cbf461efb6033b541d1f7d061fcd59b102865fe3bd35d8cb415c4db2f6e95e8e2f2bac34c306886d5a14fcd1cb6b6513c279fa47f8c36bb88d30578ab255979289d25c89c271ca4171a8691c7fe321590267abf6a14693e6636f724284d0b92374d37a58caf4f0b6065a6dea592ec402107c48c6201f5eb19dd6364c65fbd7ba4eea41347649909b8b7f6cea5a067e6311fde97b6f688155164951d76b968ca794c93b148525777a94d7e3e39a380ca3798c472ac13654b37583ebc4a4d688db75183a961e028618f039aa43516e82723fdbb3b16de6c50a4582633437e2d637c5ff33019a5d46ec447ac781eca4c1ccdf14ace9c115fd8a1a26d756cf2c6a842168f6275f69051a0750d89ccfebc44cb9f9019aac07d596d7e1a44f05b7f01fd4b72b6ff1a7f89fe9459d7f13479da57fbf01f89ac1805630e8efa18e2da624b63b03f5796cf52a9e37f92fd0100c2911c9820592bfdf29ea4827b65b486463ca787bc7686d8589bc7e41d2fd339bb4f66470d006e56599693346ea33aba4738ed87c429b6ff95e86ec84fed1a5fd910c15f1d412200b18318ba82d541b531e8124d60c1444ad7a5ea21a93f5396de50e730a194a1f419135aa09079a2e2bd035ece050049bdcf8823d3597b34384c4b7c8a68f60e57b2390fe2e772385eee0f69f3a6b99ab184c86a126e8c7e1057fd5cd37dc644f66fb0d1a27b9507532bfaf55c13779e00a98dec0de20077dd241c38293ff3f2749ff3c9d80b01382dff02db915dda44e67d8c2bbe3686df1f0f63883cc537fca526807403f28b688eabf1cfcba59c6ea21d69edec34dd6d08a8ee9d034a7a0b75083875d8b42018f7ccbcf7217ed0f9703488e73661f6ed7bbf6b66476c5b0db6537f6b77383863377297f4bfb240af4a72619d332559737bf48d84049b4166997b7c2ed135fe2c1abf201e9899887339b3507cfcb14a9fa0c9168d75ac768ffc330edff2f5ca29dc9d773b36ed103add201f163df881b5880ba85b8b4c5305c6215890acb6ceb0e2648d88105465509d0e9e849aa9f8323b54096594c767e2a78909489c4c525fdc42dd31f59b2f9a827fb9f84a129711ec375a28dcfecf0a04e4d234084627aa288961b1b302c47d7dbea94ee4aad2b65d47cd4f19cf93b90295a226d9050c143dae83d6ee45dfc866e0de88e60b67f136415db4294b16fffb08f2532d2c1c75bb9f2eea03a5bd254ed63f86eac3fd9d47363488dd00603c7f83d87f85f4fe62815278cf658990475bba0dcfd30e47e4a26a2132305fac3725c7b3ea5183769096507a2170200047ab9790617d7030ec5aa41ae758afa213bdc35609bff646a297c5c7efd794bfbc30e3d8e2c5657f274abbec8f649027ebce301afc141e29efd1131d3b81c9e05c2c1444d6ab1d8a78f030677d5dafbc2e99662901060b08de8e669a94607f3e9915e59df563f66edc6e566590ec543e4de7cba187fc190129e858a1bb67c30a328dfff21d9403907e8ec18c71fd5524b736496e205f6ec1c2c7798e3591fed68c479d2bd749036c25434bb801a935aac4d7e9031ed8fd17cc6f6838547121578f6b604d0a01e6b73249d7cf5a21bd5910999ec393cfa7567855facfbc10da4a83f0dc54219f0fe4102a005f5a21d0377ebe1df475bdb6a4df4b7ec6bea1d99012c9048a2bb12f7ec81c0c28e853daf51d44dda1b974e4d05d55fed1922725bb1fc2ac8c5265cae279e64199cb7736bc55df1248378c281b9ce20a252ab6fa25ef488cc29c004533f995f150afa9e60aef45596ccee5e3b747d17ec92a8c963658b225790e945a9e96a590dc3e580a1b1cfc37164fc4324fe6062f279088eadebc39f973098380fb4cc5e9e7380c459f03e9fc31fdda66a79d556cfcabcb488636bdfef5bee37bfb13f99f960b227f4dc89c16186436647abc3c59f54593eae8515c44fce76efcd97f7b963b4629b1a9d14da8bece84c0a30cc003cbc04e1b26f97da0a973c192bb7821a0ae8d91be2fa9f299ce6aee56b79d82ee705a1f229a10a34629a92e2a51c0e39e6386f88023ad0a99cd89f6b0f0d2aed99cb2a1aa29f4586982fc5d16263278fc3df42317371e06d07e0a19f67ba0d275dfaea453afd3906c789eb9307cba3d41a15e87fb07f3ecb0dc082949e17d3f7309de25731d77f808576e3a815ac956be82afcb8a1634a9bb48ecaa179fa1ba5b2f07047e940f84739fc4c7c1b391b7bd8f553bb44a55f0526474d6411376ff37fec86bdd4115764c2565346a8679453b35879925c185a2c7da40c4123805a637761966cbb39f5438c8e1afee3590614be5376c20b9531a27a821f188ad1b83e62fd5fde1d5eeb445e2fb2807155a643de95965fdeef1f1161d9e78c5c756afdc11687d49cf740d82c24f90a2dfa522522a2e0cac50a006d7415b859db24a993bea2064f4c27392872eec884b3ae215e6d2a5b030723af477ef5c572144ff2fb0a3f69eab5669e748af41777256f52650196735b9c2f61319c452c1298d5f479b24d9ae16e989baee51eb52f51d634dd6e38ed124f6b162b2471d7d7f55bb2180c75bca41a4f4cf07d853a94cf39af2309c938f3e9e1251c04dc42f7f1e1f9c5699bbcb878354fe73484d9bc0dcf188059040248a7d6db0417b0b6a0347c43d7ae4c7b3cfcd04b2547bbad056ee3094ecd2d3b9c2d32f69e8026d5058cb64c18dfeaa39399c44354540b42f300edd5941c60342e326822d22552dd9c8d934548c294e67b7f22cc080441cf83b95f1a77f29b79c7e4e4b97edc0f8ac4d07b479ff119f25b12674a19a78105dc65fe8e42e0ad6735dc07add6a2a6cc79995806aa28e54f21d6b9165c21f66869112c5852ec58f87b5f46650caceb91b8e4f029a46761468ad8bb93ff2a298077263bfb152bc6785857211b3690bcc408adb7599734113dc5fe8a5483b3e374923bea1c73753a61a15308cf0134c12adb33de3cad9b9a8567c87b33d697c748c3f9d0bb1c3f9f36dbf02a39606bc4a3ac6c2841ac12b823f2fa0b8904303125b4acac521f4785f91302a7e9668bb02c78a910102ea4694595ab1101d89fdea9a8ba93d7062808daa2f100a0aae9d9e616c6820c5076fb4111d6f77e83b0f48ae1ace2af0943ab0083434c8dcf42c65aef18a784f70b11765fedb67e22ca2eab7fe6182bfeac9cc5745c602bc4a7a7c49758e34824c80ddd0d57e8ae70894a530f6b79f325edbd34dd5c8d30b0821a8ca3a22473764f323402f23e0b565e78569b9f878f412a23feab0074924eb703518ce9772779fcf37f1043904b16f5d66b4eae7068443587bca5896cc7a54feb54c5c7c7948ef2bbcc34a2f7b15bb46d09a30f3d8927dcef7f08c22c5042095a6a85809db67444b863268859ce35ddd78fa0c30d899a5c6169b0459c4767c6a0cc3135c481b12c920662eeffbe9291364e46f33b1b92cd0dd9625a8ed2159f5edf63e0ded789708e4aac71d604e6c924360b171b57a5c56bbdd869d053b1fdce94e39ab1452df4dcaba4238ebd370f6cf5d584e7559dfb68f85f18d955685d7df907b0be0b5ddc6f058b43a0d25de68d30df54b7789ef176054338e334e839b9d01b91dfa556634309ef9d6427bc6c086e417d4196aeb5adebb4a50ee8e6c9cf583b0015215a7e202a499a2185c815cf061eaed3b82416df5c0df183f7b9ae444ce61bb2abb919ccbfb7aa02ec06b6f205702316c65a78de2973314ef20f3247af8664906095963c245eeed5fa33f0ca89ee95d64d450136ef3104451f3c39c773c65093d5d36311ec54128cb61291371cf0775ab6cda43492d9df0fe77975bffac5f3ed04477a4bffb9657f9009d412f81348019bbf56a81a5cd28a55cb036bb50b6c8886f913b3a3e70d0b019d672ece8b3dc6d8c37abfbcf47ce5aa6c60ecb232588a52181eaa7bc803204109a040ca8cb86d0ef888cf2f15caf285ba4d12921dc165042275035eb2adabb8b329eae4623d86d17a8b6409218cb6d734695929ed8a2272c7ed3ac8d55cf10452ba92637f2b843c9361c7159af0364647b35f498747a54c0fd9e4f7b16062bfb76bc398b16341ae8b609d2ee37b0127448ad9ce03ec2a9dd07fddabdd99873d9e4198ec278421e64326dd734ebb6b31142f50d96b46a63823242688b41c17782dd42000cf18df8420186617fba323095ff81d0d765db0f64f957a54bbcdde17b63bacbafca3795f02390180d45bce47a2dd82aa573d6740a26bf50840ec6d29298645dfcac14f5dd693d355fa5ad7e83e3cc6d54b133cc022b9185e42569dcc71ca23a6fdd1c757b797bebc0279325edfd9364460231081a808562ce799fec38f382cbc4f59fa6e57e68025b1dd215268d92212b016c94698c212e06d25f9dc3bf5810a97501f7c7f0a002a0bae81adc877b6f6b3f47bd932ef67bfdd6b80155638fef5631595d8d06da14e8f6682f7fd217d0746f1316545ba9a41ab3c8751d6422185d3770634ac821eaf11d05ad1f86121463120cca72aca2aec846c53e6edd7aeb80f0763797bd99e04009de0cb27b34853e7366340ce78a2a683aac81c7bfc5a926fa43e4716812dcf7a9ed266d6ee22acf995bbb0113a5ab1e772ffde7f7531a771112ea3769ed6176a6aebb103cd9221e25c0f0c81f4f867ab07f6914f1ec12b466e788561d5d76d290f428da46cca807e3e58d2585df7357a0f12d57b674b2f9e853a9ef9ebe1bafbfea642a2198c04185137c8c58653877849c78581a30dd982a99c9626cb188c192c60ff7c256f70ccf6fbd48e24bbf02b4630b349b001a79ae17a55ca27f6df7a53b81034ca3c19b1f4b579dbd2da5b9acd6ab7e4d3aca6229615da7efdc158f9941bcfddeac77047ba58176273aa298c8c437d503a3e2125ce2e5c6e189bbfc1c75e5aec0fb87781fc45b5f2d83b1967bddeb5bfc7345397d6096fdeace3a1febfb7b967386d707065a067a39c2299c4fb784fc4b8701acfb83ff7f97b95a5dc0a79d9a485fcc52c567d5be56caad88d147fac0d4b5b8c0de7b8b2d422abd2bb61893d88b1a1667b29cb36cd7543ef4575175eb3965e7f1a5f94d9b0bc15518e79c343f23c60f5c61f5baf0bb535a232e0acd3164b182fad220b546aafbc8403dfde335371e50ad0a3401a633d4a518fd001021430351a89e6bbd81a2008a1654207c13444682df119e36908e7c3c10718a83310739d32b32ff8635e320baf0bd8d1dc9105263102014ac0c3e151aa8ebb5563bc5d27c22f628ebb10af8baa5701d43dede1464335f8966ce038415f988dd506bd7796845b477804ba25d4f9c30f85e8a3b9be66454fc8ffe68567e9a7598b56d2775cc4eb90414a2c8e3025c7aec77186eff3202a6ce7b66e47fac26b3c3aacb6f5501d7a75972f1267e406486a9a3a99bf0f68a640f14421a2e72a49ac24d5a632616b087b68cf8cef35f9c8a81edc19ca28f4546a5e00360908341334f33bf50ad1e4340e4a863334ae304c0cb580bbabaeff26613c7ac9e5c90d643efafc51d339b9acc38554cebc419d3ed833e0432ec9fda656fb6ccc3c653bea44fbad9d44f06e8894348adad3bc5cf0af392998209f99c3ffd8e5a307b76f65323c6e4ead4130e673feab101ca06b76a06ef6cb3bebdacb6249085d206fc9361c8709b24f65963991a73ba4d9bccff0bd9001a7e64602eda8cfcd638815044740aa72fad74a81f4c590ec81bd8985298a84b74e52354d87d3da8abc1a963b16eaecd6644c63c6aa9152f56bd03fd6f5666d9f2e5dd43153182b2a9d183e6da64efa4cb8480e1a30d85a014f1bb2d77a9aff325d5ac622fac808930f8dabf0600e7037a703f9c9b346dfba506478d3a8476905c70b257f93e77b3995de0546a754407f0262fe4b32538bef96dcb4f4eea17bc5f91b34ddb0d75ed82a1345f7d6099020348e364483ca02a62dc2531c6fc0a8483b0603573cb3e9c1a8d239d8583be2edba903d34c6293e522d3bb9731c9b2cfea8117a2e6c52a063b1d1909ed9d126741dac3d87cc37138547c70ae48a6c1664f286b8005874f52513f4fccb4c121d0314ee89485ad</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">形式语言与自动机</summary>
    
    
    
    <category term="计算机基础" scheme="https://yokumii.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机基础" scheme="https://yokumii.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="private" scheme="https://yokumii.github.io/blog/tags/private/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的程序设计(Java)</title>
    <link href="https://yokumii.github.io/blog/2025/03/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1(Java)/"/>
    <id>https://yokumii.github.io/blog/2025/03/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1(Java)/</id>
    <published>2025-03-01T03:08:00.000Z</published>
    <updated>2025-03-23T09:24:49.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象的三大特性">面向对象的三大特性</h1><ul><li>封装、继承、多态<ul><li>封装：对抽象的事物抽象成一个对象，并对其对象的属性私有化，同时能提供一些能被外部访问属性的方法。<ul><li>对象：属性+方法；<ul><li>成员变量：生存期是对象的生存期，作用域在类的内部；<ul><li>访问属性：private vs. public vs. friendly<ul><li>private：针对类而不是针对对象的，即同一个类的不同对象的私有属性之间可以相互访问；</li><li>friendly：既没有public也没有private修饰，可以在同一个package内进行访问；</li><li>public：一个编译单元（.java文件）只能有一个public类，并且名称要求相同；</li><li>protected：自己、同一个package内、子类可访问；</li></ul></li></ul></li><li>本地变量：生存期和作用域都是函数内部；</li><li>对象初始化：<ul><li>构造函数（无返回类型，接收无参和有参两种构造方式，即多个同名但参数表不同的函数构成了函数<strong><em>重载</em></strong>）；</li><li>初始化顺序：定义初始化<span class="math inline">\(\rightarrow\)</span>构造器；如果继承了父类，先进行父类初始化，并需要确保父类的属性得到了正确的初始化；</li></ul></li></ul></li></ul></li><li>继承：子类扩展新的数据域或功能，并复用父类的属性与功能，单继承，多实现；<ul><li>Cpp和Java的一个重要区别是，Cpp支持多继承，并且有指针的概念；Java是单继承，但可以用接口来实现多继承；</li></ul></li><li>多态：<ul><li>多态变量：对象变量能对应多种类型，具体可分为静态类型和动态类型；</li><li>造型Cast：<ul><li>造型并不是类型转换；</li><li>向上造型Upcasting：子类对象可以当作父类对象来使用，即子类对象可以用父类对象来赋值；</li></ul></li><li>函数调用的绑定：通过对象类型去调用函数时，调用哪个函数称为绑定；<ul><li>静态绑定：根据变量的声明类型决定；在编译期间确定，被称为静态分派，比如函数的重载；</li><li>动态绑定：根据变量的动态类型决定；在程序运行时确定，被称为动态分派，比如方法的重写（同名同参数表的子类方法会覆盖(override)父类方法）；</li></ul></li><li>多态的底层实现是动态绑定，实际就是方法调用动态分派的过程。如果子类方法覆盖了父类方法，在多态调用时，会先确定实际类型为子类，然后先搜索子类中的该方法。</li></ul></li></ul></li></ul><h1 id="static-vs.-final">static vs. final</h1><ul><li>Static：<ul><li>static修饰属性：类变量，所有对象共享一份，随着类的加载而加载（只加载一次），先于对象的创建；可以使用类名直接调用；</li><li>static修饰方法：类函数，随着类的加载而加载；可以使用类名直接调用；静态方法中，只能调用静态的成员，不可用this；</li></ul></li><li>final：<ul><li>final修饰变量：<ul><li>如果修饰基本数据类型，那相当于常量，不能改变值；</li><li>如果修饰引用数据类型的变量（即对象的引用），那么不能改变对象的引用（即存储地址），即初始化后不能再让其指向一个新的对象；</li></ul></li><li>final修饰方法：相当于禁用了重写，继承类不能修改该方法的含义；</li><li>final修饰类：<ul><li>该类不能被继承；</li><li>final类中的所有成员⽅法都会被隐式地指定为final⽅法；</li><li>该类的成员变量不受影响；</li><li>该类可以有内部类；</li><li>当然，也可以通过私有化构造方法来禁止该类被继承（单例模式）；</li></ul></li></ul></li></ul><h1 id="抽象类-vs.-接口interface">抽象类 vs. 接口Interface</h1><ul><li>抽象类：包含抽象方法的类，即使用abstract修饰的类；有抽象函数的类一定是抽象类；<ul><li>抽象类不能用于实例化对象；</li><li>抽象类只能被继承；</li></ul></li><li>接口：接口是一个抽象类型，是抽象方法的集合；<ul><li>接口支持多继承；</li><li>接口中定义的方法，默认是 public abstract 修饰的抽象方法；</li></ul></li><li>相同点：<ul><li>两者均不能被实例化；</li><li>子类/实现类必须重写抽象类/接口中定义的抽象方法；</li></ul></li><li>不同点：<ul><li>抽象类有构造方法，接口没有构造方法；</li><li>抽象类可以包含普通方法，接口中只能是publicabstract修饰抽象方法（Java8 之后可以）；</li><li>抽象类只能单继承，接口可以多继承；</li><li>抽象类可以定义各种类型的成员变量，接口中只能是public staticfinal修饰的静态常量；</li></ul></li></ul>]]></content>
    
    
    <summary type="html">面向对象的程序设计</summary>
    
    
    
    <category term="计算机基础" scheme="https://yokumii.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="面向对象" scheme="https://yokumii.github.io/blog/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>计网学习笔记(1)：引言</title>
    <link href="https://yokumii.github.io/blog/2025/02/27/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)%EF%BC%9A%E5%BC%95%E8%A8%80/"/>
    <id>https://yokumii.github.io/blog/2025/02/27/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)%EF%BC%9A%E5%BC%95%E8%A8%80/</id>
    <published>2025-02-27T11:22:00.000Z</published>
    <updated>2025-03-22T13:37:41.194Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="5a58af77f94bbdc16c0bcf3fff095c10633855da1c4addae167ec5fee97b1c37"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">引言</summary>
    
    
    
    <category term="计算机网络" scheme="https://yokumii.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="private" scheme="https://yokumii.github.io/blog/tags/private/"/>
    
    <category term="计算机网络" scheme="https://yokumii.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计组学习笔记(1)：计算机概述</title>
    <link href="https://yokumii.github.io/blog/2025/02/27/%E8%AE%A1%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%BF%B0/"/>
    <id>https://yokumii.github.io/blog/2025/02/27/%E8%AE%A1%E7%BB%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%BF%B0/</id>
    <published>2025-02-27T09:15:00.000Z</published>
    <updated>2025-03-22T13:38:00.958Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="8ac9aaf70dc572383cc7248b40658a8624ef0d53f873dce9a10a47c70ed9a45b">6df07e4654b2f23296fe416e73f530c96bf04cf67b3d4ddcef59c681cd714fa3d4a00212cb63781011cb4fee306dc53ae11f291cb152a4f68a19486e10fdd1bcc442298589d54f27cd533a80253f43be6e442b1062c3a31fb0964cf8b9be6a010bb750f6e1073b50a5e270597f7ad57670b825990500f067b504d6b82887ed4dcf09c34a19a6f2d70e1137ef6d8b72371f69cc4e78bbce96707df4b0c8178491715225ddcd9a66b97b1c192a0fb9f611c8c511e2ce91ea47c0d4fbf45a1fe1272f1806045069eb20d6650797544c9bdec1fa58ee851c553a90550dbbe439806fa387c7c118cd6703ebda0bc91cd16b139c8a8586819f6b093e2ef9a40d3500f2dbcd0316167a4775182a77ddb07e5f073c7a8a7466e11d188f47d1427faca4e886b2f344ca5a2b124e83bebc743e78710c9cdb996dac8c08e829edffd02bec525c70151887933b691779cf93293bdd663e036f9c7e6ff4462d9c4d04a1822840305725f80ac556290f89800662b44bc6e18ad1bc1c999b8a416e3821da2166357150b20140bff4f27b69f6a39ca1a32784dab8254ea2432582b007b42cfc6d80ba58c235c5d146682446f15fa66565650ed393bd40ce6753c553017953fdd3ed1ed581c94e0fb11da94fd4a470bd8788fe3a975c6fa1d8be7f6dcf73fc4869ad96c25233d94a5ef9c5ed27ef6f00ad981e88e911202b7ade3efea52a341300e78035f4e8d918d48982fe521447dbc119568070308e57845c72e0c846a235f5e7c688019493f508c586781e262c8d9890fa5bc8d6bc48d062adbfed278db98590b367f7aaa6a6c317313b0b32374c6c50cafb677b014eff65c240513de4aa3743506c4670de44ade5881a23835ec6f8826aa8088b8bc4e72e175cd7ec01eaf2e3db56d418dd57e9eb2fb8199212e0edbc290f3d3d7274add007ce14d2c8e502082d18645779d779f746c59b20e01b1208deac820e812dbe7e1c862f1baa4ff43a9b5a53bc81cb11915054347aa5547d6e39abc32cd57c56ee791b632721eedde9ef749b92673284d798d925174c4edfdaf96f33d12c7310d3fef91a70f80aadad01884f28a8b9f1ed0041853bca0aa353d66e39eb7ed359244a3e37312cdcfdcb028a621c28f8af5e41e07652a049ffa38cc2e0501f9315a629270f86d57bb695f168b3f92aaaa9110d8e418933400af7a1a8baa2dcf62f007e57e21c05297ed92698b55dbf833481d389b3bccacc5c1c6234d791641abf7573de6a94df75cbfc794d031acd0153a43d954049f1df1c713ff6c43569792a291fde4f3d94b0cf4d10174e639a146f7e9de9c14a9f9dda8934c8697daae2864bab6e9c4d729b60d23709f6d0089be67bc1e64b9ee00971bf77f92e0ba85f09b3a9113e9df386a67a5780894e2d6444c2297fdc57aea740fbda63b4a05a4df90edb00fa1e74a3d080fb84cee8411d4ba67fbd5b387e43843f8ea8876be15e08d987e26e7fe0173e187e2935c0f2f84cacb9758c70d4931a4764319e4965c32fbae55d00247a81f8febb43db575da3802b3e8dc8ce8fa360d82c045c71173e9c3f7d54ef489dce91e9d6dbc31a6c5cda9f2b4c11bc44e8ac349fd55ec0f1e1756bc0834f8725fef84fc7822f5d02276913823a357c2cbde6305a7f11ddaced98515e21cdef6d190a30840ee72047bd7edb9ca834c4a8b586f4ac6283c01986a828db9e9de6d62744233eee64eac3ba521b23d65428c21f235ae65e16c061ec8ccde0c8806772dedc1b8ff2ec7844c18350e83300e420a41b755fc3be31cb82569057acdfaee98906db3d2c1c6de98d48703e8767461098bf69829223bb7d6cef74e2fa7838164b0c7785d0b56f120401b760a3a8f3dcb5d56b4f3590bf2b3eb87361e35ae43abf2b6b9bb4b0e1a86a50eb8047e47d85032d155d8cb62844c7af6dafce50c803e450504e249b457c20fb2ad51bc0f0fcfe75baf95407ee1a220553857226c2b0bda92a2dc7e7ec8ff242774f4c7a107331ec59cc820b92a0cf5c92b2f8111a2f2d37d5396686d6ff00ca5553ae14bc7edcdfeed072c8fafccb063a3464d4e4c0288adf0639bd9f6c8a100af4042d7ce5a821c7c2a06a5c4c03a5f27cfa00027e222e5b687e490cd7e3a6e6e78365f991096b483e11fccec4cb756d491d00ae375cb67de3497b37a67b77040190890516c9327255807a51fd23c090cfd0f8a46cea7513a84b4421581b7840699dd19c48a23f9cf443e84398dc1daa76565cb0b5679c21b2db59853f30597eeeeba91e846249ac2aba4f29df0a87f724db4c8c5fe12f9cbef4e134524cd88604047cd67e7b9d20b392576e205bfa02d5252aa65957e9808a4e863f17fb8ab2f3b1dc50da193c60570ca2c9bb534628c84f2812da17aaab62613c22ad2b26945f4dc58930dbd1c754fc8ac5a52ebb997196149246a39b78aa46d770f54a6a67d0cd3d7e5846e84b131fa0289a9d3623b890c4817d5e6b28c5f0e31022f6283d949d7eabff4e302c3aad1a23b433f9177b2688d4afe9610721a9e4a7e9125dd6c9f0aff4ca464ea1499da025233cca92ca5da68fc6fdfa3a08b33a16aee46959826fd3d3587c7d8dab01a21c7d93ba517104053e09cad351222a257fae6c9217bf2d6f8555e169765862a650c3460d5f6c65b17c28bcd63d392280b5b6e3693e07a4c2444982a06459d2564aa784b138b999d05a2875fb43e3e236bd13bf14e315469af01d4aa0284a3e7c0bf92609af22eb655b7b59e453d45aee401927fbfb2f0d1c28c80c4c778d1061edcb8f57a5472396ecee249d2d1ea76f9aadb3192edc7c7d8aded59b3f4299381276abaaa54c35886912cc722f38f8577e571b1bb317550bf9b4b3e84c56ed5b55257e4a150eb47ce0bd3b7af3872491542847e2c06c05eee6c98b6647e755d08c04be50561540b3cfbba971d6a5a2bee52fda74efc51d649af14b434ce16dd55de2effde2c242488a34a07fb9e11ba5a9eac5590ea0698fa1d16bc1b220c5e7ea68451532a360e65d1c76c5fe29a9852d71adff251515e7fe9b1f5cfb94a402668f250cbdc23c18e5e6735dfa61639a93b89233fc89b6090b1735abb22ca00da005c4dd169909f76ee4cff48d22546263f28938b6c10a73076933044bda3309179e3869d9c519170ecfd7c0fdd86772b3d2d95ac1763925b597c4238b7c9069515ebbe69d197f4a0065c7144a15b2c92c88c8958cb1b3d482dc07f8fb5cbeb831c0d7e424b155de9fa25fcabdaed47fa7f71bec898667693de53d709776580614bd136c9d5ec32a47484a15ce729448d8165cdf549cdc45e738c317ef</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">计算机概述</summary>
    
    
    
    <category term="计算机组成原理" scheme="https://yokumii.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="private" scheme="https://yokumii.github.io/blog/tags/private/"/>
    
    <category term="计算机组成原理" scheme="https://yokumii.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>RAG（Retrieval-augmented generation）个人学习笔记</title>
    <link href="https://yokumii.github.io/blog/2025/02/22/RAG%EF%BC%88Retrieval-augmented%20generation%EF%BC%89%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://yokumii.github.io/blog/2025/02/22/RAG%EF%BC%88Retrieval-augmented%20generation%EF%BC%89%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2025-02-22T08:54:00.000Z</published>
    <updated>2025-02-27T12:40:42.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么需要rag">为什么需要RAG？</h1><p>传统的LLM模型主要存在以下2个问题：幻觉以及外部知识/最新知识的缺失，RAG可以通过结合基于检索和生成模型的优势来提供更准确和上下文相关的响应，可以添加自己的预料构建知识库。</p><h1 id="rag-vs.-fine-tuning-a-llm-model">RAG vs. fine-tuning a LLMmodel</h1><p>下图源自<a href="https://github.com/Tongji-KGLLM/RAG-Survey/">RAG-Survey</a><br><img src="RAG_FT_Table.jpg"><br>结合个人理解：<br>1.RAG更适合知识库需要动态更新的情景，这部分数据不作为用于LLM的训练数据，而是通过LLM的能力进行检索。<br>2. RAG由于采用检索的形式，数据来源是可知的，而LLM是黑箱。<br>3. RAG 可以对生成过程提供更多控制。</p><h1 id="query-classification-查询分类">Query Classification查询分类</h1><p>并非所有查询都需要用到检索增强，需要将查询分类为需要使用RAG和直接用LLM生成两类。</p><blockquote><p>持续更新中...</p></blockquote>]]></content>
    
    
    <summary type="html">个人关于RAG的学习记录</summary>
    
    
    
    <category term="人工智能" scheme="https://yokumii.github.io/blog/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="RAG" scheme="https://yokumii.github.io/blog/tags/RAG/"/>
    
    <category term="LLM" scheme="https://yokumii.github.io/blog/tags/LLM/"/>
    
    <category term="人工智能" scheme="https://yokumii.github.io/blog/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>NSFC爬虫练习</title>
    <link href="https://yokumii.github.io/blog/2025/01/22/NSFC%E7%88%AC%E8%99%AB%E7%BB%83%E4%B9%A0/"/>
    <id>https://yokumii.github.io/blog/2025/01/22/NSFC%E7%88%AC%E8%99%AB%E7%BB%83%E4%B9%A0/</id>
    <published>2025-01-22T12:47:00.000Z</published>
    <updated>2025-01-23T04:03:41.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求">需求</h1><p>从国家自然科学基金大数据知识管理服务门户爬取论文数据。</p><h1 id="搜索api">搜索API</h1><ol type="1"><li>打开浏览器的<strong>开发者工具</strong>（如 Chrome 的 F12）；</li><li>在网络（Network）选项卡中，监控搜索的请求；</li><li>找到接口()[<a href="https://kd.nsfc.cn/api/baseQuery/completionQueryResultsData" class="uri">https://kd.nsfc.cn/api/baseQuery/completionQueryResultsData</a>]；</li><li>其请求体如下：</li></ol><pre class="json"><code>&#123;&quot;code&quot;:&quot;A01&quot;,&quot;fuzzyKeyword&quot;:&quot;&quot;,&quot;complete&quot;:true,&quot;isFuzzySearch&quot;:false,&quot;conclusionYear&quot;:&quot;2020&quot;,&quot;dependUnit&quot;:&quot;&quot;,&quot;keywords&quot;:&quot;&quot;,&quot;pageNum&quot;:0,&quot;pageSize&quot;:10,&quot;personInCharge&quot;:&quot;&quot;,&quot;projectName&quot;:&quot;&quot;,&quot;projectType&quot;:&quot;218&quot;,&quot;subPType&quot;:&quot;&quot;,&quot;psPType&quot;:&quot;&quot;,&quot;ratifyNo&quot;:&quot;&quot;,&quot;ratifyYear&quot;:&quot;&quot;,&quot;order&quot;:&quot;enddate&quot;,&quot;ordering&quot;:&quot;desc&quot;,&quot;codeScreening&quot;:&quot;&quot;,&quot;dependUnitScreening&quot;:&quot;&quot;,&quot;keywordsScreening&quot;:&quot;&quot;,&quot;projectTypeNameScreening&quot;:&quot;&quot;&#125;</code></pre><p>需要用到的字段只有：</p><pre class="json"><code>code // 申请代码conclusionYear // 结题年度projectType // 资助类别</code></pre><ol start="5" type="1"><li>观察其返回内容：<img src="1.png">为一串无规律的长字符串，初步判断是经过了某种加密；</li></ol><h1 id="解密">解密</h1><p>页面的HTML文件：</p><pre class="html"><code>&lt;body&gt;        &lt;noscript&gt;            &lt;strong&gt;We&#39;re sorry but 国家自然科学基金大数据知识管理服务门户 doesn&#39;t work properly without JavaScript enabled. Please enable it to continue.&lt;/strong&gt;        &lt;/noscript&gt;        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;        &lt;script src=&quot;/js/chunk-vendors.559d99e0.js&quot;&gt;&lt;/script&gt;        &lt;script src=&quot;/js/app.17b88e26.js&quot;&gt;&lt;/script&gt;    &lt;/body&gt;</code></pre><p>在网页的 JavaScript文件中，尝试寻找相关的解密代码，最终在app.17b88e26.js中找到以下内容（注释为后期补充）：</p><pre class="javascript"><code>function g(e) &#123;    // 定义密钥    var t = p.a.enc.Utf8.parse(&quot;IFROMC86&quot;);        // 使用 DES 解密方法    var n = p.a.DES.decrypt(        &#123;            ciphertext: p.a.enc.Base64.parse(e) // 解析 Base64 编码的密文        &#125;,        t, // 解密密钥        &#123;            mode: p.a.mode.ECB, // 使用 ECB 模式            padding: p.a.pad.Pkcs7 // 使用 PKCS7 填充方式        &#125;    );    // 将解密后的内容解析为 UTF-8 字符串并转为 JSON    return JSON.parse(n.toString(p.a.enc.Utf8));&#125;</code></pre><p>使用 Python 的 pycryptodome 库来实现解密：</p><pre class="bash"><code>pip install pycryptodome</code></pre><pre class="python"><code>from Crypto.Cipher import DESfrom Crypto.Util.Padding import unpadimport base64import jsondef decrypt_des_ecb(ciphertext):    # 密钥    key = b&quot;IFROMC86&quot;    # Base64 解码    encrypted_data = base64.b64decode(ciphertext)        # 初始化 DES 解密器    cipher = DES.new(key, DES.MODE_ECB)        # 解密数据并移除填充    decrypted_data = unpad(cipher.decrypt(encrypted_data), DES.block_size)        # 解密后的字符串转为 JSON 格式    return json.loads(decrypted_data.decode(&#39;utf-8&#39;))</code></pre><p>对网页发送请求，成功得到解密后的JSON文件：<br><img src="2.png"></p>]]></content>
    
    
    <summary type="html">一个项目需要的爬虫记录</summary>
    
    
    
    <category term="Python" scheme="https://yokumii.github.io/blog/categories/Python/"/>
    
    
    <category term="Python" scheme="https://yokumii.github.io/blog/tags/Python/"/>
    
    <category term="爬虫" scheme="https://yokumii.github.io/blog/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>矩阵论：矩阵的LU分解</title>
    <link href="https://yokumii.github.io/blog/2025/01/15/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E7%9F%A9%E9%98%B5%E7%9A%84LU%E5%88%86%E8%A7%A3/"/>
    <id>https://yokumii.github.io/blog/2025/01/15/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E7%9F%A9%E9%98%B5%E7%9A%84LU%E5%88%86%E8%A7%A3/</id>
    <published>2025-01-15T12:16:00.000Z</published>
    <updated>2025-03-21T12:29:11.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="矩阵的lu分解">矩阵的LU分解</h1><h2 id="gauss消元法">Gauss消元法</h2><p>在介绍LU分解之前，我们先通过Gauss消元法引入。</p><p>对于求解以下线性方程组的问题：</p><p><span class="math display">\[\left\{\begin{matrix}    a_{11}x_{11} + a_{12}x_{12} + \cdots + a_{1n}x_{1n} = b_1\\    \vdots \\    a_{n1}x_{n1} + a_{n2}x_{n2} + \cdots + a_{nn}x_{nn} = b_n \\\end{matrix}\right.\]</span></p><p>其矩阵形式为：</p><p><span class="math display">\[\begin{bmatrix}    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} &amp; b_1\\    \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \vdots\\    a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} &amp; b_n\end{bmatrix} \triangleq (A \vdots  b)\]</span></p><p><strong>Guass消元法</strong>的基本思想是将矩阵$$通过初等行变换转化为阶梯型矩阵，我们假定该过程中不涉及“对换变换”，变换过程如下：</p><p>记</p><p><span class="math display">\[A^{(1)} = A = \begin{bmatrix}    a_{11}^{(1)} &amp; a_{12}^{(1)} &amp; \cdots &amp; a_{1n}^{(1)}\\    \vdots &amp; \vdots &amp; \vdots &amp; \vdots\\    a_{n1}^{(1)} &amp; a_{n2}^{(1)} &amp; \cdots &amp; a_{nn}^{(1)}\end{bmatrix}\]</span></p><p>若<span class="math inline">\(a_{11}^{(1)} \ne 0\)</span>，则：</p><p><span class="math display">\[A^{(1)} \xrightarrow{r_i - \frac{a_{21}^{(1)}}{a_{11}^{(1)}}r_1,i =2,3,\cdots,n}\begin{bmatrix}    a_{11}^{(1)} &amp; a_{12}^{(1)} &amp; \cdots &amp; a_{1n}^{(1)}\\    0 &amp; a_{22}^{(2)} &amp; \cdots &amp; a_{2n}^{(2)}\\    \vdots &amp; \vdots &amp; \vdots &amp; \vdots\\    0 &amp; a_{n2}^{(2)} &amp; \cdots &amp; a_{nn}^{(2)}\end{bmatrix} \triangleq A^{(2)}\]</span></p><p>若<span class="math inline">\(a_{22}^{(2)} \ne 0\)</span>，则：</p><p><span class="math display">\[A^{(2)} \xrightarrow{r_i - \frac{a_{32}^{(2)}}{a_{22}^{(2)}}r_1,i =3,4,\cdots,n}\begin{bmatrix}    a_{11}^{(1)} &amp; a_{12}^{(1)} &amp; a_{13}^{(1)}&amp; \cdots &amp;a_{1n}^{(1)}\\    &amp; a_{22}^{(2)} &amp; a_{23}^{(2)}&amp; \cdots &amp;a_{2n}^{(2)}\\    &amp; &amp; a_{33}^{(3)} &amp; \cdots &amp; a_{3n}^{(3)}\\    &amp; &amp; \vdots &amp; &amp; \vdots\\    &amp; &amp; a_{n3}^{(3)} &amp; \cdots &amp; a_{nn}^{(3)}\end{bmatrix} \triangleq A^{(3)}\]</span></p><p>如此继续，如果能进行<span class="math inline">\(n-1\)</span>步，那么可以将矩阵$$化为上三角矩阵：</p><p><span class="math display">\[\begin{bmatrix}    a_{11}^{(1)} &amp; a_{12}^{(1)} &amp; \cdots &amp; a_{1n}^{(1)}\\    &amp; a_{22}^{(2)} &amp; \cdots &amp; a_{2n}^{(2)}\\    &amp; &amp;  \ddots &amp; \vdots\\    &amp; &amp; &amp; a_{nn}^{(n)}\end{bmatrix} \triangleq A^{(n)}\]</span></p><p>上述过程就是Guass消元法的矩阵描述。</p><p>在上述过程进行的过程中，易得，如果Guass消元法能进行到底：</p><p><span class="math display">\[    \Leftrightarrow a_{11}^{(1)}a_{22}^{(2)}\cdots a_{n-1n-1}^{(n-1)}\ne 0\]</span></p><p>那么问题是，如何判断$ <span class="math inline">\(的前\)</span>n-1<span class="math inline">\(个主元\)</span>$？</p><p>回溯上述过程可知：</p><p><span class="math display">\[\begin{aligned}&amp; a_{11}^{(1)} = a_{11}\\&amp; a_{11}^{(1)}a_{22}^{(2)} =\begin{bmatrix}    a_{11}^{(1)} &amp; a_{12}^{(1)}\\    0 &amp; a_{22}^{(22)}\end{bmatrix} =\begin{bmatrix}    a_{11} &amp; a_{12}\\    a_{21} &amp; a_{22}\end{bmatrix}\\&amp; \cdots \\&amp; a_{11}^{(1)}a_{22}^{(2)}\cdots a_{kk}^{(k)} =\begin{bmatrix}    a_{11}^{(1)} &amp; a_{12}^{(1)} &amp; \cdots &amp; a_{1k}^{(1)}\\    &amp; a_{22}^{(2)} &amp; \cdots &amp; a_{2k}^{(2)}\\    &amp; &amp;  \ddots &amp; \vdots\\    &amp; &amp; &amp; a_{kk}^{(k)}\end{bmatrix} =\begin{bmatrix}    a_{11} &amp; \cdots &amp; a_{1k}\\    \vdots &amp; &amp; \vdots\\    a_{k1} &amp; \cdots &amp; a_{kk}\end{bmatrix}\end{aligned}\]</span></p><p>记：</p><p><span class="math display">\[\begin{aligned}    &amp; \Delta_1 = a_{11} \\    &amp; \Delta_2 = \begin{bmatrix}        a_{11} &amp; a_{12}\\        a_{21} &amp; a_{22}    \end{bmatrix} \\    &amp; \cdots \\    &amp; \Delta_{n-1} = \begin{bmatrix}        a_{11} &amp; \cdots &amp; a_{1n-1}\\        \vdots &amp; &amp; \vdots\\        a_{n-11} &amp; \cdots &amp; a_{n-1n-1}    \end{bmatrix}\end{aligned}\]</span></p><p>可以发现，<span class="math inline">\(\Delta_k\)</span>即为$ <span class="math inline">\(的\)</span>k$阶<strong>顺序主子式</strong>。</p><p>所以，得到如下命题：</p><p><strong>命题 1</strong><br>当<span class="math inline">\(\Delta_k \ne 0,k =1,2,\cdots,n-1\Leftrightarrow a_{kk}^{(k)} \ne 0\)</span></p><p>于是，自然得到：</p><p><strong>定理 1</strong><br>Guass消元法能进行到底 <span class="math inline">\(\Leftrightarrow\)</span> <span class="math inline">\(\boldsymbol{A}\)</span>的前<span class="math inline">\(n-1\)</span>个顺序主子式<span class="math inline">\(\ne 0\)</span>；</p><h2 id="矩阵lu分解的步骤推导">矩阵LU分解的步骤推导</h2><p>从高斯消元法的过程，每一步初等行变换的过程相当于一个<strong>高斯变换</strong>，即左乘一个矩阵：</p><p><span class="math display">\[L_1 = \begin{bmatrix}    1 &amp; &amp; &amp; \\    l_1 &amp; 1 &amp; &amp;\\    l_2 &amp;  &amp; 1 &amp; &amp; \\    \vdots &amp;  &amp;  &amp; \ddots &amp; \\    l_n &amp; &amp; &amp; &amp; 1\end{bmatrix}\]</span></p><p>其中，<span class="math inline">\(l_i =-\frac{a_{i1}^{(1)}}{a_{11}^{(1)}},i = 2,3,\cdots,n\)</span>。</p><p>易得，高斯消元法的过程可以表示为：</p><p><span class="math display">\[L_{n-1}L_{n-2}\cdots L_{1}A = U\]</span></p><p>其中，<span class="math inline">\(\boldsymbol{L}_i\)</span>为下三角矩阵，<span class="math inline">\(\boldsymbol{U}\)</span>为上三角矩阵。</p><p>令 <span class="math inline">\(\boldsymbol{L} = L_1^{-1}\cdotsL_{n-2}^{-1}L_{n-1}^{-1}\)</span>，则有：</p><p><span class="math display">\[\boldsymbol{A} =  \boldsymbol{L} \boldsymbol{U}\]</span></p><p>这就是矩阵的<strong>LU分解</strong>。</p><p>求得 <span class="math inline">\(\boldsymbol{L}\)</span> 和 <span class="math inline">\(\boldsymbol{U}\)</span> 后，如何计算 <span class="math inline">\(x\)</span>？</p><p><span class="math display">\[Ax = LUx = b\]</span></p><p>取中间变量 <span class="math inline">\(y = Ux\)</span>，则 <span class="math inline">\(Ly = b\)</span>。</p><p>那么，为什么LU分解能加速线性方程组的求解呢？</p><p>实际上，虽然从矩阵形式上看，<span class="math inline">\(\boldsymbol{L}\)</span> 需要计算 <span class="math inline">\(n-1\)</span> 个 <span class="math inline">\(L_i\)</span>的逆，但是实际算法求解过程中，三角型的矩阵的乘法和逆是容易计算的，并且甚至不需要额外的空间存储开销：算法会将 <span class="math inline">\(\boldsymbol{L}\)</span> 和 <span class="math inline">\(\boldsymbol{U}\)</span> 的元素直接存储到原矩阵<span class="math inline">\(\boldsymbol{A}\)</span> 的相应位置上：</p><ul><li><span class="math inline">\(\boldsymbol{L}\)</span>的下三角部分（不包括对角线）会存储在 <span class="math inline">\(\boldsymbol{A}\)</span> 的下三角部分。</li><li><span class="math inline">\(\boldsymbol{U}\)</span>的上三角部分和对角线会存储在 <span class="math inline">\(\boldsymbol{A}\)</span>的上三角部分和对角线上。</li></ul><p>例如，对于矩阵</p><p><span class="math display">\[\boldsymbol{A} =\begin{bmatrix}    a_{11} &amp; a_{12} &amp; a_{13} \\    a_{21} &amp; a_{22} &amp; a_{23} \\    a_{31} &amp; a_{32} &amp; a_{33}\end{bmatrix}\]</span></p><p>经过 LU 分解后，它的存储会变为：</p><p><span class="math display">\[\boldsymbol{A} =\begin{bmatrix}    u_{11} &amp; u_{12} &amp; u_{13} \\    l_{21} &amp; u_{22} &amp; u_{23} \\    l_{31} &amp; l_{32} &amp; u_{33}\end{bmatrix}\]</span></p><p>其中：</p><ul><li><span class="math inline">\(l_{ij}\)</span> 为第 <span class="math inline">\(i\)</span> 行，第 <span class="math inline">\(j\)</span> 列的乘子；</li><li><span class="math inline">\(u_{ij}\)</span> 为第 <span class="math inline">\(i\)</span> 行，第 <span class="math inline">\(j\)</span> 列的上三角元素；</li></ul><p>通过这种方式，所有分解信息都存储在原矩阵中，无需额外空间。LU分解既降低了时间复杂度又降低了空间复杂度。</p><p>不过，从我们进行高斯消元法的过程就可以发现，要保证高斯消元法能进行到底，需要避免乘子中的除数（<span class="math inline">\(A_{kk}\)</span>）出现0（实际应用中，很小的情况也应该避免），所以一般不直接应用LU分解，而是应用<strong>列主元PLU分解</strong>，它通过交换行来避免出现相对很小的主元，实现稳定的LU分解，其伪代码如算法 <span class="math inline">\(\ref{列选主元PLU分解法}\)</span> 所示。</p><h3 id="算法列选主元plu分解法">算法：列选主元PLU分解法</h3><p><strong>输入：</strong> 矩阵 <span class="math inline">\(A \in\mathbb{R}^{n \times n}\)</span><br><strong>输出：</strong> 矩阵 <span class="math inline">\(P, L,U\)</span>，使得 <span class="math inline">\(P A = L U\)</span></p><pre class="algorithm"><code>初始化：U = A, L = I, P = Ifor k = 1 to n-1 do:    1. 寻找主元：       pivot = max_&#123;i=k, ..., n&#125; |U[i, k]|       记录主元行号 row           2. 若 row ≠ k:       构造置换矩阵 P_k，交换 U 的第 k 行与第 row 行：       P_k = 交换 k 行与 row 行的单位矩阵              更新 U: U = P_k U       更新 P: P = P_k P              若 k &gt; 1，则更新 L: L = P_k L        3. 对于 i = k+1 到 n:       计算消元因子：       L[i, k] = U[i, k] / U[k, k]              更新 U：       U[i, :] = U[i, :] - L[i, k] * U[k, :]       返回 P, L, U</code></pre><p><span class="math display">\[\boldsymbol{A} = \boldsymbol{L} \boldsymbol{U}\]</span></p><p>其中，若矩阵 <span class="math inline">\(\boldsymbol{A}\)</span>满秩，即 <span class="math inline">\(\operatorname{rank} A =r\)</span>，则可利用 LU 分解或 PLU 分解构造其满秩分解：</p><p>• <strong>LU 分解构造满秩分解</strong></p><p>若 <span class="math inline">\(\boldsymbol{A}\)</span> 可分解为 <span class="math inline">\(\boldsymbol{A} = \boldsymbol{L}\boldsymbol{U}\)</span>，则从 <span class="math inline">\(\boldsymbol{L}\)</span> 提取前 <span class="math inline">\(r\)</span> 列，从 <span class="math inline">\(\boldsymbol{U}\)</span> 提取前 <span class="math inline">\(r\)</span> 行：<br><span class="math display">\[\boldsymbol{F} = \boldsymbol{L}[:, 0:r],\quad \boldsymbol{G} =\boldsymbol{U}[0:r, :]\]</span></p><p>其中，<span class="math inline">\(\boldsymbol{F}\)</span>为列满秩矩阵（<span class="math inline">\(m \times r\)</span>），<span class="math inline">\(\boldsymbol{G}\)</span> 为行满秩矩阵（<span class="math inline">\(r \timesn\)</span>），从而得到矩阵的满秩分解。</p><p>• <strong>PLU 分解构造满秩分解</strong></p><p>设 <span class="math inline">\(\boldsymbol{A}\)</span> 通过列主元 LU分解得：</p><p><span class="math display">\[\boldsymbol{A} = \boldsymbol{P} \boldsymbol{L} \boldsymbol{U}\]</span></p><p>同样取：<br><span class="math display">\[\boldsymbol{B} = \boldsymbol{L}[:, 0:r],\quad \boldsymbol{C} =\boldsymbol{U}[0:r, :]\]</span></p><p>代入分解式可得：<br><span class="math display">\[\boldsymbol{A} = \boldsymbol{P} \boldsymbol{B} \boldsymbol{C}\]</span></p><p>其中，<span class="math inline">\(\boldsymbol{P}\)</span>为置换矩阵，显然满秩。</p><p>进一步推广，若方阵 <span class="math inline">\(\boldsymbol{A}\)</span> 可分解为：<br><span class="math display">\[\boldsymbol{A} = \boldsymbol{L} \boldsymbol{D} \boldsymbol{U}\]</span></p><p>其中，<span class="math inline">\(\boldsymbol{D}\)</span>为对角矩阵，则称其为 <strong>LDU 分解</strong>。</p><p>由高斯消元法的推导，可得如下定理及推论：</p><p><strong>定理</strong>：矩阵 <span class="math inline">\(\boldsymbol{A} = (a_{i j})_{n \times n}\)</span>存在唯一分解：<br><span class="math display">\[\boldsymbol{A} = \boldsymbol{L} \boldsymbol{D} \boldsymbol{U}\]</span></p><p>其中：</p><p>• <span class="math inline">\(\boldsymbol{L}\)</span>为单位下三角矩阵，</p><p>• <span class="math inline">\(\boldsymbol{U}\)</span>为单位上三角矩阵，</p><p>• <span class="math inline">\(\boldsymbol{D}\)</span>为对角矩阵，其对角元：<span class="math inline">\(d_{k} =\frac{\Delta_{k}}{\Delta_{k-1}}, \quad k=1,2,\dots,n \quad (\Delta_0 =1)\)</span></p><p>其中 <span class="math inline">\(\Delta_k\)</span> 为 <span class="math inline">\(\boldsymbol{A}\)</span> 的顺序主子式。</p><p><strong>推论</strong>：若 <span class="math inline">\(\boldsymbol{A}\)</span>为非奇异矩阵，则其可进行三角分解：<br><span class="math display">\[\boldsymbol{A} = \boldsymbol{L} \boldsymbol{U}\]</span></p><p>当且仅当 <span class="math inline">\(\boldsymbol{A}\)</span>的顺序主子式：<span class="math inline">\(\Delta_k \neq 0, \quadk=1,2,\dots,n\)</span></p><p><strong>进一步推广</strong>：对 <strong>Doolittle、Crout、Cholesky分解</strong>，定义如下：</p><p>• <strong>Doolittle 分解</strong>：设 <span class="math inline">\(\boldsymbol{A}\)</span> 具有唯一 LDU分解，令：<br><span class="math display">\[\hat{\boldsymbol{U}} = \boldsymbol{D} \boldsymbol{U}\]</span></p><p>则有：<br><span class="math display">\[\boldsymbol{A} = \boldsymbol{L} \hat{\boldsymbol{U}}\]</span></p><p>• <strong>Crout 分解</strong>：令：<br><span class="math display">\[\hat{\boldsymbol{L}} = \boldsymbol{L} \boldsymbol{D}\]</span></p><p>则有：<br><span class="math display">\[\boldsymbol{A} = \hat{\boldsymbol{L}} \boldsymbol{U}\]</span></p><p>• <strong>Cholesky 分解</strong>（平方根分解）：设 <span class="math inline">\(\boldsymbol{A}\)</span>为实对称正定矩阵，则其可分解为：<br><span class="math display">\[\boldsymbol{A} = \boldsymbol{L} \widetilde{\boldsymbol{D}}^2\boldsymbol{U}\]</span></p><p>其中：<br><span class="math display">\[\widetilde{\boldsymbol{D}} =\operatorname{diag}(\sqrt{d_1},\sqrt{d_2},\dots,\sqrt{d_n})\]</span></p><p>进一步，可得：<br><span class="math display">\[\boldsymbol{A} = \boldsymbol{L} \widetilde{\boldsymbol{D}}^2\boldsymbol{L}^\top\]</span></p><p>令：<br><span class="math display">\[\boldsymbol{G} = \boldsymbol{L} \widetilde{\boldsymbol{D}}\]</span></p><p>则有：<br><span class="math display">\[\boldsymbol{A} = \boldsymbol{G} \boldsymbol{G}^\top\]</span></p><p>这被称为 <strong>Cholesky 分解</strong>（对称三角分解）。</p>]]></content>
    
    
    <summary type="html">《矩阵理论与方法》课程学习笔记</summary>
    
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/categories/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/tags/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>矩阵论：矩阵函数和矩阵求导</title>
    <link href="https://yokumii.github.io/blog/2025/01/15/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E7%9F%A9%E9%98%B5%E5%87%BD%E6%95%B0%E5%92%8C%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC/"/>
    <id>https://yokumii.github.io/blog/2025/01/15/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E7%9F%A9%E9%98%B5%E5%87%BD%E6%95%B0%E5%92%8C%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC/</id>
    <published>2025-01-15T08:50:00.000Z</published>
    <updated>2025-03-21T08:53:15.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="矩阵函数介绍">矩阵函数介绍</h2><p>矩阵函数与通常的函数类似，但是因变量和自变量都为 <span class="math inline">\(n\)</span> 阶矩阵。定义如下：</p><h3 id="定义">定义</h3><p>设一元函数 <span class="math inline">\(f(z)\)</span> 能展开为 <span class="math inline">\(z\)</span> 的幂级数：<br><span class="math display">\[f(z) = \sum_{k = 0}^{\infty} c_k z^k, \quad (|z| &lt; r)\]</span><br>其中 <span class="math inline">\(r &gt; 0\)</span>表示该幂级数的收敛半径。当 <span class="math inline">\(n\)</span> 阶矩阵<span class="math inline">\(A\)</span> 的谱半径 <span class="math inline">\(\rho (A) &lt; r\)</span> 时，把收敛矩阵幂级数<span class="math inline">\(\sum_{k = 0}^{\infty} c_k A^k\)</span>的和称为 <strong>矩阵函数</strong>，记为 <span class="math inline">\(f(A)\)</span>，即：<br><span class="math display">\[f(A) = \sum_{k = 0}^{\infty} c_k A^k\]</span></p><p>通过以上定义和一些基本函数，可以导出 <strong>矩阵指数函数</strong> 和<strong>矩阵三角函数</strong>，并推得一系列等式。</p><hr><h2 id="函数矩阵对矩阵的导数">函数矩阵对矩阵的导数</h2><p>我们已经在上一节中引入了矩阵函数的概念，类似地，也有微分和导数的定义。相较于标量导数，对矩阵函数的求导和微分较为复杂。在具体应用中，如梯度下降等算法，这部分内容具有重要意义，因此需要深入理解。</p><p>首先，我们将标量求导拓展到向量，对于 <span class="math inline">\(\frac{\partial y}{\partialx}\)</span>，存在以下几种情况：</p><ol type="1"><li><span class="math inline">\(y\)</span> 是标量：<ul><li><span class="math inline">\(x\)</span> 是标量</li><li><span class="math inline">\(\boldsymbol{x}\)</span>是向量（默认为列向量，即 <span class="math inline">\(\boldsymbol{x} =(x_1, x_2, x_3)^\top\)</span>）</li><li><span class="math inline">\(\boldsymbol{X}\)</span> 是矩阵</li></ul></li><li><span class="math inline">\(\boldsymbol{y}\)</span> 是向量，例如<span class="math inline">\(f_{3\times 1}(x) = (f_1, f_2,f_3)^\top\)</span>：<ul><li>标量变元</li><li>向量变元</li><li>矩阵变元</li></ul></li><li><span class="math inline">\(\boldsymbol{Y}\)</span>是矩阵，同样有三种变元。</li></ol><p>简单理解：<br>- <strong>分子布局</strong>：分子是列向量形式，分母是行向量形式<br>- <strong>分母布局</strong>：分子是行向量形式，分母是列向量形式</p><h3 id="向量化操作">向量化操作</h3><p>在具体分析之前，先介绍矩阵的<strong>向量化操作</strong>。例如，对矩阵 <span class="math inline">\(\boldsymbol{X} \in \mathbb{R}^{m \timesn}\)</span> 进行列优先展开：<br><span class="math display">\[\text{vec}(\boldsymbol{X}) =\begin{bmatrix}x_{11} &amp; x_{21} &amp; \dots &amp; x_{m1} &amp; \dots &amp; x_{1n}&amp; x_{2n} &amp; \dots &amp; x_{mn}\end{bmatrix}^\top\]</span></p><h3 id="向量变元的实值标量函数">向量变元的实值标量函数</h3><ol type="1"><li><strong>行向量偏导（分子布局）</strong><br><span class="math display">\[\boldsymbol{D}_{\boldsymbol{x}} f = \frac{\partial f}{\partial\boldsymbol{x}^\top} =\begin{bmatrix}\frac{\partial f}{\partial x_1} &amp; \frac{\partial f}{\partial x_2}&amp; \dots &amp; \frac{\partial f}{\partial x_n}\end{bmatrix}\]</span></li><li><strong>梯度向量偏导（分母布局）</strong><br><span class="math display">\[\nabla_{\boldsymbol{x}} f = \frac{\partial f}{\partial \boldsymbol{x}} =\begin{bmatrix}\frac{\partial f}{\partial x_1} \\\frac{\partial f}{\partial x_2} \\\vdots \\\frac{\partial f}{\partial x_n}\end{bmatrix}\]</span></li></ol><h3 id="矩阵变元的实值标量函数">矩阵变元的实值标量函数</h3><p>从标量求导到矩阵求导，就是分子的 <strong>转置、向量化</strong>和分母的 <strong>转置、向量化</strong> 的各种组合。</p><p>对于 <strong>分子布局</strong>：<br>- 分子：标量、列向量、矩阵向量化后的列向量<br>-分母：标量、列向量转置后的行向量、矩阵的转置矩阵、矩阵向量化后的列向量转置后的行向量</p><p>对于 <strong>分母布局</strong>：<br>-分子：标量、列向量转置后的行向量、矩阵向量化后的列向量转置后的行向量<br>- 分母：标量、列向量、矩阵自身、矩阵向量化后的列向量</p><p>在机器学习领域，常见的主要有以下三种形式：</p><ol type="1"><li><strong>梯度</strong>：<br><span class="math display">\[\nabla_{\boldsymbol{x}} \overset{\mathrm{def}}{=}\left[\frac{\partial}{\partial x_{1}},\frac{\partial}{\partialx_{2}},\cdots,\frac{\partial}{\partialx_{n}}\right]^{T}=\frac{\partial}{\partial\boldsymbol{x}}\]</span></li><li><strong>Hesse矩阵</strong>：<br><span class="math display">\[H(f) =\begin{bmatrix}\frac{\partial^2f}{\partial x_1^2} &amp; \frac{\partial^2f}{\partialx_1\partial x_2} &amp; \cdots &amp; \frac{\partial^2f}{\partialx_1\partial x_n} \\\frac{\partial^2f}{\partial x_2\partial x_1} &amp;\frac{\partial^2f}{\partial x_2^2} &amp; \cdots &amp;\frac{\partial^2f}{\partial x_2\partial x_n} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\\frac{\partial^2f}{\partial x_n\partial x_1} &amp;\frac{\partial^2f}{\partial x_n\partial x_2} &amp; \cdots &amp;\frac{\partial^2f}{\partial x_n^2}\end{bmatrix}\]</span></li><li><strong>Jacobi矩阵</strong>：<br><span class="math display">\[\begin{bmatrix}\frac{\partial y_1}{\partial x_1} &amp; \cdots &amp; \frac{\partialy_1}{\partial x_n} \\\vdots &amp; \ddots &amp; \vdots \\\frac{\partial y_m}{\partial x_1} &amp; \cdots &amp; \frac{\partialy_m}{\partial x_n}\end{bmatrix}\]</span></li></ol><p>不难发现：<br>- 若 <span class="math inline">\(f(x)\)</span> 是一个标量函数，则<strong>Jacobi矩阵是一个向量</strong>，等于 <span class="math inline">\(f(x)\)</span>的梯度，Hesse矩阵是一个二维矩阵<br>- 若 <span class="math inline">\(f(x)\)</span> 是一个向量值函数，则<strong>Jacobi矩阵是一个二维矩阵</strong>，Hesse矩阵是一个三维矩阵<br>- <strong>梯度是 Jacobi 矩阵的特例</strong>，梯度的 Jacobi 矩阵就是Hesse 矩阵，这其实就是 <strong>一阶偏导与二阶偏导的关系</strong></p><hr><h2 id="自动求导与链式法则">自动求导与链式法则</h2><p>在实际应用问题中，标量求导中的 <strong>链式法则</strong>也可以拓展到向量乃至矩阵。在使用程序计算时，库函数一般采用<strong>自动求导</strong>方式，而不是一般的符号求导或数值求导。自动求导应用了链式法则，并将整个计算过程表示成一个<strong>无环图</strong>，其中包括两种模式：</p><ol type="1"><li><strong>正向积累</strong>：<br><span class="math display">\[\frac{\partial \boldsymbol{z}^{(i)}}{\partial \boldsymbol{x}} =\frac{\partial \boldsymbol{z}^{(i-1)}}{\partial \boldsymbol{x}} \cdot\frac{\partial \boldsymbol{z}^{(i)}}{\partial \boldsymbol{z}^{(i-1)}}\]</span></li><li><strong>反向传递</strong>：<br><span class="math display">\[\frac{\partial f}{\partial \boldsymbol{z}^{(i-1)}} =\frac{\partial f}{\partial \boldsymbol{z}^{(i)}} \cdot\frac{\partial \boldsymbol{z}^{(i)}}{\partial \boldsymbol{z}^{(i-1)}}\]</span></li></ol><p>反向传递过程需要存储中间变量，导致内存复杂度比正向积累高。</p><p>其在实际场景中的主要应用就是神经网络，在神经网络的正向传播中，我们将输入数据通过网络层逐层传递，计算出最终的输出值。我们的目标是计算神经网络的输出<span class="math inline">\(\hat{y}\)</span>和损失函数<span class="math inline">\(\mathcal{L}\)</span>的值。而反向传播用于计算损失函数对所有网络参数的梯度。</p><p>在实际应用问题中，由于反向传播的链路过长，涉及到多次激活函数关于净输入的偏导数矩阵、当前层输入关于净输入的偏导数矩阵的连乘，如果这个矩阵的谱半径小于一，那么随着反向传播的进行，回传的梯度信号衰减地越厉害，这使得越是网络浅层的参数地梯度越微弱，那么其越难得到很好地更新。这就是<strong>梯度消失</strong>问题。</p>]]></content>
    
    
    <summary type="html">《矩阵理论与方法》课程学习笔记</summary>
    
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/categories/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/tags/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>矩阵论：矩阵级数</title>
    <link href="https://yokumii.github.io/blog/2025/01/14/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E7%9F%A9%E9%98%B5%E7%BA%A7%E6%95%B0/"/>
    <id>https://yokumii.github.io/blog/2025/01/14/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E7%9F%A9%E9%98%B5%E7%BA%A7%E6%95%B0/</id>
    <published>2025-01-14T08:48:00.000Z</published>
    <updated>2025-03-21T08:49:36.654Z</updated>
    
    <content type="html"><![CDATA[<h3 id="矩阵级数介绍">矩阵级数介绍</h3><p>在数学分析中，级数（特别是幂级数）的理论占有重要地位。在建立矩阵分析的理论时，矩阵级数，特别是幂级数，是建立矩阵函数的理论基础。</p><p>类似数列级数，我们给出其收敛、发散以及和的定义。</p><h4 id="定义-1">定义 1</h4><p>把矩阵序列所形成的无穷和 <span class="math inline">\(A^{(0)} +A^{(1)} + A^{(2)} + \cdots + A^{(k)} + \cdots\)</span> 称为<strong>矩阵级数</strong>，记为 <span class="math inline">\(\sum_{k =0}^{\infty} A^{(k)}\)</span>。则有：<br><span class="math display">\[\sum_{k=0}^\infty A^{(k)} = A^{(0)} + A^{(1)} + A^{(2)} + \cdots +A^{(k)} + \cdots\]</span></p><h4 id="定义-2">定义 2</h4><p>记 <span class="math inline">\(S^{(N)} = \sum_{k=0}^NA^{(k)}\)</span>，称其为矩阵级数的部分和。如果矩阵序列 <span class="math inline">\(\{S^{(N)}\}\)</span><strong>收敛</strong>，且有极限 <span class="math inline">\(S\)</span>，则有：<br><span class="math display">\[\lim_{N \to \infty} S^{(N)} = S\]</span><br>那么就称矩阵级数收敛，并且有 <span class="math inline">\(S\)</span>，记为：<br><span class="math display">\[S = \sum_{k=0}^\infty A^{(k)}\]</span><br>不收敛的矩阵称为 <strong>发散</strong> 的。</p><p>若用 <span class="math inline">\(s_{ij}\)</span> 表示 <span class="math inline">\(S\)</span> 的第 <span class="math inline">\(i\)</span> 行第 <span class="math inline">\(j\)</span> 列元素，那么，和 <span class="math inline">\(\sum_{k=0}^N A^{(k)} = S^{(N)}\)</span>的意义是：<br><span class="math display">\[\sum_{k = 0}^{\infty}a_{ij}^{(k)} = s_{ij}, \quad (i=1,2,\dots,m; \quadj=1,2,\dots,n)\]</span></p><h4 id="定义-3">定义 3</h4><p>如果上述级数中 <span class="math inline">\(mn\)</span>个数项级数都是绝对收敛的，则称矩阵级数是 <strong>绝对收敛</strong>的。</p><p>我们不再赘述有关矩阵级数绝对收敛的一些判别和性质，而是将重点放在矩阵的幂级数上。</p><p>首先，我们看一个比较简单的方阵幂级数。</p><h4 id="定理-1">定理 1</h4><p>方阵 <span class="math inline">\(A\)</span> 的<strong>幂级数（Neumann 级数）</strong><br><span class="math display">\[\sum_{k = 0}^{\infty} A^k = I + A + A^2 + \dots + A^k + \dots\]</span><br>收敛的充要条件是 <span class="math inline">\(A\)</span>为收敛矩阵，并且在其收敛时，其和为 <span class="math inline">\((I -A)^{-1}\)</span>。</p><p>如果用级数和来估算部分和矩阵，会存在一定误差：</p><h4 id="定理-2">定理 2</h4><p>设方阵 <span class="math inline">\(A\)</span> 对某一矩阵范数 <span class="math inline">\(\Vert \cdot \Vert\)</span> 有 <span class="math inline">\(\Vert A\Vert &lt; 1\)</span>，则对任何非负整数<span class="math inline">\(N\)</span>，以 <span class="math inline">\((I-A)^{-1}\)</span> 为部分和 <span class="math inline">\(I + A + A^2 + \dots + A^N\)</span>的近似矩阵时，其误差为：<br><span class="math display">\[\Vert (I-A)^{-1} - (I + A + A^2 + \dots + A^N)\Vert \le \frac{\VertA\Vert ^{N+1}}{1 - \Vert A\Vert}\]</span></p><p>现在，我们继续将矩阵幂级数 <span class="math inline">\(\sum_{k =0}^{\infty} c_kA^k\)</span> 与对应的纯量幂级数 <span class="math inline">\(\sum_{k = 0}^{\infty} c_kz^k\)</span>建立联系。</p><h4 id="定理-3">定理 3</h4><p>设幂级数<br><span class="math display">\[f(z) = \sum_{k = 0}^{\infty}c_kz^k\]</span><br>的收敛半径为 <span class="math inline">\(r\)</span>，如果方阵 <span class="math inline">\(A\)</span> 满足 <span class="math inline">\(\rho(A) &lt; r\)</span>，则矩阵幂级数<br><span class="math display">\[\sum_{k = 0}^{\infty}c_kA^k\]</span><br>是绝对收敛的；如果 <span class="math inline">\(\rho (A) &gt;r\)</span>，则矩阵幂级数是发散的。</p>]]></content>
    
    
    <summary type="html">《矩阵理论与方法》课程学习笔记</summary>
    
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/categories/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/tags/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>矩阵论：矩阵序列</title>
    <link href="https://yokumii.github.io/blog/2025/01/14/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E7%9F%A9%E9%98%B5%E5%BA%8F%E5%88%97/"/>
    <id>https://yokumii.github.io/blog/2025/01/14/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E7%9F%A9%E9%98%B5%E5%BA%8F%E5%88%97/</id>
    <published>2025-01-14T08:44:00.000Z</published>
    <updated>2025-03-21T08:44:28.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="矩阵序列介绍">矩阵序列介绍</h2><p>在《线性代数》课程中主要学习了矩阵的代数运算，我们继续将《数学分析》中的理论推广至矩阵空间，对于矩阵的分析，类似数列，我们同样从极限理论开始，介绍矩阵序列的极限运算。</p><h3 id="定义">定义</h3><p>设 <span class="math inline">\(\{A^{(k)}\}_{k=1}^\infty\)</span>是一个矩阵序列，其中 <span class="math inline">\(A^{(k)} \in\mathbb{C}^{m \times n}\)</span>。当 <span class="math inline">\(a_{ij}^{(k)} \to a_{ij}(k \to \infty)\)</span>时，称 <span class="math inline">\(\{A^{(k)}\}\)</span> 收敛，或成矩阵<span class="math inline">\(A = (a_{ij})_{m \times n}\)</span> 为 <span class="math inline">\(\{A^{(k)}\}\)</span> 的极限，或称 <span class="math inline">\(\{A^{(k)}\}\)</span> 收敛于 <span class="math inline">\(A\)</span>，记为<br><span class="math display">\[\lim_{k \to \infty} A^{(k)} = A, A^{(k)} \to A\]</span><br>不收敛的矩阵序列称为 <strong>发散</strong>。</p><p>同样，矩阵序列收敛有很多与数列收敛类似的性质，此处不再赘述，继续往下研究其收敛的等价条件。</p><h3 id="定理">定理</h3><p><strong>定理 1</strong> 设 <span class="math inline">\(A^{(k)} \in\mathbb{C}^{m \times n}\)</span>，则</p><ol type="1"><li><span class="math inline">\(A^{(k)} \to O\)</span> 的充要条件是<span class="math inline">\(\Vert A^{(k)}\Vert \to 0\)</span>；</li><li><span class="math inline">\(A^{(k)} \to A\)</span> 的充要条件是<span class="math inline">\(\Vert A^{(k)} - A \Vert \to0\)</span>；</li></ol><p>这里，<span class="math inline">\(\Vert \cdot \Vert\)</span> 是 <span class="math inline">\(\mathbb{C}^{m \times n}\)</span>上任何一种矩阵范数。</p><p>至此，我们将矩阵收敛的判断与范数建立了联系。</p><h3 id="定义-1">定义</h3><p><strong>定义 1</strong> 矩阵序列 <span class="math inline">\(\{A^{(k)}\}\)</span> 称为 <strong>有界</strong>的，如果存在常数 <span class="math inline">\(M &gt;0\)</span>，使得对于一切 <span class="math inline">\(k\)</span>都有<br><span class="math display">\[\left | a_{ij}^{(k)}\right | &lt; M(i = 1,2,\dots,m;j = 1,2,\dots,n)\]</span></p><p><strong>定义 2</strong> 设 <span class="math inline">\(A\)</span>为方阵，且 <span class="math inline">\(A^k \to O(k \to\infty)\)</span>，则称 <span class="math inline">\(A\)</span> 为<strong>收敛矩阵</strong>。</p><h3 id="定理-1">定理</h3><p><strong>定理 2</strong> <span class="math inline">\(A\)</span>为收敛矩阵的充要条件是 <span class="math inline">\(\rho(A) &lt;1\)</span>。</p><p><strong>定理 3</strong> <span class="math inline">\(A\)</span>为收敛矩阵的充分条件是只要有一种矩阵范数 <span class="math inline">\(\left|\cdot\right|\)</span>，使得 <span class="math inline">\(\Vert A \Vert &lt; 1\)</span>。</p>]]></content>
    
    
    <summary type="html">《矩阵理论与方法》课程学习笔记</summary>
    
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/categories/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/tags/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>矩阵论：矩阵可逆性条件、条件数和谱半径介绍</title>
    <link href="https://yokumii.github.io/blog/2025/01/13/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E7%9F%A9%E9%98%B5%E5%8F%AF%E9%80%86%E6%80%A7%E6%9D%A1%E4%BB%B6%E3%80%81%E6%9D%A1%E4%BB%B6%E6%95%B0%E5%92%8C%E8%B0%B1%E5%8D%8A%E5%BE%84%E4%BB%8B%E7%BB%8D/"/>
    <id>https://yokumii.github.io/blog/2025/01/13/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E7%9F%A9%E9%98%B5%E5%8F%AF%E9%80%86%E6%80%A7%E6%9D%A1%E4%BB%B6%E3%80%81%E6%9D%A1%E4%BB%B6%E6%95%B0%E5%92%8C%E8%B0%B1%E5%8D%8A%E5%BE%84%E4%BB%8B%E7%BB%8D/</id>
    <published>2025-01-13T08:40:00.000Z</published>
    <updated>2025-03-21T08:42:00.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="矩阵可逆性条件条件数和谱半径介绍">矩阵可逆性条件、条件数和谱半径介绍</h2><p>在明确了范数的定义后，我们对它的几点应用进行列举。</p><h3 id="定理-2.6">定理 2.6</h3><p>设 <span class="math inline">\(A\in \mathbb{C}^{n \timesn}\)</span>，且对 <span class="math inline">\(\mathbb{C}^{n\timesn}\)</span> 上的某种矩阵范数 $$，若 <span class="math inline">\(\Vert  A\Vert  &lt; 1\)</span>，则矩阵 <span class="math inline">\(I-A\)</span>可逆（非奇异），且有：</p><p><span class="math display">\[\Vert (I - A)^{-1} \Vert  \leq \frac{\Vert  I \Vert }{1 - \Vert  A \Vert}\]</span></p><h3 id="定理-2.7">定理 2.7</h3><p>设 <span class="math inline">\(A\in \mathbb{C}^{n \timesn}\)</span>，且对 <span class="math inline">\(\mathbb{C}^{n\timesn}\)</span> 上的某种矩阵范数 $$，若 <span class="math inline">\(\Vert  A\Vert  &lt; 1\)</span>，则有：</p><p><span class="math display">\[\Vert I - (I - A)^{-1} \Vert  \leq \frac{\Vert  A \Vert }{1 - \Vert  A\Vert }\]</span></p><h3 id="逆矩阵的摄动">逆矩阵的摄动</h3><p>在实际应用问题中，矩阵参数往往为非准确值，即带有误差 <span class="math inline">\(\delta\)</span>，我们希望其构成的近似矩阵 <span class="math inline">\(A\)</span> 的逆矩阵 <span class="math inline">\(A^{-1}\)</span> 与准确矩阵 <span class="math inline">\(A + \delta a_{ij}(i,j = 1,2,\dots,n)\)</span>的逆矩阵 <span class="math inline">\((A + \delta a_{ij})^{-1}\)</span>尽量接近。</p><p>一般称 <span class="math inline">\(\delta a_{ij}\)</span> 为<strong>扰动</strong>，<span class="math inline">\(\delta A\)</span> 为<span class="math inline">\(A\)</span> 的<strong>摄动矩阵</strong>。</p><h3 id="摄动定理">摄动定理</h3><p><strong>定理 2.8</strong></p><p>设 <span class="math inline">\(A\in \mathbb{C}^{n \times n}\)</span>且 <span class="math inline">\(A\)</span> 可逆，<span class="math inline">\(B\in \mathbb{C}^{n\times n}\)</span>，且对 <span class="math inline">\(\mathbb{C}^{n\times n}\)</span> 上的某种矩阵范数$$，若 <span class="math inline">\(\Vert  A^{-1}B \Vert  &lt;1\)</span>，则有：</p><ul><li><span class="math inline">\(A + B\)</span> 可逆；</li><li>记 <span class="math inline">\(F = I - (I +A^{-1}B)^{-1}\)</span>，则 <span class="math inline">\(\Vert F \Vert\leq \frac{\Vert A^{-1}B \Vert }{1 - \Vert A^{-1}B \Vert}\)</span>；</li><li><span class="math inline">\(\frac{\Vert A^{-1} - (A + B)^{-1} \Vert}{A^{-1}} \leq \frac{\Vert  A^{-1}B \Vert }{1 - \Vert  A^{-1}B \Vert}\)</span>。</li></ul><p>若令 <span class="math inline">\(\delta\)</span> 是个小量，并且令</p><p><span class="math display">\[cond(A) = \Vert A \Vert \Vert A^{-1}\Vert\]</span></p><p>则当 <span class="math inline">\(\Vert A^{-1}\Vert \Vert \delta A\Vert &lt; 1\)</span> 时，</p><p><span class="math display">\[\frac{\Vert A^{-1} - (A + \delta A)^{-1}\Vert}{\Vert A^{-1}\Vert}\leq\frac{cond(A)\frac{\Vert \delta A\Vert}{\Vert A\Vert}}{1 -cond(A)\frac{\Vert\delta A\Vert}{\Vert A\Vert}}\]</span></p><p>称 <span class="math inline">\(cond(A)\)</span> 为矩阵 <span class="math inline">\(A\)</span> 的<strong>条件数</strong>，一般情况下，条件数越大，<span class="math inline">\((A + \delta A)^{-1}\)</span> 和 <span class="math inline">\(A^{-1}\)</span>的相对误差就越大。往往在用算法进行矩阵求逆时，先计算条件数，判断矩阵的逆是否“好求”。</p><h3 id="矩阵谱半径">矩阵谱半径</h3><p><strong>定义</strong></p><p>设 <span class="math inline">\(A\in \mathbb{C}^{n \times n}\)</span>的 <span class="math inline">\(n\)</span> 个特征值为 <span class="math inline">\(\lambda_1,\lambda_2,\dots,\lambda_n\)</span>，称</p><p><span class="math display">\[\rho (A) = \max\limits_{i}\left|\lambda_i\right|\]</span></p><p>为 <span class="math inline">\(A\)</span> 的<strong>谱半径</strong>。</p><p><strong>定理 2.9</strong></p><p>设 <span class="math inline">\(A\in \mathbb{C}^{n \timesn}\)</span>，则对 <span class="math inline">\(\mathbb{C}^{n\timesn}\)</span> 上任何一种矩阵范数 $$，都有</p><p><span class="math display">\[\rho (A) \leq \Vert  A \Vert\]</span></p><p><strong>定理 2.10</strong></p><p>设 <span class="math inline">\(A\in \mathbb{C}^{n \timesn}\)</span>，对 <span class="math inline">\(\forall \epsilon &gt;0,\exists \Vert  \cdot  \Vert ,s.t.\)</span></p><p><span class="math display">\[\Vert  A  \Vert _M \leq \rho (A) + \epsilon\]</span></p><p>由上述定理可见，谱半径小于等于任意矩阵范数，同时也必存在一个算子范数，小于等于谱半径加上一个很小的正数。</p><h3 id="谱半径在迭代法中的应用">谱半径在迭代法中的应用</h3><p>谱半径在数值分析和迭代法中起到了关键作用，尤其是在矩阵幂法、迭代求解线性方程组的收敛性分析等领域。例如，当利用迭代法解线性方程组时，谱半径决定了迭代矩阵是否收敛。</p><p><strong>定理 2.11</strong></p><p>在数值线性代数中，迭代法通常用于求解线性方程组 <span class="math inline">\(Ax = b\)</span>。设迭代法的一般形式为：</p><p><span class="math display">\[x^{(k+1)} = B x^{(k)} + c,\]</span></p><p>其中，<span class="math inline">\(B\)</span> 为迭代矩阵，<span class="math inline">\(c\)</span> 为常向量，<span class="math inline">\(k\)</span> 为迭代次数。</p><p>迭代法的收敛性由迭代矩阵 <span class="math inline">\(B\)</span>的谱半径决定：</p><ol type="1"><li><strong>必要条件</strong>：如果迭代法收敛，即 <span class="math inline">\(x^{(k)} \to x^*\)</span> (<span class="math inline">\(x^*\)</span> 为精确解)，则迭代矩阵 <span class="math inline">\(B\)</span> 的谱半径必须满足：<span class="math inline">\(\rho(B) &lt; 1\)</span>；</li><li><strong>充分条件</strong>：如果 <span class="math inline">\(\rho(B)&lt; 1\)</span>，则对于任意初始值 <span class="math inline">\(x^{(0)}\)</span>，迭代法都会收敛到线性方程组的唯一解<span class="math inline">\(x^*\)</span>。</li></ol>]]></content>
    
    
    <summary type="html">《矩阵理论与方法》课程学习笔记</summary>
    
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/categories/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/tags/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>矩阵论：向量范数与矩阵范数</title>
    <link href="https://yokumii.github.io/blog/2025/01/13/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E5%90%91%E9%87%8F%E8%8C%83%E6%95%B0%E4%B8%8E%E7%9F%A9%E9%98%B5%E8%8C%83%E6%95%B0/"/>
    <id>https://yokumii.github.io/blog/2025/01/13/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E5%90%91%E9%87%8F%E8%8C%83%E6%95%B0%E4%B8%8E%E7%9F%A9%E9%98%B5%E8%8C%83%E6%95%B0/</id>
    <published>2025-01-13T08:31:00.000Z</published>
    <updated>2025-03-21T08:40:01.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="向量范数与矩阵范数">向量范数与矩阵范数</h2><h3 id="向量范数介绍">向量范数介绍</h3><p>我们知道，对于数列极限，我们有</p><p><span class="math display">\[\lim_{n \to \infty} a_n = M \iff \forall \epsilon &gt; 0,\exists N &gt;0,s.t. \forall n&gt;N,\left |  {a_n - M}  \right | &lt; \epsilon.\]</span></p><p>在 <span class="math inline">\(n\)</span> 维向量空间 <span class="math inline">\(R^n\)</span> 内，我们希望对于一个向量序列 <span class="math inline">\(\{x^{(k)}\}\)</span>，其中 <span class="math inline">\(x^{(k)}= (\xi_1^{(k)},\xi_2^{(k)},\dots,\xi_n^{(k)})(k = 1,2,3,\dots)\)</span>。如果对于每一个分量 <span class="math inline">\(\xi_i^{(k)}\)</span>，都有 <span class="math inline">\(\lim_{k \to \infty} \xi_i^{(k)} =\xi_i\)</span>，即</p><p><span class="math display">\[\lim_{k \to \infty} x^{(k)} = (\xi_1, \xi_2, \dots, \xi_n) = x\]</span></p><p>则称向量序列 <span class="math inline">\(\{x^{(k)}\}\)</span> 收敛于<span class="math inline">\(x\)</span>。</p><p>但是，我们还是无法解决 <span class="math inline">\(\left| x^{(k)} -x\right|\)</span> 该如何定义和计算，显然它不能用向量 <span class="math inline">\(x^{(k)} - x\)</span>的长度来刻画。为此，我们定义向量范数如下。</p><h4 id="定义-2.1">定义 2.1</h4><p>如果 <span class="math inline">\(V\)</span> 是数域 <span class="math inline">\(K\)</span> 上的线性空间，且对于 <span class="math inline">\(\forall x \in V\)</span>，定义一个实值函数 $x$，它满足以下三个条件:</p><ol type="1"><li><strong>非负性</strong>: 当 <span class="math inline">\(x \ne0\)</span> 时，<span class="math inline">\(\Vert  x \Vert  &gt;0\)</span>，当且仅当 <span class="math inline">\(x = 0\)</span> 时为<span class="math inline">\(0\)</span>;</li><li><strong>齐次性</strong>: <span class="math inline">\(\forall a \inK, \forall x \in V, \Vert  ax \Vert  = \left| a \right| \Vert  x\Vert\)</span>;</li><li><strong>三角不等式</strong>: <span class="math inline">\(\forall x,y \in V, \Vert  x + y \Vert  \leq \Vert  x \Vert  + \Vert  y\Vert\)</span>;</li></ol><p>则称 <span class="math inline">\(\Vert  x \Vert\)</span> 为向量 <span class="math inline">\(x\)</span> 的范数。</p><p>我们要判断某个实值函数 <span class="math inline">\(\Vert  x\Vert\)</span>是否是范数，即验证其是否满足上述三条性质即可。以下列举几种常见的范数(在线性空间<span class="math inline">\(\mathbb{C}^n\)</span>，即酉空间中)：</p><ul><li><strong>1-范数</strong>: <span class="math inline">\(\Vert  x\Vert  = \sum \left| \xi_i \right|\)</span></li><li><strong>2-范数</strong>: <span class="math inline">\(\Vert  x\Vert  = \sqrt{(x,x)}\)</span></li><li><strong><span class="math inline">\(\infty\)</span>-范数</strong>:<span class="math inline">\(\Vert  x \Vert  = \max \left|x_i\right|\)</span></li><li><strong>p-范数</strong>: <span class="math inline">\(\Vert  x \Vert_p = (\sum_{i = 1}^{n} {\left|x_i\right|}^p)^{\frac{1}{p}}, (1 \leq p&lt; \infty)\)</span></li></ul><h4 id="定理-2.1">定理 2.1</h4><p>设有限维线性空间 <span class="math inline">\(V^n\)</span>中任意两个向量范数 <span class="math inline">\(\Vert  x_\alpha \Vert,\Vert  x_\beta \Vert\)</span>，如果 <span class="math inline">\(\existsc_1, c_2,s.t.\)</span></p><p><span class="math display">\[{c_1\Vert  x_\beta \Vert  \leq \Vert  x_\alpha \Vert  &lt;c_2\Vert  x_\beta \Vert }\]</span></p><p>则称向量范数 <span class="math inline">\(\Vert  x_\alpha \Vert,\Vert  x_\beta \Vert\)</span> 等价。</p><h3 id="矩阵范数介绍">矩阵范数介绍</h3><p>对于矩阵空间 <span class="math inline">\(\mathbb{C}^{m\timesn}\)</span>，如果类似地将矩阵 <span class="math inline">\(A_{m\timesn}\)</span>看作“向量”，可以类似向量范数定义矩阵范数。但矩阵之间还有乘法运算，需要补充定义如下：</p><h4 id="定义-2.3">定义 2.3</h4><p>设 <span class="math inline">\(A \in \mathbb{C}^{m\timesn}\)</span>，定义一个实值函数 <span class="math inline">\(\Vert  A\Vert\)</span>，它满足以下四个条件:</p><ol type="1"><li><strong>非负性</strong>: 当 <span class="math inline">\(A \ne0\)</span> 时，<span class="math inline">\(\Vert  A \Vert  &gt;0\)</span>，当且仅当 <span class="math inline">\(A = 0\)</span> 时为<span class="math inline">\(0\)</span>;</li><li><strong>齐次性</strong>: <span class="math inline">\(\forall \alpha\in C, \Vert  {\alpha A} \Vert  = \left| {\alpha} \right| \Vert  A\Vert\)</span>;</li><li><strong>三角不等式</strong>: <span class="math inline">\(\Vert  A +B \Vert  \leq \Vert  A \Vert  + \Vert  B \Vert\)</span>;</li><li><strong>相容性</strong>: <span class="math inline">\(\Vert  AB\Vert  \leq \Vert  A \Vert  \Vert  B \Vert\)</span> (对于 <span class="math inline">\(B \in \mathbb{C}^{n\times l}\)</span>)。</li></ol><p>则称 <span class="math inline">\(\Vert  A \Vert\)</span> 为矩阵 <span class="math inline">\(A\)</span> 的范数。</p><p>在数值方法中进行某种估计时，多数情况下，矩阵范数与向量范数常混合使用，而矩阵经常是作为两个线性空间上的线性变换出现的，为此引入矩阵范数和向量范数相容的概念如下：</p><h4 id="定理2.2">定理2.2</h4><p>对于<span class="math inline">\(\mathbb{C}^{m \timesn}\)</span>的矩阵范数<span class="math inline">\(\Vert {\cdot} \Vert_M\)</span>和<span class="math inline">\(\mathbb{C}^m,\mathbb{C}^n\)</span>上的同类向量范数<span class="math inline">\(\Vert {\cdot} \Vert _V\)</span>，如果有</p><p>$$</p><p>Ax _V A _M x _V(A ^{m n}, x <sup>n</sup>)</p><p>$$</p><p>则称矩阵范数<span class="math inline">\(\Vert {\cdot} \Vert_M\)</span>与向量范数<span class="math inline">\(\Vert {\cdot} \Vert_V\)</span>是相容的。</p><p>以下列举几种常用的矩阵范数：</p><ul><li><strong>F-范数</strong>: <span class="math inline">\(\Vert  A \Vert_F = (\sum_{i = 1}^{m}\sum_{j =1}^{n}\left|a_{ij}\right|^2)^{\frac{1}{2}} = (tr(A^HA))^{\frac{1}{2}}\)</span></li></ul><p>其中，F-范数有一定理如下：</p><h4 id="定理-2.3">定理 2.3</h4><p>设 <span class="math inline">\(A \in \mathbb{C}^{m \timesn}\)</span>，且 <span class="math inline">\(P \in \mathbb{C}^{m\timesm}, Q\in \mathbb{C}^{n \times n}\)</span> 都是酉矩阵，则有</p><p><span class="math display">\[\Vert PA \Vert _F = \Vert A \Vert _F = \Vert AQ \Vert _F\]</span></p><p>即 <span class="math inline">\(A\)</span> 左乘或右乘酉矩阵后，其<span class="math inline">\(\Vert {\cdot} \Vert\)</span> 不变。</p><p>矩阵函数可以通过如下方法进行定义，并且定义的矩阵函数与已知的向量范数相容。</p><h4 id="定理2.4">定理2.4</h4><p>已知<span class="math inline">\(\mathbb{C}^{m},\mathbb{C}^{n}\)</span>上的同类向量范数<span class="math inline">\(\Vert {\cdot} \Vert\)</span>。设<span class="math inline">\(A\in \mathbb{C}^{m\times n}\)</span>，则函数<br><span class="math display">\[\Vert {A} \Vert = \max\limits_{\Vert x \Vert = 1}{\Vert {Ax} \Vert }\]</span></p><p>是<span class="math inline">\(\mathbb{C}^{m\timesn}\)</span>上的矩阵范数，且与已知的向量范数相容。</p><p>分别取向量<span class="math inline">\(x\)</span>的范数为<span class="math inline">\(\Vert x \Vert _1,\Vert x \Vert _2,\Vert x \Vert_{\infty}\)</span>时，就可以得到以下三种矩阵范数：</p><h4 id="定理-2.5">定理 2.5</h4><p>设 <span class="math inline">\(A = (a_{ij})_{m\times n} \in\mathbb{C}^{m\timesn}\)</span>，可以得到以下三种矩阵范数的计算公式分别为:</p><ol type="1"><li><strong>列和范数</strong>: <span class="math inline">\(\Vert A \Vert_1 = \max\limits_{j} \sum_{i = 1}^{m}\left|a_{ij}\right|\)</span>;</li><li><strong>谱范数</strong>: <span class="math inline">\(\Vert A \Vert_2 = \sqrt{\max{\lambda(A^HA)}}\)</span>;</li><li><strong>行和范数</strong>: <span class="math inline">\(\Vert A \Vert_{\infty} = \max\limits_{i}\sum_{j=1}^{n}\left|a_{ij}\right|\)</span>;</li></ol><p>在机器学习中，范数作为数学优化的重要工具，广泛应用于高维优化问题中，其具体表现和影响在模型的性能、计算复杂度、正则化等方面有重要体现。</p><p>在高维优化中，目标函数往往包含范数，用于度量模型参数或残差的大小；在机器学习模型训练中，损失函数通常衡量预测值与真实值之间的差距，而范数决定了误差的度量方式，例如L-1损失、L-2损失；正则化通过添加范数约束减少模型复杂度，缓解高维数据中的过拟合问题，例如L-1正则化，L-2正则化。</p><p>以上应用场景中，范数的引入通过度量大小、限制复杂性和提升泛化能力，影响了模型的性能和稳定性。选择合适的范数类型能有效在稀疏性、平滑性和数值稳定性之间实现权衡。</p>]]></content>
    
    
    <summary type="html">《矩阵理论与方法》课程学习笔记</summary>
    
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/categories/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/tags/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>矩阵论：欧式空间中线性变换的求法</title>
    <link href="https://yokumii.github.io/blog/2025/01/12/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E6%AC%A7%E5%BC%8F%E7%A9%BA%E9%97%B4%E4%B8%AD%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2%E7%9A%84%E6%B1%82%E6%B3%95/"/>
    <id>https://yokumii.github.io/blog/2025/01/12/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E6%AC%A7%E5%BC%8F%E7%A9%BA%E9%97%B4%E4%B8%AD%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2%E7%9A%84%E6%B1%82%E6%B3%95/</id>
    <published>2025-01-12T08:27:00.000Z</published>
    <updated>2025-03-21T08:29:22.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="欧式空间中线性变换的求法">欧式空间中线性变换的求法</h2><p>有了前两节的铺垫，下面，我们正式介绍欧式空间中线性变换的求法。</p><p>我们将问题描述如下：</p><p><strong>问题描述：</strong></p><ul><li>在欧式空间中给定线性变换 <span class="math inline">\(T: \mathbb{V}^n\to \mathbb{V}^n\)</span>，比如：<span class="math inline">\(T(\boldsymbol{X}) =  \boldsymbol{X} \boldsymbol{B}(\forall  \boldsymbol{X}\in \mathbb{V})\)</span>，其中 <span class="math inline">\(\boldsymbol{B}\)</span> 给定。</li><li><strong>目标：</strong> 寻找一组新基，使得 <span class="math inline">\(T\)</span> 在这组基下的矩阵表示为对角矩阵 <span class="math inline">\(\boldsymbol{\Lambda}\)</span> 或 Jordan 标准型<span class="math inline">\(\boldsymbol{J}\)</span>。</li></ul><p>首先，我们以课本 [矩阵论] 中的例题 1.36为例，说明对称变换的求法：</p><h3 id="例-1.36">例 1.36</h3><p>在欧氏空间 <span class="math inline">\(\mathbb{R}^{2 \times2}\)</span> 中，矩阵 <span class="math inline">\(\boldsymbol{A}\)</span>与 <span class="math inline">\(\boldsymbol{B}\)</span> 的内积定义为<span class="math display">\[( \boldsymbol{A},  \boldsymbol{B})=tr (\boldsymbol{A}^\top  \boldsymbol{B})\]</span>，子空间</p><p><span class="math display">\[V=\left\{ \boldsymbol{X} =\begin{bmatrix} x_{1} &amp; x_{2}\\ x_{3}&amp; x_{4} \end{bmatrix} \mid x_{3}-x_{4}=0\right\}\]</span></p><p><span class="math inline">\(V\)</span> 中的线性变换为</p><p><span class="math display">\[T( \boldsymbol{X})= \boldsymbol{X}  \boldsymbol{B}_{0}\quad(\forall  \boldsymbol{X} \in V), \boldsymbol{B}_{0}=\begin{bmatrix} 1&amp; 2 \\ 2 &amp; 1 \end{bmatrix}\]</span></p><ol type="1"><li>求 <span class="math inline">\(V\)</span> 的一个标准正交基；</li><li>验证 <span class="math inline">\(T\)</span> 是 <span class="math inline">\(V\)</span> 中的对称变换；</li><li>求 <span class="math inline">\(V\)</span> 的一个标准正交基，使 <span class="math inline">\(T\)</span> 在该基下的矩阵为对角矩阵。</li></ol><h3 id="解">解：</h3><h4 id="先找到一组普通的基再进行-schmidt-正交化">(1)先找到一组普通的基，再进行 Schmidt 正交化</h4><p><span class="math display">\[\boldsymbol{X}=\begin{bmatrix} x_{1} &amp; x_{2} \\ x_{3} &amp; x_{4}\end{bmatrix}=x_{1}\begin{bmatrix} 1 &amp; 0 \\ 0 &amp; 0\end{bmatrix}+x_{2}\begin{bmatrix} 0 &amp; 1 \\ 0 &amp; 0\end{bmatrix}+x_{3}\begin{bmatrix} 0 &amp; 0 \\ 1 &amp; 1 \end{bmatrix}\]</span></p><p>一组标准正交基为：</p><p><span class="math display">\[\boldsymbol{X}_1 = \begin{bmatrix} 1 &amp; 0\\ 0 &amp; 0 \end{bmatrix}\quad \boldsymbol{X}_2 = \begin{bmatrix} 0 &amp; 1\\ 0 &amp; 0\end{bmatrix} \quad \boldsymbol{X}_3 = \frac{1}{\sqrt{2}}\begin{bmatrix}0 &amp; 0\\ 1 &amp; 1 \end{bmatrix}\]</span></p><h4 id="计算-t-在这组基下的矩阵表示">(2) 计算 <span class="math inline">\(T\)</span> 在这组基下的矩阵表示</h4><p><span class="math display">\[T(\boldsymbol{X}_1 , \boldsymbol{X}_2, \boldsymbol{X}_3) =(\boldsymbol{X}_1 , \boldsymbol{X}_2, \boldsymbol{X}_3)\boldsymbol{A}\Rightarrow \boldsymbol{A} = \begin{bmatrix} 1 &amp; 2 &amp; 0\\ 2 &amp;1 &amp; 0\\ 0 &amp; 0 &amp; 3 \end{bmatrix}\]</span></p><h4 id="计算新的正交基使-t-在该基下为对角矩阵">(3) 计算新的正交基，使<span class="math inline">\(T\)</span> 在该基下为对角矩阵</h4><p><span class="math display">\[\boldsymbol{A}=  \boldsymbol{Q}  \boldsymbol{\Lambda}  \boldsymbol{Q}^\top\]</span></p><p>其中：</p><p><span class="math display">\[\boldsymbol{\Lambda}= \begin{bmatrix} 3 &amp; &amp; \\ &amp; 3 &amp; \\&amp; &amp; -1 \end{bmatrix} \quad \boldsymbol{Q}=\begin{bmatrix} 0&amp; \frac{1}{\sqrt{2}} &amp; -\frac{1}{\sqrt{2}} \\ 0 &amp;\frac{1}{\sqrt{2}} &amp; -\frac{1}{\sqrt{2}} \\ 1 &amp; 0 &amp; 0\end{bmatrix}\]</span></p><p>计算得到的新基：</p><p><span class="math display">\[\boldsymbol{Y}_1 = \frac{1}{\sqrt{2}}\begin{bmatrix} 0 &amp; 0\\ 1 &amp;1 \end{bmatrix} \quad \boldsymbol{Y}_2 =\frac{1}{\sqrt{2}}\begin{bmatrix} 1 &amp; 1\\ 0 &amp; 0 \end{bmatrix}\quad \boldsymbol{Y}_3 = \frac{1}{\sqrt{2}}\begin{bmatrix} -1 &amp; 1\\0 &amp; 0 \end{bmatrix}\]</span></p><h2 id="线性变换的一般求法">线性变换的一般求法</h2><p>若 <span class="math inline">\(V\)</span> 是欧式空间，<span class="math inline">\(T\)</span> 是 <span class="math inline">\(V\)</span> 上的一个线性变换：</p><ol type="1"><li><p>任意找到 <span class="math inline">\(V\)</span> 的一个基，并通过Schmidt 正交化法得到 <span class="math inline">\(V\)</span>的一个标准正交基，记为 <span class="math inline">\(e_1,e_2,\cdots,e_n\)</span>；</p></li><li><p>求 <span class="math inline">\(T\)</span>在该标准正交基下的矩阵表示 <span class="math inline">\(\boldsymbol{A}_0\)</span>：</p><p><span class="math display">\[ T(e_1,e_2,\cdots,e_n) =(e_1,e_2,\cdots,e_n)\boldsymbol{A}_0 \]</span></p></li><li><p>将 <span class="math inline">\(\boldsymbol{A}_0\)</span> 化为Jordan 标准型 <span class="math inline">\(\boldsymbol{J}\)</span>：</p><p><span class="math display">\[ \boldsymbol{A}_0 =\boldsymbol{P}\boldsymbol{J} \boldsymbol{P}^{-1} \]</span></p></li><li><p>右乘 <span class="math inline">\(\boldsymbol{P}\)</span>：</p><p><span class="math display">\[ T(e_1,e_2,\cdots,e_n)\boldsymbol{P} =(e_1,e_2,\cdots,e_n)\boldsymbol{P}\boldsymbol{J} \]</span></p></li><li><p>取新基 <span class="math inline">\((\boldsymbol{E}_1,\boldsymbol{E}_2, \cdots, \boldsymbol{E}_n) = (\boldsymbol{e}_1 ,\boldsymbol{e}_2, \cdots,\boldsymbol{e}_n)\boldsymbol{P}\)</span>，则线性变换在新基下的矩阵表示为<span class="math inline">\(\boldsymbol{J}\)</span>。</p></li></ol><p>以上方法可用于简化计算，使得多项式函数 <span class="math inline">\(z= (T^k)(x),x\in V\)</span> 的求解更加简便。</p>]]></content>
    
    
    <summary type="html">《矩阵理论与方法》课程学习笔记</summary>
    
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/categories/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/tags/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>矩阵论：若尔当标准型</title>
    <link href="https://yokumii.github.io/blog/2025/01/12/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E8%8B%A5%E5%B0%94%E5%BD%93%E6%A0%87%E5%87%86%E5%9E%8B/"/>
    <id>https://yokumii.github.io/blog/2025/01/12/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E8%8B%A5%E5%B0%94%E5%BD%93%E6%A0%87%E5%87%86%E5%9E%8B/</id>
    <published>2025-01-12T08:18:00.000Z</published>
    <updated>2025-03-21T08:21:01.390Z</updated>
    
    <content type="html"><![CDATA[<p>线性变换既然有矩阵表示，我们希望其应用到向量上得到的象能方便得到，即我们希望线性变换对应的矩阵尽量简单，比如能变为对角矩阵。为此，我们首先引入线性变换的特征值和特征向量，它和普通方阵类似。</p><h4 id="特征值与特征向量">特征值与特征向量</h4><p><strong>定义 1</strong> 设 <span class="math inline">\(T: V \toV\)</span> 是一个线性变换，如果存在 <span class="math inline">\(\lambda_0 \in K\)</span>，使得存在非零向量 <span class="math inline">\(x \in V\)</span> 满足：<br><span class="math display">\[ T x = \lambda_0 x\]</span><br>那么我们称 <span class="math inline">\(\lambda_0\)</span> 是 <span class="math inline">\(T\)</span> 的<strong>特征值</strong>，<span class="math inline">\(x\)</span> 是 <span class="math inline">\(T\)</span> 属于 <span class="math inline">\(\lambda_0\)</span>的<strong>特征向量</strong>。</p><p><strong>定义 2</strong> 设 <span class="math inline">\(\boldsymbol{A}= (a_{ij})_{n\times n}\)</span> 是数域 <span class="math inline">\(K\)</span> 上的 <span class="math inline">\(n\)</span> 阶矩阵，<span class="math inline">\(\lambda\)</span> 是参数，<span class="math inline">\(\boldsymbol{A}\)</span> 的特征矩阵 <span class="math inline">\(\lambda I - A\)</span> 的行列式：<br><span class="math display">\[\det (\lambda I-A) = \begin{vmatrix}\lambda-a_{11} &amp; -a_{12} &amp; \cdots &amp; -a_{1n} \\-a_{21} &amp; \lambda-a_{22} &amp; \cdots &amp; -a_{2n} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\-a_{n1} &amp; -a_{n2} &amp; \cdots &amp; \lambda-a_{nn}\end{vmatrix}\]</span><br>称为矩阵 <span class="math inline">\(\boldsymbol{A}\)</span>的<strong>特征多项式</strong>，记为 <span class="math inline">\(\varphi(\lambda)\)</span>。它的根 <span class="math inline">\(\lambda_0\)</span> 称为 <span class="math inline">\(\boldsymbol{A}\)</span>的<strong>特征值</strong>，而对应的非零解向量 <span class="math inline">\((\xi_1, \xi_2, \dots, \xi_n)^T\)</span> 称为 <span class="math inline">\(\boldsymbol{A}\)</span> 的属于特征值 <span class="math inline">\(\lambda_0\)</span>的<strong>特征向量</strong>。</p><h3 id="最小多项式">最小多项式</h3><p><strong>定义 3</strong> 设 <span class="math inline">\(\boldsymbol{A}\)</span> 的首项系数为 <span class="math inline">\(1\)</span>，次数最小，且以 <span class="math inline">\(\boldsymbol{A}\)</span> 为根的 <span class="math inline">\(\lambda\)</span> 的多项式，称为 <span class="math inline">\(\boldsymbol{A}\)</span>的<strong>最小多项式</strong>，记为 <span class="math inline">\(m(\lambda)\)</span>。</p><h3 id="最小多项式与特征多项式的关系">最小多项式与特征多项式的关系</h3><p><strong>定理 1</strong> 设矩阵 <span class="math inline">\(\boldsymbol{A}\)</span> 的最小多项式 <span class="math inline">\(m(\lambda)\)</span> 可整除以 <span class="math inline">\(\boldsymbol{A}\)</span> 为根的任一首 <span class="math inline">\(1\)</span> 多项式 <span class="math inline">\(\psi(\lambda)\)</span>，且 <span class="math inline">\(m(\lambda)\)</span> 是唯一的。</p><p><strong>定理 2</strong> 矩阵 <span class="math inline">\(\boldsymbol{A}\)</span> 的最小多项式 <span class="math inline">\(m(\lambda)\)</span> 与其特征多项式 <span class="math inline">\(\varphi(\lambda)\)</span>的零点相同（不计重数）。</p><p><strong>定理 3</strong> 设 <span class="math inline">\(n\)</span>阶矩阵 <span class="math inline">\(\boldsymbol{A}\)</span>的特征多项式为 <span class="math inline">\(\varphi(\lambda)\)</span>，特征矩阵 <span class="math inline">\(\lambda I - A\)</span> 的全体 <span class="math inline">\(n-1\)</span> 阶子式的最大公因式为 <span class="math inline">\(d(\lambda)\)</span>，则 <span class="math inline">\(\boldsymbol{A}\)</span> 的最小多项式为：<br><span class="math display">\[ m(\lambda) =\frac{\varphi(\lambda)}{d(\lambda)} \]</span></p><h3 id="jordan-标准型">Jordan 标准型</h3><p><strong>定义 4</strong> 设矩阵 <span class="math inline">\(\boldsymbol{J}\)</span> 由以下 Jordan块构成：<br><span class="math display">\[\boldsymbol{J} = \begin{bmatrix}\boldsymbol{J}_1(\lambda_1) &amp; &amp; &amp; \\&amp; \boldsymbol{J}_2(\lambda_2) &amp; &amp; \\&amp; &amp; \ddots &amp; \\&amp; &amp; &amp; \boldsymbol{J}_s(\lambda_s)\end{bmatrix}\]</span><br>其中，Jordan 块的形式如下：<br><span class="math display">\[\boldsymbol{J}_i(\lambda_i) =\begin{bmatrix}\lambda_i &amp; 1 &amp; 0 &amp; \cdots &amp; 0 \\0 &amp; \lambda_i &amp; 1 &amp; \cdots &amp; 0 \\0 &amp; 0 &amp; \lambda_i &amp; \cdots &amp; 0 \\\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; 1 \\0 &amp; 0 &amp; 0 &amp; \cdots &amp; \lambda_i\end{bmatrix}\]</span><br>称 <span class="math inline">\(\boldsymbol{J}\)</span> 为矩阵 <span class="math inline">\(\boldsymbol{A}\)</span> 的<strong>Jordan标准型</strong>。</p><h3 id="计算-jordan-标准型的步骤">计算 Jordan 标准型的步骤</h3><ol type="1"><li><p><strong>求矩阵 <span class="math inline">\(\boldsymbol{A}\)</span>的初等因子组</strong>，设为：<br><span class="math display">\[ (\lambda - \lambda_1)^{m_1}, (\lambda -\lambda_2)^{m_2}, \dots, (\lambda - \lambda_s)^{m_s} \]</span><br>且 <span class="math inline">\(m_1 + m_2 + \cdots + m_s =n\)</span>。</p></li><li><p><strong>写出每个初等因子对应的 Jordan 块</strong>。</p></li><li><p><strong>构造 Jordan 标准型</strong>：<br><span class="math display">\[ \boldsymbol{J} = \begin{bmatrix}\boldsymbol{J}_1(\lambda_1) &amp; &amp; &amp; \\&amp; \boldsymbol{J}_2(\lambda_2) &amp; &amp; \\&amp; &amp; \ddots &amp; \\&amp; &amp; &amp; \boldsymbol{J}_s(\lambda_s)\end{bmatrix}\]</span></p></li></ol><h3 id="计算工具">计算工具</h3><p>在实际计算中，Python 提供了强大的 <code>NumPy</code> 和<code>SymPy</code> 库，可以用于快速计算 Jordan 标准型。</p>]]></content>
    
    
    <summary type="html">《矩阵理论与方法》课程学习笔记</summary>
    
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/categories/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/tags/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>矩阵论：欧式空间与线性变换介绍</title>
    <link href="https://yokumii.github.io/blog/2025/01/12/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E6%AC%A7%E5%BC%8F%E7%A9%BA%E9%97%B4%E4%B8%8E%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2%E4%BB%8B%E7%BB%8D/"/>
    <id>https://yokumii.github.io/blog/2025/01/12/%E7%9F%A9%E9%98%B5%E8%AE%BA%EF%BC%9A%E6%AC%A7%E5%BC%8F%E7%A9%BA%E9%97%B4%E4%B8%8E%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2%E4%BB%8B%E7%BB%8D/</id>
    <published>2025-01-12T07:45:00.000Z</published>
    <updated>2025-03-21T07:58:30.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="欧式空间与线性变换介绍">欧式空间与线性变换介绍</h2><p>欧式（Euclid）空间作为一种特殊的线性空间，我们先引入线性空间的概念。</p><h3 id="定义-1-线性空间">定义 1: 线性空间</h3><p>设 <span class="math inline">\(V\)</span> 是一个非空集合，它的元素用<span class="math inline">\(x, y, z\)</span> 等表示，称为向量；<span class="math inline">\(K\)</span> 是一个数域，它的元素用 <span class="math inline">\(k, l, m\)</span> 表示，如果 <span class="math inline">\(V\)</span> 满足以下条件：</p><ol type="1"><li>在 <span class="math inline">\(V\)</span> 中定义一个加法运算，即当<span class="math inline">\(x,y\in V\)</span> 时，有唯一的和 <span class="math inline">\(x + y\in V\)</span>，且满足以下性质：<ul><li><strong>结合律</strong>: <span class="math inline">\(x + (y + z) =(x + y) + z\)</span>;</li><li><strong>交换律</strong>: <span class="math inline">\(x + y = y +x\)</span>;</li><li><strong>零元素存在性</strong>: <span class="math inline">\(\exists0, s.t. x + 0 = x\)</span>;</li><li><strong>负元素存在性</strong>: <span class="math inline">\(\forallx\in V,\exists y\in V, s.t.x + y = 0\)</span>，记 <span class="math inline">\(y = -x\)</span>;</li></ul></li><li>在 <span class="math inline">\(V\)</span> 中定义数乘运算，即当 <span class="math inline">\(x\in V,k \in K\)</span> 时，有唯一的乘积 <span class="math inline">\(kx\in V\)</span>，且满足以下性质：<ul><li><strong>因子分配律</strong>: <span class="math inline">\(k(x+y) = kx+ ky\)</span>;</li><li><strong>分配律</strong>: <span class="math inline">\((k+l)x = kx +lx\)</span>;</li><li><strong>结合律</strong>: <span class="math inline">\(k(lx) =(kl)x\)</span>;</li><li><strong>中性元</strong>: <span class="math inline">\(1 x =x\)</span>;</li></ul></li></ol><p>则称 <span class="math inline">\(V\)</span> 是数域 <span class="math inline">\(K\)</span> 上的线性空间。</p><p>定义中的 8 条性质非常重要。如果对于数域 <span class="math inline">\(K\)</span>，向量空间 <span class="math inline">\(V\)</span>，设加群 <span class="math inline">\((V,+)\)</span>（<span class="math inline">\(+\)</span> 为 <span class="math inline">\(V\)</span>上满足交换律的运算），不难验证其满足群的定义。定义 <span class="math inline">\(K \times V \rightarrow V: (k, \alpha) \rightarrowk\alpha\)</span>（即 <span class="math inline">\(V\)</span>上的数乘运算），可以验证 <span class="math inline">\(V\)</span> 是一个<span class="math inline">\(K\)</span>-模。即，线性空间是一类特殊的模。</p><p>为借助数量运算以实现向量的运算，还要引入向量的坐标。</p><h3 id="定义-2-线性空间的基">定义 2: 线性空间的基</h3><p>设 <span class="math inline">\(V\)</span> 是数域 <span class="math inline">\(K\)</span> 上的线性空间，<span class="math inline">\(x_1,x_2,\cdots,x_r\in V\)</span>，如果它满足：</p><ol type="1"><li><span class="math inline">\(x_1,x_2,\cdots,x_r\)</span>线性无关;</li><li><span class="math inline">\(\forall x \in V\)</span> 都是 <span class="math inline">\(x_1,x_2,\cdots,x_r\)</span> 的线性组合;</li></ol><p>则称 <span class="math inline">\(x_1,x_2,\cdots,x_r\)</span> 是 <span class="math inline">\(V\)</span> 的一个 <strong>基</strong>，称 <span class="math inline">\(x_i(i=1,2,\cdots,r)\)</span> 为<strong>基向量</strong>。</p><h3 id="定义-3-坐标系">定义 3: 坐标系</h3><p>称线性空间 <span class="math inline">\(V^n\)</span> 上的一个基 <span class="math inline">\(x_1, x_2, \cdots, x_n\)</span> 为 <span class="math inline">\(V^n\)</span> 的一个<strong>坐标系</strong>。设向量 <span class="math inline">\(x \inV^n\)</span>，它在该基下的线性表示式为</p><p><span class="math display">\[x = \xi_1x_1 + \xi_2x_2 + \cdots + \xi_nx_n\]</span></p><p>则称 <span class="math inline">\(\xi_1,\xi_2,\cdots,\xi_n\)</span> 为<span class="math inline">\(x\)</span> 在该基下的 <strong>坐标</strong>或 <strong>分量</strong>，记为</p><p><span class="math display">\[(\xi_1,\xi_2,\cdots,\xi_n)^\top\]</span></p><p>显然，线性空间 <span class="math inline">\(V^n\)</span>存在多个不同的基，对应多个不同的坐标系，我们希望研究当基改变时，向量的坐标如何改变。</p><h3 id="基变换">基变换</h3><p>首先介绍 <strong>基变换</strong>，即 <span class="math inline">\(V^n\)</span> 的一个基 <span class="math inline">\(\boldsymbol{X} = (\boldsymbol{x}_1,  \boldsymbol{x}_2, \cdots,  \boldsymbol{x}_n)\)</span>变为另一个基 <span class="math inline">\(\boldsymbol{Y} = (\boldsymbol{y}_1,  \boldsymbol{y}_2,\cdots,  \boldsymbol{y}_n)\)</span>。</p><p>由基的定义可知：</p><p><span class="math display">\[\boldsymbol{y}_i = c_{1i} \boldsymbol{x}_1 + c_{2i}  \boldsymbol{x}_2 +\cdots + c_{1n}  \boldsymbol{x}_n(i = 1,2,\cdots,n)\]</span></p><p>上式可以写成矩阵乘法形式：</p><p><span class="math display">\[( \boldsymbol{y}_1,  \boldsymbol{y}_2, \cdots,  \boldsymbol{y}_n) =( \boldsymbol{x}_1,  \boldsymbol{x}_2, \cdots,  \boldsymbol{x}_n)\boldsymbol{C}\tag{2.5.1}\]</span></p><p>其中矩阵</p><p><span class="math display">\[\boldsymbol{C} = \begin{bmatrix}c_{11} &amp; c_{12} &amp; \cdots &amp; c_{1n}\\c_{21} &amp; c_{22} &amp; \cdots &amp; c_{2n}\\\vdots &amp; \vdots &amp; &amp; \vdots\\c_{n1} &amp; c_{n2} &amp; \cdots &amp; c_{nn}\end{bmatrix}\]</span></p><p>称为基变换的 <strong>过渡矩阵</strong>，式 (2.5.1) 称为<strong>基变换公式</strong>。</p><p>显然，过渡矩阵是可逆矩阵，因为新基能变换为旧基。</p><h2 id="内积与欧式空间">内积与欧式空间</h2><p>在线性空间中，向量的基本运算仅为线性运算。例如，在熟悉的二维或三维向量空间中，我们发现向量的模长、向量间的夹角等度量概念未能被线性空间直接表达。因此，我们引入<strong>内积</strong>与<strong>内积空间</strong>的概念。</p><h3 id="内积的定义">内积的定义</h3><p><strong>定义</strong><br>设 <span class="math inline">\(V\)</span> 是实数域 <span class="math inline">\(\mathbb{R}\)</span> 上的线性空间，若对 <span class="math inline">\(\forall x,y \inV\)</span>，按照某种规则定义一个实数 <span class="math inline">\((x,y)\)</span>，满足以下条件：</p><ol type="1"><li><strong>交换律</strong>：<span class="math inline">\((x,y) =(y,x)\)</span>；</li><li><strong>分配律</strong>：<span class="math inline">\((x,y+z) = (x,y)+ (x,z)\)</span>；</li><li><strong>齐次性</strong>：<span class="math inline">\((kx,y) = k(x,y)= (x,ky), \forall k\in \mathbb{R}\)</span>；</li><li><strong>非负性</strong>：<span class="math inline">\((x,x) \geq0\)</span>，且 <span class="math inline">\((x,x) = 0 \iff x =0\)</span>。</li></ol><p>则称 <span class="math inline">\((x,y)\)</span> 为向量 <span class="math inline">\(x,y\)</span> 的<strong>内积</strong>，称 <span class="math inline">\(V\)</span> 为<strong>欧式空间</strong>（EuclideanSpace）。</p><h3 id="内积的性质">内积的性质</h3><p>内积具有以下基本性质：</p><ul><li><span class="math inline">\(( \boldsymbol{x}, k \boldsymbol{y}) = k(\boldsymbol{x}, \boldsymbol{y})\)</span>；</li><li><span class="math inline">\(( \boldsymbol{x}, \boldsymbol{0}) =0\)</span>。</li></ul><h3 id="向量的模长">向量的模长</h3><p>在欧式空间中，我们可以定义向量的<strong>长度</strong>（模、范数）如下：</p><p><strong>定义</strong><br>在欧式空间 <span class="math inline">\(V\)</span> 中，非负实数<br><span class="math display">\[\left|  \boldsymbol{x} \right| = \sqrt{( \boldsymbol{x},\boldsymbol{x})}\]</span><br>称为向量 <span class="math inline">\(\boldsymbol{x}\)</span>的<strong>长度</strong>（或<strong>2-范数</strong>，下一节将介绍）。</p><p><strong>单位向量与单位化</strong><br>在二维或三维向量空间中，通常选取 <span class="math inline">\((1,0,0)\)</span> 等为坐标轴，这些长度为 <span class="math inline">\(1\)</span>的向量称为<strong>单位向量</strong>。如果 <span class="math inline">\(\boldsymbol{x} \neq0\)</span>，可以通过<strong>单位化（规范化）</strong>得到单位向量：<br><span class="math display">\[\boldsymbol{x}_0 = \frac{\boldsymbol{x}}{\left|  \boldsymbol{x} \right|}\]</span></p><h3 id="向量夹角">向量夹角</h3><p>在低维空间中，向量的夹角概念较直观。为了在欧式空间中定义向量夹角，我们利用<strong>Cauchy–Schwarz 不等式</strong>：<br><span class="math display">\[\left| \frac{( \boldsymbol{x},\boldsymbol{y})}{\left|  \boldsymbol{x}\right|\left|  \boldsymbol{y}\right|}\right| \leq 1\]</span><br>进而定义两个非零向量 <span class="math inline">\(\boldsymbol{x}\)</span>和 <span class="math inline">\(\boldsymbol{y}\)</span> 的夹角 <span class="math inline">\(\left\langle  \boldsymbol{x},  \boldsymbol{y}\right\rangle\)</span> 的<strong>余弦值</strong>：<br><span class="math display">\[\cos \left\langle  \boldsymbol{x},  \boldsymbol{y} \right\rangle =\frac{( \boldsymbol{x}, \boldsymbol{y})}{\left|  \boldsymbol{x} \right|\left|  \boldsymbol{y} \right|}\]</span></p><h3 id="向量正交">向量正交</h3><p><strong>定义</strong><br>若欧式空间中的两个向量 <span class="math inline">\(\boldsymbol{x}\)</span> 和 <span class="math inline">\(\boldsymbol{y}\)</span> 满足：<br><span class="math display">\[(x,y) = 0\]</span><br>则称它们<strong>正交（垂直）</strong>。</p><p><strong>定理</strong><br>在欧式空间中，若向量组 <span class="math inline">\(\{x_1, x_2, \dots,x_n\}\)</span> 互相正交，则它们必然线性无关。</p><h3 id="正交基与标准正交基">正交基与标准正交基</h3><p><strong>定义</strong><br>在欧式空间 <span class="math inline">\(V^n\)</span> 中，由 <span class="math inline">\(n\)</span>个非零向量组成的<strong>正交向量组</strong>称为 <span class="math inline">\(V^n\)</span>的<strong>正交基</strong>。若正交基中的向量均为单位向量，则称为<strong>标准正交基</strong>。</p><h3 id="schmidt-正交化">Schmidt 正交化</h3><p>如何从一组普通的基构造标准正交基？一种方法是<strong>Schmidt正交化法（Gram-Schmidt 过程）</strong>。</p><h4 id="施密特正交化步骤">施密特正交化步骤</h4><p>给定线性无关的向量组 <span class="math inline">\(\{\boldsymbol{v}_1,  \boldsymbol{v}_2,\dots,  \boldsymbol{v}_n\}\)</span>，施密特正交化的目标是构造正交向量组<span class="math inline">\(\{ \boldsymbol{u}_1,  \boldsymbol{u}_2,\dots,  \boldsymbol{u}_n\}\)</span>：</p><ol type="1"><li><p><strong>初始向量处理</strong>：<br>令第一个正交向量：<br><span class="math display">\[\boldsymbol{u}_1 = \boldsymbol{v}_1\]</span><br>由于 <span class="math inline">\(\boldsymbol{v}_1 \neq 0\)</span>，则<span class="math inline">\(\boldsymbol{u}_1 \neq 0\)</span>。</p></li><li><p><strong>构造第 <span class="math inline">\(i\)</span>个向量的正交化</strong>：<br>从第二个向量开始，为了从 <span class="math inline">\(\boldsymbol{v}_i\)</span> 中去掉前面向量 <span class="math inline">\(\boldsymbol{u}_1, \dots,\boldsymbol{u}_{i-1}\)</span> 的分量，定义投影：<br><span class="math display">\[\frac{( \boldsymbol{v}_i,  \boldsymbol{u}_k)}{(\boldsymbol{u}_k,  \boldsymbol{u}_k)}  \boldsymbol{u}_k\]</span><br>表示 <span class="math inline">\(\boldsymbol{v}_i\)</span> 在 <span class="math inline">\(\boldsymbol{u}_k\)</span> 上的投影。</p><p>去掉与 <span class="math inline">\(\boldsymbol{u}_1, \dots,\boldsymbol{u}_{i-1}\)</span> 重叠的部分，得到：<br><span class="math display">\[\boldsymbol{u}_i = \boldsymbol{v}_i - \sum_{k=1}^{i-1} \frac{(\boldsymbol{v}_i,  \boldsymbol{u}_k)}{(\boldsymbol{u}_k,  \boldsymbol{u}_k)}  \boldsymbol{u}_k\]</span></p></li><li><p><strong>归一化</strong>：<br>将每个 <span class="math inline">\(\boldsymbol{u}_i\)</span>归一化为单位向量：<br><span class="math display">\[\boldsymbol{e}_i = \frac{ \boldsymbol{u}_i}{\left|\boldsymbol{u}_i\right|}\]</span></p></li></ol><p>最终得到一组<strong>正交归一向量</strong>：<br><span class="math display">\[\{ \boldsymbol{e}_1,  \boldsymbol{e}_2, \dots,  \boldsymbol{e}_n\}\]</span></p><p>有了以上的铺垫，接下来我们正式引入线性变换的概念。线性变换提供了一种在线性空间之间进行映射的框架，其本质在于保持向量空间中的线性结构。通过线性变换，我们可以将一个线性空间的元素映射到另一个线性空间中，并保持加法和标量乘法的运算法则。</p><h3 id="线性变换">线性变换</h3><p>首先，我们引入 <strong>变换</strong> 的概念如下：</p><p><strong>定义 4:</strong> 设 <span class="math inline">\(V\)</span>是属于 <span class="math inline">\(K\)</span> 上的线性空间，<span class="math inline">\(T\)</span> 是 <span class="math inline">\(V\)</span> 到自身的一个映射，使对任意向量 <span class="math inline">\(x\in V\)</span>，<span class="math inline">\(V\)</span> 中都有唯一向量 <span class="math inline">\(y\)</span> 与之对应，则称 <span class="math inline">\(T\)</span> 是 <span class="math inline">\(V\)</span> 的一个 <strong>变换</strong> 或<strong>算子</strong>，记为 <span class="math inline">\(Tx =y\)</span>，称 <span class="math inline">\(y\)</span> 为 <span class="math inline">\(x\)</span> 在 <span class="math inline">\(T\)</span> 下的象，<span class="math inline">\(x\)</span> 是 <span class="math inline">\(y\)</span> 的原象。</p><p><strong>定义 5:</strong> 如果数域 <span class="math inline">\(K\)</span> 上的线性空间 <span class="math inline">\(V\)</span> 的一个变换 <span class="math inline">\(T\)</span> 具有以下性质：</p><p><span class="math display">\[T(kx + ly) = k(Tx) + l(Ty)\]</span></p><p>其中，<span class="math inline">\(x,y \in V,k,l\in K\)</span>，则称<span class="math inline">\(T\)</span> 为 <span class="math inline">\(V\)</span> 的一个 <strong>线性变换</strong> 或<strong>线性算子</strong>。</p><h4 id="线性变换的性质">线性变换的性质</h4><p>不难验证，线性变换有如下性质，且线性空间 <span class="math inline">\(V\)</span>上所有的线性变换的集合，在所论的线性运算下，构成一个新的线性空间，记为<span class="math inline">\(\text{Hom}(V, V)\)</span>，称为线性空间<span class="math inline">\(V\)</span> 的 <strong>同态</strong>。</p><ol type="1"><li><strong>线性变换的加法</strong>：<span class="math inline">\((T_1+T_2)x = T_1x+T_2x, \forall x\in V\)</span>，和仍为线性变换。<ul><li><span class="math inline">\(T_1 + T_2 = T_2 + T_1\)</span>;</li><li><span class="math inline">\((T_1 + T_2) + T_3 = T_1 + (T_2 +T_3)\)</span>;</li><li><span class="math inline">\(T + T_0 = T\)</span>;</li><li><span class="math inline">\(T + (-T) = T_0\)</span>;</li><li>线性变换 <span class="math inline">\(T\)</span> 的<strong>负变换</strong> <span class="math inline">\(-T\)</span> 定义为：<span class="math display">\[(-T)x = -(Tx), \forall x\in V\]</span></li></ul></li><li><strong>线性变换的数乘</strong>：<span class="math inline">\((kT)x =k(Tx), \forall x\in V\)</span>，线性变换的数乘仍是线性变换。<ul><li><span class="math inline">\(k(T_1 + T_2) = kT_1 +kT_2\)</span>;</li><li><span class="math inline">\((k+l)T = kT + lT\)</span>;</li><li><span class="math inline">\((kl)T = k(lT)\)</span>;</li><li><span class="math inline">\(1 T = T\)</span>;</li></ul></li></ol><h4 id="线性变换的矩阵表示">线性变换的矩阵表示</h4><p>诸如二维平面上的旋转、微分和积分等都是线性变换。考虑到有限维线性空间的向量可以用坐标表示出来，进一步考虑则可以通过坐标把线性变换用矩阵表示出来，从而可以把抽象的变换转化成具体的矩阵来处理。故引入线性变换的<strong>矩阵表示</strong>。</p><p>设 <span class="math inline">\(T\)</span> 是线性空间 <span class="math inline">\(V^n\)</span> 的线性变换，<span class="math inline">\(x \in V^n\)</span>，且 <span class="math inline">\(x_1, x_2, \dots, x_n\)</span> 是 <span class="math inline">\(V^n\)</span> 的一个基，则有：<br><span class="math display">\[x = a_1x_1 + a_2x_2 + \dots + a_nx_n\]</span><br><span class="math display">\[Tx = a_1(Tx_1) + a_2(Tx_2) + \dots + a_n(Tx_n)\]</span></p><p>这表明，<span class="math inline">\(V^n\)</span> 的任一向量 <span class="math inline">\(x\)</span> 的像可以由基像组 <span class="math inline">\(Tx_1,Tx_2,\dots,Tx_n\)</span>唯一确定，因为基像组仍 <span class="math inline">\(\inV^n\)</span>，所以有：<br><span class="math display">\[\left.\begin{matrix}Tx_1 = a_{11}x_1 + a_{21}x_2 + \dots + a_{n1}x_n\\Tx_2 = a_{12}x_1 + a_{22}x_2 + \dots + a_{n2}x_n\\\cdots \\Tx_n = a_{1n}x_1 + a_{2n}x_2 + \dots + a_{nn}x_n\\\end{matrix}\right\}\tag{2.6.1}\]</span><br>即：<br><span class="math display">\[Tx_i = \sum_{j=1}^{n} a_{ji}x_j, \quad i = 1,2,\dots,n\]</span><br>用矩阵乘法表示式 (2.6.1) 为：<br><span class="math display">\[T(x_1,x_2,\dots,x_n) = (Tx_1,Tx_2,\dots,Tx_n) = (x_1,x_2,\dots,x_n)\boldsymbol{A}\tag{2.6.2}\]</span><br>其中：<br><span class="math display">\[\boldsymbol{A} = \begin{bmatrix}a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n}\\a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n}\\\cdots &amp; \cdots &amp; &amp; \cdots\\a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn}\\\end{bmatrix}\]</span><br>即矩阵 <span class="math inline">\(\boldsymbol{A}\)</span> 的第 <span class="math inline">\(i\)</span> 列为 <span class="math inline">\(Tx_i\)</span> 的坐标。</p><p><strong>定义 3</strong> 式 (2.6.2) 中的矩阵 <span class="math inline">\(\boldsymbol{A}\)</span> 称为 <span class="math inline">\(T\)</span> 在 <span class="math inline">\(V^n\)</span> 的基 <span class="math inline">\(x_1,x_2, \dots, x_n\)</span> 下的矩阵，称 <span class="math inline">\(\boldsymbol{A}\)</span> 为线性变换 <span class="math inline">\(T\)</span> 的矩阵表示。</p><h4 id="特殊的线性变换">特殊的线性变换</h4><ol type="1"><li><strong>零变换</strong>：<span class="math inline">\(T_0(x) =\boldsymbol{0}, \forall x\in V\)</span></li><li><strong>恒等变换</strong>：<span class="math inline">\(T_1(x) = x,\forall x\in V\)</span></li></ol><h3 id="正交变换">正交变换</h3><p><strong>定义 4</strong> 设 <span class="math inline">\(V\)</span>为欧式空间，<span class="math inline">\(T\)</span> 是 <span class="math inline">\(V\)</span> 上的一个线性变换，如果 <span class="math inline">\(T\)</span> 保持 <span class="math inline">\(V\)</span> 中任意向量 <span class="math inline">\(\boldsymbol{x}\)</span> 的长度不变，则有：<br><span class="math display">\[(T \boldsymbol{x},T \boldsymbol{x}) = ( \boldsymbol{x}, \boldsymbol{x})\]</span><br>那么称 <span class="math inline">\(T\)</span> 是 <span class="math inline">\(V\)</span> 的一个 <strong>正交变换</strong>。</p><p><strong>定理 1</strong> 欧式空间上的线性变换是正交变换 <span class="math inline">\(\Leftrightarrow\)</span>它对于标准正交基的矩阵是正交矩阵。</p><h3 id="对称变换">对称变换</h3><p><strong>定义 5</strong> 设 <span class="math inline">\(V\)</span>为欧式空间，<span class="math inline">\(T\)</span> 是 <span class="math inline">\(V\)</span> 上的一个线性变换，且对 <span class="math inline">\(V\)</span> 中任意两个向量 <span class="math inline">\(\boldsymbol{x},\boldsymbol{y}\)</span>，都有：<br><span class="math display">\[(T \boldsymbol{x}, \boldsymbol{y}) = ( \boldsymbol{x},T \boldsymbol{y})\]</span><br>那么称 <span class="math inline">\(T\)</span> 是 <span class="math inline">\(V\)</span> 的一个 <strong>对称变换</strong>。</p><p><strong>定理 2</strong> 欧式空间上的线性变换是对称变换 <span class="math inline">\(\Leftrightarrow\)</span>它对于标准正交基的矩阵是实对称矩阵。</p><p>对于线性变换的进一步求解，将在下一节中叙述。</p>]]></content>
    
    
    <summary type="html">《矩阵理论与方法》课程学习笔记</summary>
    
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/categories/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
    
    <category term="矩阵论" scheme="https://yokumii.github.io/blog/tags/%E7%9F%A9%E9%98%B5%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>数字逻辑与数字系统相关记背知识点</title>
    <link href="https://yokumii.github.io/blog/2025/01/08/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E4%B8%8E%E6%95%B0%E5%AD%97%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E8%AE%B0%E8%83%8C%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://yokumii.github.io/blog/2025/01/08/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E4%B8%8E%E6%95%B0%E5%AD%97%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E8%AE%B0%E8%83%8C%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2025-01-08T14:10:00.000Z</published>
    <updated>2025-01-09T02:15:21.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="verilog">Verilog</h1><h2 id="标识符">标识符</h2><ul><li>命名规则与C语言相同；</li><li>关键字必须小写；</li><li><strong>存盘文件名应与设计的模块名相同</strong>；</li></ul><h2 id="概述">概述</h2><ul><li><strong>四值逻辑</strong>：0、1、X(不定)、Z(高阻)；</li><li>模块由两部分构成：<strong>描述接口、描述功能</strong>；<img src="1.png"></li></ul><h2 id="数据类型">数据类型</h2><ul><li>数据I/O类型；<img src="2.png"></li><li><strong>always中被赋值的信号必须用reg类型的变量</strong>；</li><li>输入和双向端口不能声明为reg型；</li><li>parameter：符号常量，其定义只在本模块内有效；</li></ul><h2 id="运算符">运算符</h2><ul><li>位连接运算符{ }，将两个或多个信号的某些位拼接起来。<strong>不允许连接非定长常数</strong>；</li><li>自动调整位宽。运算表达式结果的长度由最长的操作数决定；</li><li>操作结果的长度: 由赋值左端目标长度决定；</li></ul><h2 id="功能描述语句">功能描述语句</h2><ul><li><strong>assign , always , 元件例化，是并发语句</strong>；</li></ul><h3 id="assign">assign</h3><p><img src="3.png"></p><h3 id="always">always</h3><p><img src="4.png"></p><h3 id="敏感信号表">敏感信号表</h3><ul><li>敏感信号的变化才能启动进程；</li><li>组合逻辑中，所有输入都作为敏感信号,否则仿真结果和综合结果会不一致；</li></ul><h3 id="注意点">注意点</h3><ul><li><strong>不要在一个aways 中同时使用= ，&lt;=赋值</strong>；</li><li>if、case、for 语句必需在 always 块中；</li></ul><h2 id="设计组合电路">设计组合电路</h2><h3 id="要求">要求</h3><p><img src="5.png"></p><h2 id="设计时序电路">设计时序电路</h2><h4 id="要求-1">要求</h4><p><img src="6.png"></p><h4 id="注意点-1">注意点</h4><ul><li><strong>异步信号必须放在敏感信号表中；必须都是边沿</strong>；</li><li>锁存器的所有输入都放在敏感信号表中；锁存器敏感信号都是电平。</li></ul><h2 id="元件例化">元件例化</h2><ul><li>一个元件是一段结构完整的 module 模块；</li><li><strong>不能在always语句内部引用子模块</strong>；</li></ul><h1 id="存储系统">存储系统</h1><h2 id="寄存器堆">寄存器堆</h2><ul><li>由多个寄存器构成的集合。常用于数据寄存。有三组外部信号：地址（短地址）、数据、读/写控制；</li><li>多端口寄存器；</li><li>可同时读、写， 可同时输出两个数；</li></ul><h2 id="寄存器队列">寄存器队列</h2><ul><li>FIFO（First In First Out，先进先出），用若干个移位寄存器构建的小型存储部件。用于指令队列；</li><li>无地址线，双端口存储器，可同时读写；</li><li>FIFO用于两个不同系统通信、数据采集传送、串并转换；</li></ul><h2 id="寄存器栈">寄存器栈</h2><ul><li>LIFO（ Last In First Out，后进先出）方式，用若干个双向移位寄存器构建的小型存储部件；</li><li>用于减少函数调用时对内存的访问；</li></ul><h2 id="ram">RAM</h2><ul><li>特性：能读能写、易失；</li><li>作用：存放编写的程序和数据</li><li>逻辑结构：<img src="7.png"></li><li><strong>逻辑结构包括：地址译码器、存储矩阵和读写控制电路</strong>；</li><li>分为SRAM(Static RAM)和DRAM(Dynamic RAM)；<img src="8.png"><img src="9.png"><img src="10.png"></li></ul><h2 id="rom">ROM</h2><ul><li>ROM的逻辑构成＝<strong>与门阵列（地址译码器）＋或门阵列（存储矩阵）</strong>；</li><li>分为PROM、EPROM等；</li></ul><h2 id="存储器容量计算">存储器容量计算</h2><ul><li>单元数<span class="math inline">\(\times\)</span>每单元的位数；即字数<span class="math inline">\(\times\)</span>字长；</li></ul><h1 id="可编程逻辑器件pld">可编程逻辑器件PLD</h1><h2 id="概述-1">概述</h2><ul><li>现代数字系统由三种积木块构成：CPU＋PLD＋RAM；</li></ul><h2 id="编程部位">编程部位</h2><p><img src="11.png"></p><h2 id="编程方法">编程方法</h2><p><img src="12.png"></p><h2 id="cpld">CPLD</h2><p><img src="13.png"></p><h2 id="fpga">FPGA</h2><p><img src="14.png"><img src="15.png"></p><h3 id="在系统可编程isp">在系统可编程ISP</h3><ul><li>传统的PLD在用于生产时，是先编程后装配；</li><li><strong>isp则可以在装配之前、装配过程中和装配之后再编程</strong>；</li></ul><h1 id="数字系统">数字系统</h1><h2 id="概述-2">概述</h2><ul><li>具有存储、传输、处理信息能力的逻辑系统集合；</li><li>由“<strong>数据通路+控制逻辑</strong>”构成，其工作具有周期性；</li><li><strong>数字系统与逻辑功能部件的区别：有无控制器</strong>；</li><li>在各部件之间传送信息的公共通路，称为<strong>数据通路</strong>。由总线连接的运算单元（组合电路）和存储单元构成；</li></ul><h2 id="总线">总线</h2><p><img src="16.png"></p><h2 id="设计方法">设计方法</h2><ul><li>自顶向下方法（from top to down）：是将规模较大的系统从逻辑上划分为控制电路＋受控电路；</li><li>步骤：<ol type="1"><li>划分子系统、子模块；</li><li>数据通路；</li><li>用数学语言(工具)，描述控制器的控制过程；</li><li>设计控制器；</li><li>设计数据处理器；</li></ol></li></ul><h1 id="end">END</h1><blockquote><p>希望别出太偏捏</p></blockquote>]]></content>
    
    
    <summary type="html">数字逻辑与数字系统相关记背知识点</summary>
    
    
    
    <category term="计算机基础" scheme="https://yokumii.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="硬件" scheme="https://yokumii.github.io/blog/tags/%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="计算机基础" scheme="https://yokumii.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>图的染色问题</title>
    <link href="https://yokumii.github.io/blog/2025/01/07/%E5%9B%BE%E7%9A%84%E6%9F%93%E8%89%B2%E9%97%AE%E9%A2%98/"/>
    <id>https://yokumii.github.io/blog/2025/01/07/%E5%9B%BE%E7%9A%84%E6%9F%93%E8%89%B2%E9%97%AE%E9%A2%98/</id>
    <published>2025-01-07T07:04:00.000Z</published>
    <updated>2025-01-07T07:50:25.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关定义概述">相关定义概述</h1><ul><li><strong><span class="math inline">\(\chi(G)\)</span></strong>：图的着色数，the chromatic number of G；</li><li>有点着色，边着色，面着色几种类型；</li><li><span class="math inline">\(P_G(k)\)</span>：色多项式，表示图<span class="math inline">\(G\)</span>用<span class="math inline">\(k\)</span>种颜色染色的方法数；</li></ul><h1 id="常见图的点着色数">常见图的点着色数</h1><blockquote><p>零图（无边只有顶点）：1；<br>完全图<span class="math inline">\(K_n\)</span>：n；<br>非零二部图：2；</p></blockquote><blockquote><p>定理：简单图的点着色数小于等于最大度数 + 1；</p></blockquote><h1 id="非连通图的着色">非连通图的着色</h1><blockquote><p>如果<span class="math inline">\(G\)</span>为非连通图，那么它的色多项式等于它的所有连通分量的乘积；</p></blockquote><h1 id="商图">商图</h1><p>把图的顶点按照某种等价类规则划分，直观上就是把两个点捏在一起；<img src="商图.png"></p><h1 id="构建色多项式">构建色多项式</h1><h2 id="法一尝试通过删边得到好求的色多项式">法一、尝试通过删边得到好求的色多项式</h2><p><img src="色多项式构建定理.png"></p><h2 id="法二韦尔奇鲍威尔法">法二、韦尔奇鲍威尔法</h2><ol type="1"><li>将顶点按照度数递减排序；</li><li>用第一种颜色对度数最大的顶点以及和该点不相邻的所有顶点进行染色；</li><li>对剩余顶点重复上述步骤；</li></ol><h2 id="法三递推构建色多项式">法三、递推构建色多项式</h2><p><img src="色多项式递推构建.png"></p><h1 id="色多项式性质">色多项式性质</h1><p><img src="色多项式性质.png"></p>]]></content>
    
    
    <summary type="html">图的染色</summary>
    
    
    
    <category term="图论" scheme="https://yokumii.github.io/blog/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://yokumii.github.io/blog/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP Exercises</title>
    <link href="https://yokumii.github.io/blog/2025/01/06/CSAPP%20Exercises/"/>
    <id>https://yokumii.github.io/blog/2025/01/06/CSAPP%20Exercises/</id>
    <published>2025-01-06T08:46:00.000Z</published>
    <updated>2025-01-06T14:53:45.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章">第二章</h1><h2 id="section">2.21</h2><p><img src="2.21.png"></p><h2 id="section-1">2.23</h2><p><img src="2.23.png"></p><h2 id="section-2">2.24</h2><p><img src="2.24.png"><br>两种类型都是先截断（对对应的无符号数取模操作），补码的话再进行一次U2T转化；</p><h2 id="section-3">2.33</h2><p><img src="2.33.png"></p><h2 id="section-4">2.40</h2><p><img src="2.40.png"></p><h2 id="section-5">2.44</h2><p><img src="2.44.png"><br>A. 反例：<span class="math inline">\(x = -1, x - 1= 0\)</span>；<br>B. <span class="math inline">\(x \&amp; 0111_2 \ne0111_2\)</span>当<span class="math inline">\(x\)</span>的低3位有1位等于0时即可成立，<span class="math inline">\(x &lt;&lt; 29 &lt; 0\)</span>将<span class="math inline">\(x\)</span>的低3位移到高三位。那么低三位如果全为1，后者为真，有0则前者为真，所以表达式恒为真；<br>C. 反例：<span class="math inline">\(x\)</span>为一个比较大的正数，平方后超过<span class="math inline">\(2^{31} - 1\)</span>；<br>D. 真：<span class="math inline">\(x = Tmin, -x =Tmin\)</span>，其余情况x如果是负数，那么-x一定是非负数；<br>E. 反例：<span class="math inline">\(x = Tmin, -x =Tmin\)</span>；<br>F.真：首先，比较类型为无符号数比较；加法都按补码进行运算，两边二进制结果显然一致；<br>G.真：<span class="math inline">\(-y = \sim y + 1\rightarrow \sim y = -y- 1\rightarrow x * \sim y + uy * ux = x * (-y + y - 1) =-x\)</span>；全部按二进制表示理解即可；</p><h2 id="section-6">2.45</h2><p><img src="2.45.png"></p><h2 id="section-7">2.47</h2><p><img src="2.47.png"></p><h2 id="section-8">2.54</h2><p><img src="2.54.png"><br>A. double范围和精度比int大；<br>B. 假，int转化为float可能会发生舍入；<br>C. 假，double转化为float会截断；<br>D. double范围和精度比float大；<br>E. 没毛病，只需改变符号位；<br>F. 两边都先转化为double类型再运算；<br>G. 没毛病，即使溢出到正无穷也是大于0；<br>H. 假，浮点数运算不满足结合律；</p><h2 id="section-9">2.60</h2><p><img src="2.60.png"></p><pre class="c"><code>unsigned replace_byte(unsigned x, int i, unsigned char b) &#123;    int i_times_8 = i &lt;&lt; 3; // 将字节单位转化为位；    unsigned mask = 0xFF &lt;&lt; i_times_8; // 将0xFF左移i个字节，得到第i个字节为FF，其余全为0的字符串；    // x &amp; ~mask 可以将x的第i个字节清0；    // b &lt;&lt; i_times_8 将b移动到第i个字节上；    // 两者进行或运算即可实现替换；    return (x &amp; ~mask) | (b &lt;&lt; i_times_8);&#125;</code></pre><h2 id="section-10">2.65</h2><p><img src="2.65.png"></p><pre class="c"><code>int odd_ones(unsigned x) &#123;    // x的高位和低位进行异或，如果1对0，得到1；如果1对1或0对0，得到0，那么高位有奇数个1还是偶数个1的信息就被转移到低位中；    x = x ^ (x &gt;&gt; 16); // 将x的高16位与低16位异或    x = x ^ (x &gt;&gt; 8);    x = x ^ (x &gt;&gt; 4);    x = x ^ (x &gt;&gt; 2);    x = x &amp; 1;    return x;&#125;</code></pre><h2 id="section-11">2.67</h2><p><img src="2.67.png"><br>A. C标准中，在32位机器上，移位32位是一种未定义的行为；<br>B. 很简单，先移31位，再移一位即可；</p><pre class="c"><code>int beyond_msb = 1 &lt;&lt; 32;// 改为int beyond_msb = set_msb &lt;&lt; 1;</code></pre><p>C. 类似地（16位机器上，移动n + 16位和移动n位效果一样）；</p><pre class="c"><code>int set_msb = 1 &lt;&lt; 15;int beyond_msb = set_msb &lt;&lt; 1;</code></pre><h2 id="section-12">2.68</h2><p><img src="2.68.png"></p><pre class="c"><code>int lower_one_mask(int n) &#123;    unsigned Part = -1; // 各位全1    unsigned len = sizeof(int) * 8 - n; // 右移位数    return (int)(Part &gt;&gt; len);&#125;</code></pre><h1 id="第三章">第三章</h1><h2 id="section-13">3.1</h2><p><img src="3.1.png"></p><h2 id="section-14">3.2</h2><p><img src="3.2.png"></p><pre class="asmx86"><code>movl %eax, (%rsp)movw (%rax), %dxmovb $0xFF, %blmovb (%rsp, %rdx, 4), %dlmovq (%rdx), %raxmovw %dx, (%rax)</code></pre><p>评价是别管Src和Dest，看哪个对涉及对寄存器取值了；</p><h2 id="section-15">3.3</h2><p><img src="3.3.png"><br>1.<strong>%ebx不能用来存放内存地址！！！</strong>（此题存了立即数0xF的在内存中的地址）；<br>2. %rax配movq，movl配%eax；<br>3. Src和Dest都在对内存进行引用；<br>4. %sl是什么东西；<br>5. 立即数不能作为Dest；<br>6. %rdx和mol不匹配；<br>7. %si配movw；</p><h2 id="section-16">3.4</h2><p><img src="3.4.png"></p><h2 id="section-17">3.5</h2><p><img src="3.5.png"></p><pre class="c"><code>void decode1(long *xp, long *yp, long *zp) &#123;    long x = *xp;    long y = *yp;    long z = *zp;    *yp = x;    *zp = y;    *xp = z;    return;&#125;</code></pre><h2 id="section-18">3.6</h2><p><img src="3.6.png"><br><strong>lea是直接取寄存器！！！</strong></p><h2 id="section-19">3.7</h2><p><img src="3.7.png"></p><h2 id="section-20">3.9</h2><p><img src="3.9.png"></p><h2 id="section-21">3.15</h2><p><img src="3.15.png"><br>A. <code>4003fc + 0x02 = 4003fe</code>；<br>B. <code>400431 + 0xf4 = 400425</code>；<br>C. ja:<code>400547</code>；pop指定的地址 + 0x02 =ja的跳转地址，所以pop:<code>400545</code>；<br>D. <code>4005ed + 0x ff ff ff 73 = 400560</code>；</p><h2 id="section-22">3.18</h2><p><img src="3.18.png"></p><h2 id="section-23">3.20</h2><p><img src="3.20.png"></p><h2 id="section-24">3.26</h2><p><img src="3.26.png"><br>A. 中间翻译法</p><pre class="c"><code>goto Test;Loop:    body;Test:    t = test;    if (t) goto Loop;end;</code></pre><ol start="2" type="A"><li></li></ol><pre class="c"><code>while (x != 0) &#123;    val = x ^ val;    x = x &gt;&gt; 1;&#125;</code></pre><p>C. 从一个无符号长整数<span class="math inline">\(x\)</span>的最高有效位开始，逐位移除最低有效位，直到剩下最后一个有效的非零位。然后检查该值的最低有效位是否为1，并返回结果。即判断<span class="math inline">\(x\)</span>的奇偶性；</p><h2 id="section-25">3.27</h2><p><img src="3.27.png"></p><pre class="c"><code>// Jump-to-middleinit:    int result = 1;    int i = 2;    goto test;loop:    result *= i;    i++;test:    if i &lt;= n:        goto loop;done;// guarded-doinit:    int result = 1;    int i = 2;    if (n &lt; 1) goto end;loop:    result *= i;    i++;    if (t) goto loop;end;</code></pre><h2 id="section-26">3.31</h2><p><img src="3.31.png"></p><h2 id="section-27">3.32</h2><p><img src="3.32.png"></p><h2 id="section-28">3.33</h2><p><img src="3.33.png"></p><h2 id="section-29">3.36</h2><p><img src="3.36.png"></p><h2 id="section-30">3.37</h2><p><img src="3.37.png"></p><h2 id="section-31">3.38</h2><p><img src="3.38.png"></p><h2 id="section-32">3.44</h2><p><img src="3.44.png"></p><table><thead><tr><th>P1</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>i</td><td>i</td><td>i</td><td>i</td><td>c</td><td>X</td><td>X</td><td>X</td></tr><tr><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td><td>15</td></tr><tr><td>j</td><td>j</td><td>j</td><td>j</td><td>d</td><td>X</td><td>X</td><td>X</td></tr></tbody></table><p>P1共占16个字节；</p><table><thead><tr><th>P2</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>i</td><td>i</td><td>i</td><td>i</td><td>c</td><td>d</td><td>X</td><td>X</td></tr><tr><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td><td>15</td></tr><tr><td>j</td><td>j</td><td>j</td><td>j</td><td>j</td><td>j</td><td>j</td><td>j</td></tr></tbody></table><p>P2共占16个字节；</p><table><thead><tr><th>P3</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>w[0]</td><td>w[0]</td><td>w[1]</td><td>w[1]</td><td>w[2]</td><td>w[2]</td><td>c[0]</td><td>c[1]</td></tr><tr><td>8</td><td>9</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>c[2]</td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>P3共占10个字节；</p><table><thead><tr><th>P4</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>w</td><td>w</td><td>w</td><td>w</td><td>w</td><td>w</td><td>w</td><td>w</td></tr><tr><td>8</td><td>9</td><td>10</td><td>...</td><td></td><td></td><td></td><td></td></tr><tr><td>w</td><td>w</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td></tr><tr><td>16</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td></tr></tbody></table><p>P4共占40个字节；</p><table><thead><tr><th>P5</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td></tr><tr><td>8</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>a</td><td>X</td><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td></tr><tr><td>16</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>a</td><td>a</td><td>a</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td></tr><tr><td>24</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>t</td><td>t</td><td>t</td><td>t</td><td>t</td><td>t</td><td>t</td><td>t</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>t</td><td>t</td><td>t</td><td>t</td><td>t</td><td>t</td><td>t</td><td>t</td></tr></tbody></table><p>P5共占40个字节；</p><h2 id="section-33">3.45</h2><p><img src="3.45.png"></p><table><thead><tr><th>rec</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>0</strong></td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td><strong>a</strong></td><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td></tr><tr><td><strong>8</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>b</strong></td><td>b</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>16</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>c</strong></td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td></tr><tr><td><strong>24</strong></td><td></td><td></td><td></td><td><strong>28</strong></td><td></td><td></td><td></td></tr><tr><td>d</td><td></td><td></td><td></td><td><strong>e</strong></td><td>e</td><td>e</td><td>e</td></tr><tr><td><strong>32</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>f</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>40</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>g</td><td>g</td><td>g</td><td>g</td><td>g</td><td>g</td><td>g</td><td>g</td></tr><tr><td><strong>48</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>h</strong></td><td>h</td><td>h</td><td>h</td><td>X</td><td>X</td><td>X</td><td>X</td></tr></tbody></table><p>rec共占56个字节；</p><table><thead><tr><th>rec'</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>0</strong></td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td><strong>a</strong></td><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td></tr><tr><td><strong>8</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>c</strong></td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td><td>c</td></tr><tr><td><strong>16</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>g</strong></td><td>g</td><td>g</td><td>g</td><td>g</td><td>g</td><td>g</td><td>g</td></tr><tr><td><strong>24</strong></td><td></td><td></td><td></td><td><strong>28</strong></td><td></td><td></td><td></td></tr><tr><td><strong>e</strong></td><td>e</td><td>e</td><td>e</td><td><strong>h</strong></td><td>h</td><td>h</td><td>h</td></tr><tr><td><strong>32</strong></td><td></td><td><strong>34</strong></td><td><strong>35</strong></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>b</strong></td><td>b</td><td><strong>d</strong></td><td><strong>f</strong></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>rec‘总共占40个字节；</p><h1 id="第七章">第七章</h1><h2 id="section-34">7.1</h2><p><img src="7.1.png"></p><h2 id="section-35">7.2</h2><p><img src="7.2.png"></p><h2 id="section-36">7.4</h2><p><img src="7.4.png"><br>A. <code>4004de + 1 = 4004df</code>（callq的机器码e8占一个字节）；<br>B. <code>0x 00 00 00 05</code>，注意小端法！！！</p><h2 id="section-37">7.5</h2><p><img src="7.5.png"><br>重定位条目包含了以下信息：<br>* R_X86_64_PC32表示采用PC相对寻址法；<br>* offset表示偏移量为0xa = 10；<br>* addend可以修正偏移量；<br><span class="math inline">\(r_{ptr} = 0x4004e8 - (0x4004d0 + 0xa) + (-4)= 10 = 0x0a\)</span>；<br>所以引用的值是0x 00 00 000a；在汇编代码中被更新为：<code>e8 0a 00 00 00</code>；</p><h1 id="第十章">第十章</h1><h2 id="section-38">10.1</h2><p><img src="10.1.png"></p><pre><code>fd2 = 3</code></pre><p>原因是<code>Close(fd1)</code>后，文件描述符被释放；</p><h2 id="section-39">10.2</h2><p><img src="10.2.png"></p><pre><code>c = f</code></pre><p>fd1读取一个字节后，文件位置确实++了，但fd1和fd2分两次打开，对应不同的描述符，从而对应不同的打开文件表，所以互不影响；</p><h2 id="section-40">10.3</h2><p><img src="10.3.png"></p><pre><code>c = o</code></pre><p>父子进程共享同一个打开文件表；</p><h2 id="section-41">10.5</h2><p><img src="10.5.png"></p><pre><code>c = o</code></pre><p>dup2将fd1重定向到fd2；</p><p>最后祝自己明天考试好运吧！</p>]]></content>
    
    
    <summary type="html">CSAPP 课后习题</summary>
    
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 16-io4</title>
    <link href="https://yokumii.github.io/blog/2025/01/05/CSAPP%2016-io4/"/>
    <id>https://yokumii.github.io/blog/2025/01/05/CSAPP%2016-io4/</id>
    <published>2025-01-05T12:49:00.000Z</published>
    <updated>2025-01-05T13:35:08.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="unixlinux-io">UNIX/Linux I/O</h1><ul><li>用户程序可通过调用特定的I/O函数的方式提出I/O请求。</li><li>在UNIX/Linux系统中，可以是<strong>C标准I/O库函数</strong>或<strong>系统调用的封装函数</strong>，前者如文件I/O函数<code>fopen()、fread()、fwrite()、fclose()</code>或控制台I/O函数<code>printf()、putc()、scanf()、getc()</code>等；后者如<code>open()、read()、write()、close()</code>等。</li><li>标准I/O库函数比系统调用封装函数抽象层次高，后者属于系统级I/O函数。与系统提供的API函数一样，前者是基于后者实现的。<br>## 概述<br>“一切皆文件”；</li><li>Linux中的文件都是二进制比特串；</li><li>所有的I/O设备在系统中都以文件形式呈现：<ul><li>/dev/sda2</li><li>/dev/tty2</li></ul></li><li>内核也以文件形式呈现：<ul><li>/boot/vmlinuz-3.13.0-55-generic (kernel image)</li><li>/proc (kernel data structures)<br>## 文件分类<br>### Regular Files</li></ul></li><li>Text files：用ASCII或Unicode字符编码的文件；</li><li>Binary files：可执行目标文件，图片；</li><li><strong>Kernal内核不能区分这两者</strong>；</li></ul><h3 id="directories">Directories</h3><p>一些常用命令：<br>* <code>mrdir</code>创建文件夹；<br>* <code>ls</code>查看文件夹内容；<br>* <code>rmdir</code>删除文件夹（文件夹必须是空的）；<br>*<code>.</code>链接自己，<code>..</code>链接它的父文件夹，<code>cd ..</code>即可返回上一级目录；<br>Linux 文件系统<strong>以/（根目录）为起点</strong>，所有文件和目录都组织在这个树状层次结构下。</p><h2 id="文件操作">文件操作</h2><h3 id="打开文件">打开文件</h3><p>打开文件时，内核会返回一个小的非负整数，称为<strong>描述符</strong>；</p><pre class="c"><code>// 成功则返回新文件描述符，失败返回-1int open(char *filename, int flags, mode_t mode);</code></pre><p>返回的是在进程中当前没有被打开的最小描述符，由于进程开始时都会创建三个文件：<br>* 0：stdin；<br>* 1：stdout；<br>* 2：stderr；<br>所以文件描述符一般从3开始；</p><h4 id="文件共享">文件共享</h4><p><img src="2.png"><img src="3.png"></p><h3 id="读写文件">读写文件</h3><pre class="c"><code>ssize_t read(int fd, void* buf, size_t n); // 返回成功读取的字节数，失败为-1ssize_t write(int fd, const void* buf, size_t n); // 同上</code></pre><p>注意ssize_t被定义为signedlong类型，因为它需要返回-1，而size_t是unsigned long类型；<br><strong>Short count</strong>指的是当执行 I/O 操作（如 read 或write）时，实际读取或写入的字节数小于请求的字节数，如遇到以下情况：<br>*  <strong>遇到文件末尾 (EOF)</strong><br>*  <strong>从终端读取文本行</strong><br>* <strong>从网络套接字读取或写入</strong><br>当向磁盘读取或写入时一般不会发生；</p><h1 id="创建进程">创建进程</h1><h3 id="fork语句">Fork语句</h3><pre class="c"><code>Pid_t Fork();</code></pre><p>返回值为进程编号：<br>* 0为子进程；<br>* &gt; 0为父进程；<br>* -1为Fork失败；<br><img src="1.png"><br>fork会复制fork之后的所有代码创建子进程；其执行过程如下：<img src="4.png"><br>注意进程的调度规则不定，哪个先执行完都有可能；</p><h1 id="io重定向">I/O重定向</h1><p>比如，我们希望将当前进程的stdout改为另一个文件，即更改描述符表；通过dup2来实现：</p><pre class="c"><code>int dup2(int oldfd, int newfd);</code></pre><p>如果原来fd1指向文件A，调用dup2(4,1)后：<img src="5.png"><br>## 一个读的例子<br><img src="6.png"><br>需要明确子进程和父进程共享同一打开文件表；<br>* <code>s = getpid() &amp; 0x1</code>决定了进程的执行顺序，如果s =0，则父进程先执行，如果s = 1，则子进程先执行；<br>*fork前的<code>Read(fd1, &amp;c1, 1)</code>，已经从打开文件中读取一个字符a到c1，打开文件表中的文件位置++；<br>*执行fork后，父子中先执行的进程执行<code>Read(fd2, &amp;c2, 1)</code>，即c2= b，同时文件位置++，并输出结果；<br>* 后执行的进程执行<code>Read(fd2, &amp;c2, 1)</code>，即c2 =c，同时文件位置++，并输出结果；<br>结果有2种可能：</p><pre><code>Parent: c1 = a, c2 = bChild: c1 = a, c2 = cChild: c1 = a, c2 = bParent: c1 = a, c2 = c</code></pre><h2 id="一个写的例子">一个写的例子</h2><p><img src="11.png"><br>首先需要明确一些标志的含义：<br>* O_CREAT：如果文件不存在，创建文件；<br>* O_TRUNC：如果文件存在，则清空文件内容；<br>* O_RDWR：文件以读写方式打开；<br>* O_APPEND：每次写操作都会将数据追加到文件末尾；<br>* O_WRONLY：仅允许写操作；<br><code>dup(fd1)</code>复制文件描述符 fd1 到 fd2 ，新描述符 fd2 与 fd1共享相同的文件表项；<br><code>Write(fd1, "pqrs", 4)</code>将"pqrs"写入文件；<br><code>Write(fd3, "jklmn", 5)</code>将"jklmn"写入文件末尾；<br><code>Write(fd2, "wxyz", 4)</code>将"wxyz"写入文件，注意fd1的文件位置为4(写入pqrs后)，所以此时文件的内容为"pqrswxyz"；<br><code>Write(fd3, "ef", 2)</code>将“ef”仍写入文件末尾；<br>所以最终答案为："pqrswxyzef"；</p><h1 id="standard-io">Standard I/O</h1><p>标准I/O库将一个打开的文件模型化为一个<strong>流</strong>。对于程序员而言，一个流就是一个指<br>向FILE类型的结构的指针。每个ANSIC程序开始时都有三个打开的流stdin、stdout<br>和stderr，分别对应于标准输人、标准输出和标准错误；<br><img src="7.png"></p><h1 id="unix-io-vs.-standard-io">Unix I/O vs. Standard I/O</h1><p><img src="8.png"></p><h1 id="系统调用和api">系统调用和API</h1><ul><li>应用编程接口（API）与系统调用两者在概念上不完全相同，它们都是系统提供给用户程序使用的编程接口，但前者指的是功能更广泛、抽象程度更高的函数，后者仅指通过软中断（自陷）指令向内核态发出特定服务请求的函数。</li><li>系统调用封装函数是 API 函数中的一种。</li><li>API 函数最终通过调用系统调用实现 I/O。一个API可能调用多个系统调用，不同 API可能会调用同一个系统调用。但是，并不是所有 API 都需要调用系统调用。</li><li>API在用户态执行，系统调用封装函数也在用户态执行，但具体服务例程在内核态执行。</li></ul><h1 id="io-类型">I/O 类型</h1><ul><li><strong>ProgrammedI/O</strong>：无条件传统方式，查询方式，效率低；<img src="9.png"></li><li><strong>Interrupt Driven I/O</strong>：中断驱动 I/O中，<strong>处理器启动 I/O操作后无需等待，可以执行其他任务</strong>，直到设备通过中断信号通知处理器数据传输完成；</li><li><strong>DMA</strong>：<strong>由 DMA 模块负责在 I/O单元和主存之间直接传输数据</strong>，无需处理器干预；</li></ul><h1 id="总结">总结</h1><p><img src="10.png"></p>]]></content>
    
    
    <summary type="html">I/O</summary>
    
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 14-ecf-procs</title>
    <link href="https://yokumii.github.io/blog/2025/01/05/CSAPP%2014-ecf-procs/"/>
    <id>https://yokumii.github.io/blog/2025/01/05/CSAPP%2014-ecf-procs/</id>
    <published>2025-01-05T09:26:00.000Z</published>
    <updated>2025-01-05T11:04:40.894Z</updated>
    
    <content type="html"><![CDATA[<p>正常来讲，程序计数器PC会在处理器运行时不断地读取指令序列的地址，两个指令间的过渡被称为<strong>控制转移</strong>，该指令序列被称为<strong>控制流</strong>，其中包含一些平滑的突变（即两条指令之间不相邻，如函数调用）；</p><p>异常是指指令地址在控制流中发生突变所做出的反应；系统通过对突变做出反应，将这种突变称为<strong>异常控制流ECF</strong>；</p><h1 id="异常处理">异常处理</h1><h2 id="概述">1. 概述</h2><p>当有事件发生时，会通过一个跳转表（被称为异常表，每个异常编号对应一个索引存储的条目的地址），进行一个间接过程的调用（异常），转移控制给异常处理程序，当异常处理程序处理完成后，根据异常的类型，有以下三种结果：<br>* 返回控制给<span class="math inline">\(I_{cur}\)</span>；<br>* 返回控制给<span class="math inline">\(I_{next}\)</span>；<br>* 终止被中断的程序；<br><img src="1.png"><br>异常控制使得控制从用户态转移到内核态，被压入内核栈中；</p><h2 id="异常类型">2. 异常类型</h2><p>异常包含以下几种类型：<br>*Interrupts中断（Asynchronous异步的，其余都是Synchronous同步的）；<br>* Traps陷阱；<br>* Faults故障；<br>* Aborts终止；</p><h3 id="中断">中断</h3><p>由外部事件引起，并非专门的指令造成的，比如Timerinterrupt（看门狗中断）、I/O interrupt；</p><h3 id="陷阱">陷阱</h3><p>故意执行的异常，<strong>在用户程序和内核之间提供一个接口，称为系统调用SystemCalls</strong>；执行完后返回<span class="math inline">\(I_{next}\)</span>继续执行；</p><h3 id="故障">故障</h3><p>由错误情况引起，将控制转移给故障处理程序，比如<strong>缺页异常（可修复的）</strong>；执行完后返回<span class="math inline">\(I_{cur}\)</span>继续执行或者终止；<br><img src="2.png"><br>以上例子中，当执行到该指令时，a[500]存放在磁盘中，需要从磁盘加载到内存中，此时触发故障，故障处理程序缺失的地址送到内存后，返回<span class="math inline">\(I_{cur}\)</span>重新执行，此时能正确加载数据；<br><img src="3.png"><br>以上例子中，故障处理程序发现该地址是虚拟空间的无效地址，因此报段错误；</p><h3 id="终止">终止</h3><h3 id="linux提供的系统调用">Linux提供的系统调用</h3><p>和异常表不是一个东西！！！<img src="4.png"><br>一个打开文件的例子，注意 <strong><code>%rax</code>存放syscallnumber</strong>，同时存放返回值，如果返回值小于0说明发生错误；<img src="5.png"><br>注意系统调用和函数调用的区别：<br>* 系统调用是在内核态中执行的；</p>]]></content>
    
    
    <summary type="html">异常控制流</summary>
    
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 13-linking</title>
    <link href="https://yokumii.github.io/blog/2025/01/05/CSAPP%2013-linking/"/>
    <id>https://yokumii.github.io/blog/2025/01/05/CSAPP%2013-linking/</id>
    <published>2025-01-05T03:23:00.000Z</published>
    <updated>2025-01-06T14:17:26.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链接概述">链接概述</h1><ul><li>源程序的编译<code>gcc -Og -o prog main.c swap.c</code>可以分为以下四个阶段：<ul><li>Pre-Processor预处理(cpp)<ul><li><code>cpp -o main.i main.c</code> or<code>gcc -E -o main.i main.c</code>，<code>-E</code>为限制gcc只做预处理工作</li></ul></li><li>Compiler编译(ccl)<ul><li><code>cc -S -o main.s main.i</code> or<code>gcc -S -o main.s main.i</code>，<code>-S</code>表示只做编译；</li></ul></li><li>Assmebler汇编(as)<ul><li><code>as -o main.o main.s</code>，这步得到的是<strong>可重定位文件</strong>；</li></ul></li><li>Linker链接(ld)<ul><li><code>ld -static -o prog main.o sum.o</code>以及其他库文件，<code>-static</code>表示静态编译<br><img src="1.png"></li></ul></li></ul></li><li>链接动作在编译、加载和运行时都可以被执行</li></ul><h2 id="静态链接器linker任务">1. 静态链接器Linker任务：</h2><ol type="1"><li>Symbol resolution 符号解析（符号绑定）：<ol type="1"><li>将<strong>引用符号和定义符号建立关联</strong>；</li><li>定义的实质是被分配了存储空间，为函数名制定了其代码所在区，为变量名制定了其所占的静态数据去；</li><li>掌握如何区分定义符号和应用符号；</li></ol></li><li>Relocation 重定位：<ol type="1"><li>合并相同的节；例如，所有.text节合并作为可执行文件中的.text节；</li><li>对定义符号进行重定位，确定地址；例如，为函数确定首地址，进而确定每条指令的地址，为变量确定首地址；</li><li>对引用符号进行红定位，确定地址；需要用到在.rel_data和.rel_text节中保存的重定位信息；</li></ol></li></ol><h2 id="符号解析">2. 符号解析：</h2><ul><li>Globalsymbol：自定他用，全局可见，跨模块使用，在链接时进行符号解析：</li><li>External symbol：他定自用，和GlbalSymbol相对，链接时在其他模块中查找；</li><li>Localsymbol：自定自用，局部符号通常由<code>static</code>修饰，限制其作用域。</li><li>注意区分Local non-static varibles、Local static varibles：</li></ul><pre class="c"><code>static int x = 15;int f() &#123;    static int x = 17;    return x++;&#125;int g() &#123;    static int x = 19;    return x += 14;&#125;int h() &#123;    return x += 27;&#125;</code></pre><ul><li>注意区分上面每个<span class="math inline">\(x\)</span>，函数<span class="math inline">\(f\)</span>和<span class="math inline">\(g\)</span>中的都是作用域在函数内的<strong>局部静态变量</strong></li><li>最外面的<span class="math inline">\(x\)</span>，即函数<span class="math inline">\(h\)</span>引用的是<strong>文件范围内的静态变量</strong>；</li><li>全局符号的符号解析：如果存在多个定义相同名字的全局变量：<ul><li><strong>强符号</strong>：<strong>函数以及初始化的全局变量</strong>；</li><li><strong>弱符号</strong>：<strong>未初始化的全局变量</strong>；<img src="2.png"></li><li>规则：<ul><li>不许有多个同名的强符号，否则Linker error；</li><li>如果有一个同名的强符号和多个弱符号，则取强；</li><li>如果有多个同名的弱符号，随机选择；</li></ul></li><li>注意，<strong>链接器不做类型检查</strong>，所以会发生如下问题：<img src="3.png"></li><li>引用double类型的x变量（8bytes）时可能会覆盖y的空间；</li></ul></li></ul><h2 id="目标文件object-files">3. 目标文件Object Files</h2><ul><li>可重定位目标文件(.o file)</li><li>可执行目标文件(a.outfile)：前者经过链接得到的产物，可以直接复制到内存中并执行；</li><li>共享目标文件(.sofile)：特殊的可重定位目标文件，可以在程序加载或运行时被动态地加载进内存并链接；</li></ul><h2 id="elf可重定位目标文件可执行可链接模式">4.ELF可重定位目标文件（可执行可链接模式）：</h2><p><img src="4.png"><br>* ELF header：16字节的序列，包括字的大小等信息；<br>* .text section：代码段；<br>* .rodatasection：只读数据，比如switch的跳转表、printf的格式字符串；<br>* .data：初始化的全局变量和静态C变量；<br>* .bss：未初始化以及初始化为0的全局变量和静态C变量；<br>* 实际上不占用任何存储空间，仅是一个占位符；<br>* Better Save Space；<br>* 运行时自动分配这些变量的初始值为0；<br>* 有些题目比较恶心，会区分.bss和COMMOM：<br>* .bss存放未被初始化的静态变量以及初始化为0的全局或静态变量；<br>* COMMOM存放未被初始化的全局变量；<br>* .symtab：符号表；<br>*.rel.txt，.rel.data，占位符，即引用别的模块中定义的全局变量和函数的指令的占位符，就是下图箭头所指的；<img src="6.png"><br>* .debug：调试信息(需要加上<code>gcc -g</code>)；<br>* Section header table：每个节的大小信息；</p><h2 id="可执行文件的目标文件格式">5.可执行文件的目标文件格式</h2><p><img src="5.png"><br>* 多了一个程序头表：包含第一条指令的地址；<br>* 少了.rel.txt和.rel.data，因为已经链接完了，无需再重定位；</p><h2 id="重定位">6. 重定位</h2><ul><li>重定位信息：<img src="7.png"></li></ul><h3 id="r_386_pc32重定位方式">R_386_PC32重定位方式</h3><p><img src="8.png"><br>* 根据重定位前的.o文件，能得到哪些信息？<br>* main在.text节中偏移为0处开始，占0x12bytes；<br>*<code>e8 fc ff ff ff</code>中，<code>e8</code>是<code>call</code>的机器码，后面应该存放swap函数的地址，但目前未重定位，所以没有意义，是占位符；<br>*下一行的<code>7: R_386_PC32 swap</code>也是占位符，用于重定位，7表示需要在地址7(6+1，call的机器码占一个字节)处进行重定位，R_386_PC32表示需要计算的是PC相对地址；<br><img src="9.png"><br>* 根据以上信息，问题是：<br><img src="10.png"><br>*main函数从<code>0x8048380</code>开始，占0x12bytes，swap紧跟main后，所以其起始地址为<code>0x8048380 + 0x12 = 0x804892B</code>，由于其机器代码首地址需要按4字节边界对齐，所以应该是<code>0x8048394</code>；<br>* <strong>重定位后，call指令的机器代码应该是什么？</strong><br>* 由于采用R_386_PC32相对地址法，转移目标地址 = PC +偏移地址(重定位值)；<br>*在执行call时，PC指向call指令的下一条地址，即<code>0x8048380 + 0x7 = 0x8048387</code>；<br>*但是，<strong>由于一开始有一个占位的初始偏移值<code>fc ff ff ff</code>即-4，链接器在进行重定位之前，会先减掉这个临时的偏移量</strong>，所以，正确的PC地址应该是<code>0x8048387 - (-4) = 0x804838b</code>；<br>* 事实上，这个PC地址就是call指令的下一条语句的地址；<br>* 重定位值 = 转移目标地址 - PC =<code>0x8048394 - 0x804838b = 0x9</code>；<br>*然后链接器将call指令的机器代码修正为<code>e8 09 00 00 00</code>；（小端法）</p><h3 id="r_386_32的重定位方式">R_386_32的重定位方式</h3><p><img src="11.png"></p><h1 id="静态库链接static-libraries">静态库链接Static Libraries</h1><ul><li>将所有相关的目标文件模块打包成一个单独的文件，称为静态库；</li><li>使链接器构造可执行文件时，只要复制静态库里被程序引用的目标模块；</li><li>相比于链接整个模块，减少了可执行文件在磁盘和内存中的大小；</li></ul><pre class="shell"><code># create static librariesunix&gt; ar rs libc.a \ atoi.o printf.o ... random.o</code></pre><p><img src="12.png"></p><pre class="shell"><code># 与静态库链接unix&gt; gcc -static -o prog2r \ main2.o -L. -lvector</code></pre><p><img src="13.png"><br>* 自定义创建静态库文件（ar工具）</p><pre class="shell"><code>gcc -c myproc1.c myproc2.car rcs mylib.a myproc1.o myproc2.ogcc -c main.cgcc -static -o myproc main.o ./mylib.a # 标准的静态库无需显示给出</code></pre><ul><li>在进行符号解析到过程中，按从左往右的顺序进行链接，并将符号分为三个集合：<ul><li>E：合并以组成可执行文件的所有目标文件集合；</li><li>U：当前所有未解析的引用符号；</li><li>D：当前所有定义的符号的集合，来更新U和E；</li></ul></li><li>符号解析的完整过程如下：<ol type="1"><li>扫描到main.o并加入E；</li><li>把main.o中未解析的引用myfunc加入U，把main加入D；</li><li>扫描到静态库文件mylib.a，将U中的符号与mylib.a中所有目标模块依次匹配，将myfunc从U中删除移到D，将myproc1.o加入E；</li><li>此时myproc1.o中发现未定义printf符号，将其加入到U；</li><li>不断扫描静态库文件，直至U、D不变；</li><li>扫描默认的库文件libc.a时，找到printf.o定义，将printf.o加入到E，并将printf从U移动到D，此时U一定是空的，否则就报错了；</li><li>由于未引用myproc2.o的内容，它并不在E中，被丢弃；<br><img src="14.png"></li></ol></li><li>但是静态库链接的顺序扫描会导致一个问题：<img src="15.png"></li><li>所以好的做法是<strong>将静态库放在命令行最后</strong>；</li><li><strong>如果静态库之间并不相互独立，静态库需要重复出现</strong>；<img src="16.png"></li><li>静态库的缺陷：<ul><li>主存资源浪费；</li><li>磁盘空间浪费；</li><li>更新困难，使用不便；</li></ul></li></ul><h1 id="动态链接的共享库shared-libraries">动态链接的共享库SharedLibraries</h1><ul><li>共享库是一个目标文件（Linux：.so文件；Windows：.dll文件）；</li><li>从程序中分离出来，磁盘和内存中都只有一个备份；</li><li>可以<strong>在程序运行或加载时，加载到内存的任意位置，并和一个内存中的程序链接起来，称为动态链接</strong>；<br><img src="17.png"></li><li><code>ldd prog</code>可以打印出可执行文件需要的动态链接库；</li><li>自定义创建动态链接库：（<code>-fpic</code>是生成位置无关的共享库代码文件）</li></ul><pre class="shell"><code>unix&gt; gcc -Og -c test1.c test2.cunix&gt; gcc -shared -fpic -o test.so \ test1.o test2.ounix&gt; gcc -c main.cunix&gt; gcc -o test main.o ./test.so</code></pre><ul><li><strong>动态链接库在加载时的链接过程</strong>：<img src="18.png"></li><li>在静态链接器ld链接的过程中，生成重定位和符号表信息；</li><li>加载可执行程序时，加载器发现在程序表中的 <strong>.interp段</strong>，其中包含了动态链接器路径名ld-linux.so，因而加载器根据指定路径加载并启动动态链接器运行；</li><li>完成重定位后，将控制权交给可执行文件，开始执行程序；</li><li><strong>动态链接库在运行时的链接过程</strong>：</li></ul><pre class="c"><code>#include &lt;dlfcn.h&gt;/* Dynamically load the shared library that contains addvec() */handle = dlopen(&quot;./libvector.so&quot;, RTLD_LAZY);/* Get a pointer to the addvec() function we just loaded */addvec = dlsym(handle, &quot;addvec&quot;);/* Now we can call addvec() just like any other function */addvec(x, y, z, 2);/* Unload the shared library */dlclose(handle);</code></pre><p><img src="19.png"></p><ul><li>上述过程也被称为<strong>Lazy Binding(延迟绑定)</strong>，它将函数地址的绑定推迟到<strong>函数第一次被调用时</strong>，而不是在程序加载到内存时立即完成所有函数地址的绑定；</li><li>延迟绑定依赖两种关键的数据结构：<strong>GOT（全局偏移表）</strong>和 <strong>PLT（过程链接表）</strong>；</li><li>GOT：<ul><li>它是一个包含地址的表，存放在程序的数据段中（.data 或 .bss）。</li><li>每个引用的全局对象（包括全局变量和动态链接函数）在 GOT中占据一个条目（8 字节）。</li><li>每个目标模块（目标文件或共享库）都会有自己的独立 GOT。</li><li>在程序加载时，动态链接器计算全局变量或函数的绝对地址。将每个 GOT条目更新为对应全局对象的<strong>绝对地址</strong>。</li></ul></li><li>PLT：<ul><li><strong>PLT是一段可执行代码</strong>，用来间接调用动态链接的函数。</li><li>每个动态链接的函数在 PLT中都有一个对应的条目，<strong>每个条目大小为 16 字节</strong>。</li><li>在程序中，<strong>所有对动态函数的调用都会先跳转到对应的 PLT条目，而不是直接调用函数地址</strong>。</li><li>每个动态函数在 GOT中都有一个对应的条目，初始状态下，该条目指向动态链接器的解析代码。</li><li><strong>当动态链接器解析了目标函数地址后，会更新对应的 GOT条目为函数的实际地址</strong>。</li><li><strong>第一次调用函数</strong>：<ul><li>PLT 条目先访问 GOT，发现 GOT 中的地址是动态链接器的入口。</li><li>动态链接器解析函数的实际地址，并更新 GOT 条目。</li></ul></li><li><strong>后续调用函数</strong>：<ul><li>PLT 条目直接跳转到 GOT 条目中存储的函数地址，避免重复解析。<br><img src="20.png"></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">链接</summary>
    
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 09-machine-advanced</title>
    <link href="https://yokumii.github.io/blog/2025/01/05/CSAPP%2009-machine-advanced/"/>
    <id>https://yokumii.github.io/blog/2025/01/05/CSAPP%2009-machine-advanced/</id>
    <published>2025-01-05T02:23:00.000Z</published>
    <updated>2025-01-05T03:20:46.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序运行的内存分配策略">程序运行的内存分配策略</h1><ol type="1"><li>静态存储分配<ol type="1"><li>编译时就能确定每个数据目标在运行时刻的存储空间需求,因而在编译时就可以给他们分配固定的内存空间；</li><li>程序代码中<strong>不允许有可变数据结构(比如可变数组)的存在,也不允许有嵌套或者递归的结构出现</strong>,因为会导致编译程序无法计算准确的存储空间需求</li></ol></li><li>栈式存储分配<ol type="1"><li>在编译期间，过程、函数以及嵌套程序块的活动记录大小（最大值）应该是可以确定的（以便进入的时候动态地分配活动记录的空间），这是进行栈式存储分配的必要条件，如果不满足则应该使用堆式存储管理</li></ol></li><li>堆式存储分配<ol type="1"><li><strong>数据对象的生存期与创建它的过程/函数的执行期无关</strong></li><li>在任意时刻以任意次序从数据段的堆区分配和释放数据对象的运行时存储空间，分配和释放数据对象的操作是应用程序通过向操作系统提出申请来实现<br><img src="1.png"></li></ol></li></ol><h1 id="缓冲区溢出攻击">缓冲区溢出攻击</h1><ul><li>一个例子<img src="2.png"></li><li>应对之道：<ul><li>Stack Randomization，栈随机化，栈底指针浮动；</li><li>设置金丝雀Canary；</li><li>栈区域规定是不可执行的</li></ul></li></ul><h1 id="金丝雀">金丝雀</h1><pre class="x86asm"><code>40072f:  sub    $0x18,%rsp    # 分配栈空间24bytes400733:  mov    %fs:0x28,%rax   # Get Canary %fs:0x28是一个只读的内存区域40073c:  mov    %rax,0x8(%rsp)  # Place it on stack(Canary 8byetes)400741:  xor    %eax,%eax  # 自己和自己做异或，即擦除Canary400743:  mov    %rsp,%rdi400746:  callq  4006e0 &lt;gets&gt;40074b:  mov    %rsp,%rdi40074e:  callq  400570 &lt;puts@plt&gt;400753:  mov    0x8(%rsp),%rax  # Get it again from stack400758:  xor    %fs:0x28,%rax   # 重新和只读区域上的值做异或400761:  je     400768 &lt;echo+0x39&gt; # ZF = 0，即说明两者相等，没问题400763:  callq  400580 &lt;__stack_chk_fail@plt&gt; # 否则说明stack上的Canary被顶掉，Fail400768:  add    $0x18,%rsp40076c:  retq</code></pre><h1 id="面向返回攻击return-oriented-programming-attacks">面向返回攻击Return-OrientedProgramming Attacks</h1><ul><li>利用已有的代码Gadget，跳转到Gadgets上逐步执行操作；</li><li>还是防不了金丝雀；<br><img src="3.png"></li></ul>]]></content>
    
    
    <summary type="html">缓冲区溢出</summary>
    
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 08-machine-data</title>
    <link href="https://yokumii.github.io/blog/2025/01/05/CSAPP%2008-machine-data/"/>
    <id>https://yokumii.github.io/blog/2025/01/05/CSAPP%2008-machine-data/</id>
    <published>2025-01-04T16:16:00.000Z</published>
    <updated>2025-01-05T02:23:16.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="array数组">Array数组</h1><ul><li><code>Type A[L]</code>会在内存中分配连续的<span class="math inline">\(L * sizeof(Type)\)</span>个字节；</li><li>其中单独的<code>A</code>表示数组指针；<span class="math inline">\(A+ i\)</span>事实上是<span class="math inline">\(A + i *sizeof(Type)\)</span>的地址；<img src="1.png"></li></ul><pre class="c"><code>int get_digit(int *a, int x) &#123;    return a[x];&#125;// 翻译成汇编代码// %rdi = a, %rsi = x;movl (%rdi, %rsi, 4), %eax; // a + 4 * x;</code></pre><ul><li>数组可以视为首项的指针，对于两者混用的情况，做出以下区分：</li></ul><table><thead><tr><th>Decl</th><th style="text-align: left;"></th><th style="text-align: left;">A1, A2</th><th style="text-align: left;"></th><th></th><th>*A1, *A2</th><th></th></tr></thead><tbody><tr><td></td><td style="text-align: left;">Cmp</td><td style="text-align: left;">Bad</td><td style="text-align: left;">Size</td><td>Comp</td><td>Bad</td><td>Size</td></tr><tr><td>int A1[3]</td><td style="text-align: left;">Y</td><td style="text-align: left;">N</td><td style="text-align: left;">12</td><td>Y</td><td>N</td><td>4</td></tr><tr><td>int *A2</td><td style="text-align: left;">Y</td><td style="text-align: left;">N</td><td style="text-align: left;">8</td><td>Y</td><td>Y</td><td>4</td></tr></tbody></table><ul><li>其中<code>int *A2</code>声明了一个指向整形的指针，但它指向的地址显然没有被指定，即指向一个未被分配的内存空间，是一个坏指针；<img src="2.png"></li></ul><table><colgroup><col style="width: 27%"><col style="width: 6%"><col style="width: 6%"><col style="width: 8%"><col style="width: 6%"><col style="width: 8%"><col style="width: 8%"><col style="width: 6%"><col style="width: 12%"><col style="width: 8%"></colgroup><thead><tr><th>Decl</th><th></th><th>An</th><th></th><th></th><th>*An</th><th></th><th></th><th>**An</th><th></th></tr></thead><tbody><tr><td></td><td>Cmp</td><td>Bad</td><td>Size</td><td>Cmp</td><td>Bad</td><td>Size</td><td>Cmp</td><td>Bad</td><td>Size</td></tr><tr><td>int A1[3]</td><td>Y</td><td>N</td><td>12</td><td>Y</td><td>N</td><td>4</td><td>N</td><td>-</td><td>-</td></tr><tr><td>int *A2[3]</td><td>Y</td><td>N</td><td>24</td><td>Y</td><td>N</td><td>8</td><td>Y</td><td>Y</td><td>4</td></tr><tr><td>int (*A3)[3]</td><td>Y</td><td>N</td><td>8</td><td>Y</td><td>Y</td><td>12</td><td>Y</td><td>Y</td><td>4</td></tr><tr><td>int (*A4[3])</td><td>Y</td><td>N</td><td>24</td><td>Y</td><td>N</td><td>8</td><td>Y</td><td>Y</td><td>4</td></tr></tbody></table><ul><li>其中<code>int *A2[3]</code>相当于<code>int (*A4[3])</code>，其中，<code>()</code>的优先级最高，<code>[]</code>次之，然后是<code>*</code>；</li><li><code>int *A2[3]</code>表示包含3个整形指针的数组；方括号<code>[]</code>的优先级高于<code>*</code>，所以<code>A2[3]</code>表示A2是一个数组；<code>int *</code>表示数组的每个元素是一个指向int类型的指针。</li><li><code>int (*A3)[3]</code>表示指向一个包含3个整形的数组的指针；<code>()</code>的优先级高于<code>[]</code>，所以<code>(\*A3)</code>表示<code>A3</code>是一个指针。<img src="3.png"></li><li>二维数组按行优先存储；<img src="4.png"></li><li>要访问<code>A[i][j]</code>，取<code>A + (i * C + j) * 4</code>即可；</li></ul><h1 id="structure自定义结构体">Structure自定义结构体</h1><ul><li>结构体也是一段连续的内存区域；<img src="5.png"></li><li>结构体的某个类型对象的<strong>地址必须是k = 2, 4,8的倍数（对齐）</strong>；原因是：<ul><li><strong>内存访问的单位是块</strong>：<ul><li>在现代计算机中，内存通常是以<strong>固定大小的块</strong>（如 4字节或 8 字节，依赖于系统架构）进行访问的。</li><li>这种对齐方式是硬件设计的结果，因为大多数处理器一次性加载的数据是 4字节（32 位）或 8 字节（64 位），以提高性能。</li></ul></li><li><strong>缓存行（Cache Line）的作用</strong>：<ul><li>缓存行是 CPU 缓存与内存之间传输数据的最小单位，典型大小为 <strong>64字节</strong>。</li><li>当 CPU访问内存时，会将整块缓存行加载到缓存中，以减少后续访问的延迟。</li></ul></li><li><strong>跨缓存行访问的影响</strong>：如果一个数据（如一个结构体或数组元素）跨越了两个缓存行：<ol type="1"><li>CPU 需要加载两个缓存行（额外的内存访问）。</li><li>性能下降，因为需要两次读取操作。</li></ol></li><li><strong>对齐的意义</strong>：<ul><li>数据对齐可以避免跨缓存行的情况，确保数据操作只涉及单个缓存行，从而提高访问效率。</li></ul></li><li><strong>虚拟内存的分页（Page）机制</strong>：现代操作系统的虚拟内存将内存划分为<strong>页（Page）</strong>，每页通常是 4 KB。<ul><li>页是内存管理的最小单位，每一页可能映射到不同的物理内存区域，或者部分未分配。</li><li><strong>跨页访问的复杂性</strong>：如果一个数据块（如数组或结构体）跨越了两个页：<ol type="1"><li>操作系统需要处理两次页表查找，性能下降。</li><li>如果某一页未映射（如缺页错误），会导致额外的开销。</li><li>在某些极端情况下（如页权限不同），可能会引发访问冲突或安全问题。</li></ol></li><li><strong>对齐的重要性</strong>：</li><li>避免数据跨页存储可以减少页表查找和缺页错误，简化虚拟内存管理，提高内存操作效率。</li></ul></li></ul></li><li>所以，倾向于将占字节数大的对象放在前面减小空间浪费；</li></ul><h1 id="浮点代码">浮点代码</h1><ul><li>不在教学和考试范围内；</li></ul><h1 id="union共用体">Union共用体</h1><ul><li>根据最大的类型对象所占字节数分配内存；</li><li>一次只能使用一个对象；<br><img src="6.png"></li></ul><ol type="1"><li>Same as (float) u?<ul><li>不相同：<ul><li><code>(float) u</code>的含义：<ul><li>这是一个类型转换，表示将 unsigned 类型的整数 u 转换为 float类型。</li><li>转换时，u 的数值会从整数解释为浮点数，改变其表示方式。例如，u = 42会被转换为浮点数 42.0。</li></ul></li><li><code>bit2float</code>的含义：<ul><li>bit2float 并不改变位模式，而是通过 union 将 unsigned类型的位模式解释为 float 类型。</li><li>如果传入的 u并不是有效的浮点数位模式，结果可能是未定义的浮点数。</li></ul></li></ul></li></ul></li><li>Same as (unsigned) f？<ul><li>同理，不相同；</li></ul></li></ol>]]></content>
    
    
    <summary type="html">数据表示</summary>
    
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/tags/CSAPP/"/>
    
    <category term="汇编代码" scheme="https://yokumii.github.io/blog/tags/%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 07-machine-procedures</title>
    <link href="https://yokumii.github.io/blog/2025/01/04/CSAPP%2007-machine-procedures/"/>
    <id>https://yokumii.github.io/blog/2025/01/04/CSAPP%2007-machine-procedures/</id>
    <published>2025-01-04T12:55:00.000Z</published>
    <updated>2025-01-04T16:16:25.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程机制">进程机制</h1><ol type="1"><li>Passing control传递控制，记录函数返回地址，跳转到函数开始地址；</li><li>Passing data传递参数；</li><li>Memory management内存管理；</li></ol><h1 id="运行时的栈和栈帧">运行时的栈和栈帧</h1><ul><li>习惯性将栈顶画在底部，从下到上地址增大，栈向低地址生长，即向下生长；</li><li><code>pushq Src</code>，会使得<code>%rsp</code>减小；<code>popq Dest</code>，会使得<code>%rsp</code>增加；</li><li>不会改变具体栈上的内容，只会改变指针的位置；</li><li><code>callq label</code>：<ul><li>push return address to stack；</li><li>jump to label；</li><li>即将栈向下生长一格，将函数返回地址放入，<code>%rsp</code>存的是指向该返回地址的指针；然后<code>%rip</code>变为函数的开始地址；</li></ul></li><li><code>ret</code>：<ul><li>pop address from stack；</li><li>jump to address(即将PC<code>%rip</code>设置为该地址)；</li><li>此时过程内的一切东西都会被释放（除了动态申请的内存）；</li></ul></li><li>label是不占位置的；<br><img src="1.png"><br><img src="2.png"></li><li><strong>StackFrames栈帧</strong>：即过程活动记录，每次调用函数分配的一段独立的栈帧，<code>ret</code>时释放栈帧；</li><li>一个常见的调用过程的栈内容如下：（向下生长，往下为低地址）</li></ul><table><colgroup><col style="width: 100%"></colgroup><tbody><tr><td></td></tr><tr><td>Arg n</td></tr><tr><td><span class="math inline">\(\cdots\)</span></td></tr><tr><td>Arg 7</td></tr><tr><td>Return Addr(Caller's %rip)以上部分均为Caller的栈帧</td></tr><tr><td>optional Callee's %rbp</td></tr><tr><td>Saved Registers + Local Varibles</td></tr><tr><td>ArgBuild(optional)，如果该函数内部还要调用其他函数，需要传递的参数在这里进行准备；以上部分为Callee的栈帧</td></tr></tbody></table><h1 id="数据传送与局部存储">数据传送与局部存储</h1><ul><li>以下讨论均为整形，浮点数有另一套东西；</li><li>当传递参数超过6个时，x86-64要求<strong>超过寄存器限制的参数按照从右到左的顺序压入栈（后面的参数先进入栈）</strong>：<img src="3.png"></li><li>由于寄存器在所有进程之间进行共享，所以规定Callee被调用者不会覆盖Caller调用者会使用到的寄存器的值：<ul><li>CallerSaved调用者保存：<strong>调用者（Caller）负责保存</strong>在函数调用前需要保留的寄存器值，如果调用者需要在函数调用后继续使用某些寄存器中的值，那么它必须在调用函数之前将这些值保存到栈中或其他地方，并在函数返回后再恢复；<ul><li>通过上述操作，Callee可以在调用过程中使用和改变这些寄存器的值；</li><li>典型的有：<code>%r10，%r11，%rax，%rdi，%rsi，%rdx，%rcx，%r8，%r9</code>，即参数基本器和返回寄存器，调用者需要对自己负责，调用子函数时肯定需要确保这些值不能被被调用者改变；</li></ul></li><li>CalleeSaved被调用者保存：<strong>被调用者（Callee）负责保存</strong>在函数调用中需要保护的寄存器值，通常通过压栈来进行（就是上面画的Callee的栈帧中SavedRegisters的部分）；<ul><li>典型的有：<code>%rbx，%rbp，%r12，%r13，%r14，%r15</code>，<strong>比较特殊的是<code>%rsp</code>，因为调用子函数时，栈指针会往下移至子函数栈帧的栈顶，当子函数结束时，显然需要子函数来恢复栈顶指针指向调用者栈帧的栈顶</strong>；</li></ul></li></ul></li><li>一个Callee Saved的例子<img src="5.png"><ul><li>首先，<code>%rdi</code>作用CallerSaved，需要由该函数保存，由于<code>%rbx</code>为CalleeSaved，即被调用者保存，其值在该函数运行过程中不会发生改变，所以将<code>%rdi</code>保存在<code>%rbx</code>中，通过寄存器实现了保存；</li><li>上述操作导致了一个问题，<code>%rbx</code>作为CalleeSaved，而该函数作为其上一层（主函数）的被调用者，该函数作为被调用者需要保存<code>%rbx</code>，所以，该函数一开头将<code>%rbx</code>压入栈，再最后又弹回给<code>%rbx</code>，通过在栈上存储，实现了保存；</li></ul></li><li>再看一个递归的例子<img src="6.png"><ul><li>在该函数中递归调用时，作为主调函数，需要保存<code>%rdi</code>，与上面的例子类似保存在<code>%rbx</code>中；</li><li>由于<code>%rbx</code>是CalleeSaved，pcouter_r作为主函数和上一层pcounter_r的被调用者，所以也需要保存<code>%rbx</code>；</li></ul></li></ul><h1 id="一个函数调用的例子">一个函数调用的例子</h1><p><img src="4.png"><br>1.栈操作不是运用传统的push和pop操作，直接移动指针，两者含义是否相同？<br>* <strong>功能上相同</strong>：两种方式都用于管理栈上的数据；<br>*<strong>实现上不同</strong>：直接调整<code>%rsp</code>更高效，尤其在需要分配大块连续内存时；而<code>push/pop</code>更适合操作单个寄存器或简单的栈保存和恢复；<br>2. 为何多申请了一个8字节空间？<br>* System V ABI规范了函数调用时的堆栈布局，以确保各函数之间的参数传递和返回地址的存储符合标准。<strong>堆栈以16字节对齐的方式操作</strong>，从而在调用指令（如<code>CALL</code>和<code>RET</code>）时避免对齐问题；<br>3. 何时申请栈中局部空间，何时不需要申请？<br>1. <strong>需要申请局部空间的情况：</strong><br>1.<strong>局部变量无法存放在寄存器中</strong>：如果局部变量的数量超过了可用的寄存器，或者局部变量较大（如数组、结构体），必须在栈中分配空间。<br>2. <strong>指针操作需要实际内存地址</strong>：如代码中的 &amp;v1需要将变量地址传递给函数，此时必须为变量分配实际的内存空间。<br>3.<strong>函数递归或多层嵌套调用</strong>：每次调用会分配独立的栈帧用于保存局部变量和状态。<br>2. <strong>不需要申请局部空间的情况：</strong><br>1.<strong>变量可以完全存储在寄存器中</strong>：编译器优化时，会尽可能将局部变量映射到寄存器中，避免占用栈空间。<br>2.<strong>无需持久化变量状态</strong>：如果局部变量只在寄存器中临时使用且不需要在函数调用间共享，则不需要分配栈空间。</p>]]></content>
    
    
    <summary type="html">进程</summary>
    
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/tags/CSAPP/"/>
    
    <category term="汇编代码" scheme="https://yokumii.github.io/blog/tags/%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 06-machine-control</title>
    <link href="https://yokumii.github.io/blog/2025/01/04/CSAPP%2006-machine-control/"/>
    <id>https://yokumii.github.io/blog/2025/01/04/CSAPP%2006-machine-control/</id>
    <published>2025-01-04T11:07:00.000Z</published>
    <updated>2025-01-05T03:10:40.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="条件码">条件码</h1><p><img src="1.png"><br><img src="2.png"><br><img src="3.png"><br><img src="4.png"><br>* <strong>注意<code>cmp</code>实际上做减运算，后减前</strong>；</p><h1 id="loop循环结构">Loop循环结构</h1><ol type="1"><li>do-while：</li></ol><pre class="c"><code>do &#123;    body;&#125; while(test);</code></pre><p>等价于</p><pre class="c"><code>Loop:    body;    t = test;    if (t) goto Loop;</code></pre><ol start="2" type="1"><li>while：</li></ol><pre class="c"><code>while (test) &#123;    body;&#125;</code></pre><p>如果开启-O2优化，采用Jump-to-middle翻译方法，即判断在后面，先跳到末尾进行判断，再返回中间执行整体；</p><pre class="c"><code>    goto test;Loop:    body;test:    t = test;    if (t) goto Loop;</code></pre><p>如果开启-O1优化，采用Guarded-do翻译方法，先进行判断，然后转换为do-while循环；</p><pre class="c"><code>t = test;if (!t) goto END;Loop:    body;    t = test;    if (t) goto Loop:END;</code></pre><ol start="3" type="1"><li>for：</li></ol><pre class="c"><code>for (init; test; update) &#123;    body;&#125;</code></pre><p>转化为while循环：</p><pre class="c"><code>init;while (test) &#123;    body;    update;&#125;</code></pre><p>写成goto形式：</p><pre class="c"><code>init;t = test;Loop:    body;    update;    if (t) goto Loop;END;</code></pre><h1 id="switch分支结构">Switch分支结构</h1><ul><li>并非if，通过跳转表来实现，每一个分支被视为一个代码块，代码块的开头的地址被存放在跳转表中；<img src="5.png"></li></ul><pre class="x86asm"><code>my_switch:    movq %rax, %rcx    cmpq $6, %rdi // x : 6    ja .L8 // if x &gt; 6, goto default;    jmp *.L4(,%rdi, 8) // *(.L4 + x * 8)的地址上的值，即间接跳转，先计算出跳转表上的索引位置，跳转到该索引上的值处；</code></pre>]]></content>
    
    
    <summary type="html">机器指令的控制结构</summary>
    
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/tags/CSAPP/"/>
    
    <category term="汇编代码" scheme="https://yokumii.github.io/blog/tags/%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 05-machine-basics</title>
    <link href="https://yokumii.github.io/blog/2025/01/04/CSAPP%2005-machine-basics/"/>
    <id>https://yokumii.github.io/blog/2025/01/04/CSAPP%2005-machine-basics/</id>
    <published>2025-01-04T07:52:00.000Z</published>
    <updated>2025-01-04T11:06:08.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指令的概念">指令的概念</h1><ul><li>微指令是微程序级命令，属于硬件范畴</li><li>伪指令是由若干机器指令组成的指令序列，属于软件范畴</li><li>机器指令介于二者之间，处于硬件和软件的交界面，本章中提及的指令都指机器指令；<ul><li>汇编指令是机器指令的汇编表示形式，即符号表示</li><li>机器指令（二进制串）和汇编指令一一对应，它们都与具体机器结构有关，都属于机器级指令；</li><li>编译Compiling：<code>gcc -Og -S test.c</code>，<code>-Og</code>为优化选项，得到汇编代码<code>test.s</code>；</li></ul></li></ul><h1 id="机器代码的组成">机器代码的组成</h1><ul><li>操作性质（操作码）、源操作数、目的操作数地址（立即数，寄存器编号，存储地址）；<br><img src="1.png"></li><li>通常由以下三部分组成：<ul><li>程序计数器PC(ProgramCounter)：即<code>%rip</code>(x86-64)，指向当前正在执行指令的下一条指令的地址；</li><li>整数寄存器Register file：分别存储了64位的值（地址，整数数据）；</li><li>状态寄存器Condition codes：最近执行的算术或逻辑指令的状态信息；</li></ul></li><li>注意机器代码不区分无符号整数和有符号整数，不区分函数和指针；</li></ul><h1 id="isa指令集体系结构">ISA指令集体系结构</h1><p><img src="2.png"></p><h1 id="信息访问保护模式下">信息访问（保护模式下）</h1><ol type="1"><li>整数寄存器：<img src="3.png"><ol type="1"><li><code>%rax</code>，函数返回值；</li><li><code>%rdi</code>，函数调用的第一个参数；</li><li><code>%rsi</code>，函数调用的第二个参数；</li><li><code>%rdx</code>，函数调用的第三个参数；</li><li><code>%rcx</code>，函数调用的第四个参数；</li><li><code>%r8</code>，函数调用的第五个参数；</li><li><code>%r9</code>，函数调用的第六个参数（超过6个参数放在栈空间中）；</li><li><code>%rsp</code>，栈顶指针；</li></ol></li><li>操作数指示符号<ol type="1"><li>寄存器：直接调用即可；</li><li>立即数：<code>$ + 整数</code>表示；</li><li>内存引用：<code>(%rax)</code></li><li>基址、比例变址、位移操作：<code>D(Rb, Ri, S)</code>，表示获取Rb + S* Ri +D地址上的数，Rb为段基址，Ri为有效地址(不能是%rsp)，S为比例因子(1、2、4、8)，D为偏移量；<img src="4.png">即算的时候是直接拿寄存器做运算得到地址，但最终的结果应该是该地址上的数；</li></ol></li><li>传送指令：<ol type="1"><li>mov：<code>movq src, dest</code>；<ol type="1"><li>立即数可以移动到寄存器或内存地址(寄存器的内容，即此时立即数存在内存中，寄存器存的是指向该内存的地址)；<ol type="1"><li><code>movq $0x4, %rax</code> <span class="math inline">\(\Leftrightarrow\)</span><code>temp = 0x4</code>；</li><li><code>movq $-147, (%rax)</code><span class="math inline">\(\Leftrightarrow\)</span><code>*p = -147</code>；</li></ol></li><li>寄存器可以移动到寄存器或内存地址；</li><li>内存只能移动到寄存器，内存之间不能移动；</li><li><code>movl</code>指令以寄存器为目的是，不但会更新低32位的值，还会将高位4字节都设置为0；</li><li><code>movs</code>符号扩展；<code>movz</code>零扩展；</li></ol></li><li>lea：加载有效地址，<code>leaq (%rdi, %rdi, 2), %rax</code>；<ol type="1"><li><strong>注意与<code>mov</code>区别，<code>lea</code>虽然加了括号，但实际上取的是内存的地址，且结果也是内存的地址，而非地址的指向</strong>，所以上面那句指令等价于<code>t = x + x * 2</code>；</li></ol></li></ol></li><li>二元运算指令：<img src="5.png"><ul><li>注意<code>sarq</code>为算术右移，<code>shrq</code>为逻辑右移；</li><li><strong>除了乘除，都不区分有符号和无符号</strong>；</li><li><strong>加减影响所有标志</strong>；</li><li><strong>递增递减影响除进位借位CF以外的标志</strong>；</li><li><strong>取负NEG影响标志：对0取负得到0，CF = 0；其余情况CF =1</strong>；</li><li><strong>比较运算：做减法得到标志，不会改变寄存器的值</strong>；</li></ul></li><li>一元运算指令：<img src="6.png"><ul><li>逻辑运算中，<code>not</code>不会影响标志，其余OF = CF =0，ZF和SF根据结果设置；</li><li><strong><code>test</code>做“与”操作，但不会改变寄存器的值，仅影响标志位</strong>；</li></ul></li></ol><h1 id="gcc的使用举例">GCC的使用举例</h1><ol type="1"><li><code>gcc -Og -S test.c</code>得到汇编代码<code>test.s</code>；</li><li><code>gcc -O1 test.c -o test</code>得到可执行文件<code>test</code>；</li><li><code>objdump -d test.o &gt; test.txt</code>得到反汇编代码；</li><li>注意可重定位目标文件和可执行目标文件的差异，可重定位目标文件还没有经过链接器链接：<img src="7.png"></li></ol>]]></content>
    
    
    <summary type="html">机器指令</summary>
    
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/tags/CSAPP/"/>
    
    <category term="汇编代码" scheme="https://yokumii.github.io/blog/tags/%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 04-float</title>
    <link href="https://yokumii.github.io/blog/2025/01/04/CSAPP%2004-float/"/>
    <id>https://yokumii.github.io/blog/2025/01/04/CSAPP%2004-float/</id>
    <published>2025-01-04T06:27:00.000Z</published>
    <updated>2025-01-04T07:51:12.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二进制表示方法">二进制表示方法</h1><ul><li>引入负指数即可；</li><li>缺陷是无法平衡整数部分的范围和小数范围的精度；</li></ul><h1 id="ieee标准">IEEE标准</h1><p><img src="2.png"><br><img src="1.png"><br>* exp：阶码；<br>* frac：尾数；</p><ol type="1"><li>规格化Normalized：exp不全为0且不全为1；<ol type="1"><li><span class="math inline">\(E = exp - Bias = exp - (2^{k-1} -1),Bias  = 2^{k - 1} - 1\)</span> ；<ol type="1"><li>32bits：<span class="math inline">\(Bias = 2^7 -1 = 127,exp\in[1,254]\rightarrow E\in [-126,127]\)</span>；</li><li>64bits：<span class="math inline">\(Bias = 2^{10} - 1 = 1023,exp \in[1, 2023]\rightarrow E\in [-1022,1023]\)</span>；</li></ol></li><li><span class="math inline">\(M = 1.frac_{(2)}\)</span>；</li></ol></li><li>非规格化Denormalized：exp全为0；<ol type="1"><li><span class="math inline">\(E = 1 - Bias\)</span>；</li><li><span class="math inline">\(M = frac\)</span>；</li></ol></li><li>特殊值Special Values：exp全为1；<ol type="1"><li>exp全为1，frac全为0，s = 0表示正无穷<span class="math inline">\(+\infty\)</span>，s = 1表示负无穷<span class="math inline">\(-\infty\)</span>；</li><li>exp全为1，frac不为0，表示NaN，不是一个数；<br><img src="3.png"></li></ol></li></ol><ul><li>分布特点：在0附近均匀分布，到外面扩大（指数分布）；</li><li>舍入规则：4舍6入5向偶；（不在考试范围内）；</li><li>类型转换：<ul><li><span class="math inline">\(double/float\rightarrow int\)</span><ul><li>直接对实际存储的二进制串进行位截断；</li><li>体现为向0舍入；</li><li>超界的情况转化为<span class="math inline">\(T_{min}\)</span>；</li></ul></li><li><span class="math inline">\(int \rightarrow float\)</span><ul><li>位数相同，不会截断，但可能会发生舍入；</li></ul></li><li><span class="math inline">\(int/float \rightarrow double\)</span><ul><li>double的有效位数更多，所以能保留精确度；</li></ul></li><li><span class="math inline">\(double \rightarrow float\)</span><ul><li>能表达的范围变小，可能溢出为<span class="math inline">\(\infty\)</span>，并且精度降低，可能发生舍入；</li></ul></li></ul></li></ul><p><img src="4.png"><br>解答：<br>1. x如果很大，(float)x会发生舍入；<br>2. double表示范围大于int，所以能精确表示；<br>3. 同理2；<br>4. (float)d会发生溢出或舍入；<br>5. 没问题，-f或者-d就是符号位取反即可；</p><ul><li>同时，注意浮点数加法运算不满足结合律；</li></ul>]]></content>
    
    
    <summary type="html">浮点数的机器表示</summary>
    
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 02-Bits-ints-part2</title>
    <link href="https://yokumii.github.io/blog/2025/01/04/CSAPP%2002-Bits-ints-part2/"/>
    <id>https://yokumii.github.io/blog/2025/01/04/CSAPP%2002-Bits-ints-part2/</id>
    <published>2025-01-04T04:44:00.000Z</published>
    <updated>2025-01-04T06:07:20.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="addition加法">Addition加法</h1><ol type="1"><li>无符号数加法：<span class="math inline">\(s = UAdd_w(u,v) = (u +v)\%2^w\)</span>；结果寄存器会截断溢出的1位；<ol type="1"><li>溢出时，结果一定小于任何一个加数；</li></ol></li><li>有符号数加法：<span class="math inline">\(s = (int)((unsigned)u +(unsigned)v)\)</span>；<ol type="1"><li>正溢出：<span class="math inline">\(x + y \ge2^{w-1}\)</span>，截断后结果为<span class="math inline">\(x + y -2^w\)</span>；</li><li>负溢出：<span class="math inline">\(x + y &lt;2^{w-1}\)</span>，截断后结果为<span class="math inline">\(x + y +2^w\)</span>；</li><li>正 + 负：不可能溢出；</li></ol></li><li>用加法实现减法：<span class="math inline">\((A - B)_{\text{补}} =(A)_\text{补} + (-B)_\text{补}\)</span><ol type="1"><li>如何求<span class="math inline">\((-B)_\text{补}\)</span><br><span class="math inline">\((B)_\text{补} + (-B)_\text{补} = 11\cdots1\)</span><br><span class="math inline">\(\sim(B)_\text{补} + (B)_\text{补} + 1 =11\cdots 1 + 1 = 0\)</span><br><span class="math inline">\((-B)_\text{补} = \sim (B)_\text{补} +1\)</span></li></ol></li><li>加法逆元：<ol type="1"><li>无符号数：<span class="math inline">\(-x = 2^w - x(x \ne0)\)</span>，0的逆元是0；</li><li>有符号数：<span class="math inline">\(x + (-x) =0\)</span>，注意特例<span class="math inline">\(T_{min},10\cdots 0 +10\cdots 0 = 0\)</span>，即<span class="math inline">\(-T_{min} =T_{min}\)</span>；</li></ol></li></ol><h1 id="adder加法器">Adder加法器</h1><p><img src="1.png"><br>* 当做减法(Sub = 1)或产生进位(Co = 1)时，CF =1，表示发生借位或进位；<br>* SF = 运算结果的符号位；<br>* ZF = 1 if Sum = 0；<br>* OF = 1 if 两个加数同号但与Sum异号(即上述发生溢出的情形)；<br><img src="2.png"><br>以上题为例：</p><pre class="c"><code>unsigned int x = 1000 0110;unsigned int y = 1111 0110; // -y_补 = 00001010int m = x = 1000 0110 = -122;int n = y = 1111 0110 = -10;# CF = 1(减法有借位)，OF = 0(并没有溢出），SF = 1；unsigned int z1 = x - y = 1000 0110 + 00001010 = 10010000 = 144;int k1 = m - n = 10010000 = -112 = -112 - (-10);# CF = 1(有进位)，OF = 1(发生溢出)，SF = 0；unsigned int z2 = x + y = 1000 0110 + 11110110 = 01111100 = 124 = (134 + 246) % 256;int k2 = m + n = 01111100 = 124 = -122 - 10 + 256;</code></pre><h1 id="multiplication">Multiplication</h1><ol type="1"><li>无符号数乘法：和加法类似进行截断；</li><li>补码乘法：先按无符号数进行乘法运算截断，然后将结果转化为有符号数；</li><li>变量与常数之间的乘运算（左移）：<img src="3.png"></li><li>变量与常数之间的除运算（算术右移）：<img src="4.png"></li><li>如果负数要向0取整，记得加偏移量；即：<span class="math inline">\(x =(x + 1&lt;&lt;k-1)&gt;&gt;k\)</span>；</li></ol>]]></content>
    
    
    <summary type="html">数据运算</summary>
    
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 02-Bits-ints-part1</title>
    <link href="https://yokumii.github.io/blog/2025/01/04/CSAPP%2002-Bits-ints-part1/"/>
    <id>https://yokumii.github.io/blog/2025/01/04/CSAPP%2002-Bits-ints-part1/</id>
    <published>2025-01-04T01:24:00.000Z</published>
    <updated>2025-01-04T06:24:37.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="word-size-字长">Word Size 字长</h1><ul><li>32位(bits)机器，字长为4Bytes(32/8)，寻址空间为<span class="math inline">\(2^{32} = 4 * 2^{30} = 4GB\)</span>；</li><li>内存中的管理方式如下，32位的机器最小连续字间隔4Byte，64位的机器最小连续字间隔8Byte，字节Byte是最基本存储单元；<img src="1.png"></li></ul><h1 id="数据表示">数据表示</h1><ul><li>int可以跨平台兼容，long和pointer一样：<br><img src="2.png"></li></ul><h1 id="数据的存储排列">数据的存储排列</h1><p><img src="8.png"><br>解答：0x08000100；</p><h1 id="字的存放问题">字的存放问题</h1><ul><li>大端法（高对低，最低有效字节在高低址）；</li><li>小端法（低对低，最低有效字节在最前（低地址））</li><li>以<code>int x = 0x01234567, &amp;x = 0x100</code>为例：</li></ul><table><thead><tr><th>Address</th><th>0x100</th><th>0x101</th><th>0x102</th><th>0x103</th></tr></thead><tbody><tr><td>Big Endian</td><td>01</td><td>23</td><td>45</td><td>67</td></tr><tr><td>Little Endian</td><td>67</td><td>45</td><td>23</td><td>01</td></tr></tbody></table><pre class="c"><code>#include &lt;stdio.h&gt;typedef unsigned char *pointer;void show_bytes(pointer start, size_t len)&#123; // 从数据的指针开始打印数据，即从低地址开始打印    size_t i;    for (i = 0; i &lt; len; i++)        printf(&quot;%p\t0x%.2x\n&quot;,start+i, start[i]);    printf(&quot;\n&quot;);&#125;int main(void) &#123;    int a = 15213; // 15213 = 00 00 3b 6d;    printf(&quot;int a = 15213;\n&quot;);    show_bytes((pointer) &amp;a, sizeof(int));        int b = -15213;    printf(&quot;int b = -15213;\n&quot;);    show_bytes((pointer) &amp;b, sizeof(int));        char s[6] = &quot;18213&quot;;    printf(&quot;string s = \&quot;18213\&quot;\n&quot;);    show_bytes((pointer) &amp;s, sizeof(s));    return 0;&#125;</code></pre><ul><li>注意对于字符数组，存储时每个字符按照小端法存储，所以表现出来的结果是整个字符串小端法和大端法没有区别；</li></ul><h1 id="字的边界对齐问题">字的边界对齐问题</h1><ul><li>按边界对齐：（以32位机器为例，按字节编址，4个字节同时读写）<ul><li>字地址：4的倍数；</li><li>半字地址：2的倍数；</li><li>字节地址：任意；</li></ul></li><li>浪费了一些空间，但减少了访存次数；<br><img src="3.png"></li></ul><h1 id="运算">运算</h1><h2 id="布尔运算">布尔运算</h2><ul><li>按位与，按位取反；</li><li><span class="math inline">\(\sim 0x41(01000001) \rightarrow 10111110= 0xBE\)</span>；</li><li><span class="math inline">\(\sim 0x00\rightarrow0xFF\)</span>；</li><li><span class="math inline">\(0x69 \&amp; 0x55 \rightarrow 01101001\&amp; 01010101 = 01000001\)</span></li></ul><h2 id="逻辑运算">逻辑运算</h2><ul><li><code>||, &amp;&amp;, !</code>，注意与布尔运算区别，运算的结果只有0或1（运算结果只要不为0false，就是1true）；</li></ul><h2 id="移位运算">移位运算</h2><ul><li>只需注意算术右移左边填充符号位即可；</li></ul><h1 id="无符号数和有符号数的位级表示">无符号数和有符号数的位级表示</h1><ul><li>运算时，有符号数优先转化为无符号数；</li></ul><table><colgroup><col style="width: 33%"><col style="width: 6%"><col style="width: 3%"><col style="width: 56%"></colgroup><thead><tr><th>关系表达式</th><th>运算类型</th><th>结果</th><th>说明</th></tr></thead><tbody><tr><td><span class="math inline">\(0 == 0U\)</span></td><td>unsigned</td><td>True</td><td></td></tr><tr><td><span class="math inline">\(-1 &lt; 0\)</span></td><td>signed</td><td>True</td><td></td></tr><tr><td><span class="math inline">\(-1 &lt; 0U\)</span></td><td>unsigned</td><td>False</td><td><span class="math inline">\(-1 = 1\cdots 1_2 = U_{max} &gt;0\)</span></td></tr><tr><td><span class="math inline">\(2147483647(2^{31} - 1) &gt; -2147483637- 1\)</span></td><td>signed</td><td>True</td><td></td></tr><tr><td><span class="math inline">\(2147483647U &gt; -2147483637 -1\)</span></td><td>unsigned</td><td>False</td><td><span class="math inline">\(-2147483637 - 1 = T_{min} \rightarrow1\cdots 0U = 2^{31} &gt; 2^{31} - 1\)</span></td></tr><tr><td><span class="math inline">\(2147483647 &gt;(int)2147483648U\)</span></td><td>signed</td><td>True</td><td><span class="math inline">\((int)2147483648U = 1\cdots 0 =-2^{31}\)</span></td></tr><tr><td><span class="math inline">\(-1 &gt; -2\)</span></td><td>signed</td><td>True</td><td></td></tr><tr><td><span class="math inline">\((unsigned)-1 &gt; -2\)</span></td><td>unsigned</td><td>True</td><td><span class="math inline">\((unsigned)-1 = U_{max}\)</span></td></tr></tbody></table><ul><li>数据类型只决定读取方式，不改变存储方式(01串)；</li><li>一些另外的注意点：<img src="4.png"><code>sizeof()</code>返回的类型为unsignedint，所以以下代码会导致死循环：<img src="5.png"></li></ul><h1 id="位扩展和位截断">位扩展和位截断</h1><h2 id="sign-extension">Sign Extension</h2><ul><li>根据最高位决定补0或者补1；</li></ul><h2 id="sign-truncation">Sign Truncation</h2><ul><li>无符号数截断<span class="math inline">\(B2U_k(x_{k-1}\cdots x_0) =B2U_w(x_{w-1}\cdots x_k x_{k-1}\cdots x_0) \% 2^k\)</span></li><li>有符号数截断<span class="math inline">\(B2T_k(x_{k-1}\cdots x_0) =U2T_w(B2U_w(x_{w-1}\cdots x_k x_{k-1}\cdotsx_0)\%2^k)\)</span>，即先截断，再重新解释；</li><li>例子：<br><img src="6.png"><br>解答：</li></ul><pre class="c"><code>short si = 0x 80 00 = -32768;unsigned short usi = 0x 80 00 = 32768;int i = 0x FF FF 80 00 = -32768;unsigned ui = 0x 00 00 80 00 = 32768;</code></pre><p><img src="7.png"><br>解答：</p><pre class="c"><code>int i = 0x 00 00 80 00 = 32768;short si = (short)i = 0x 80 00 = -32768;int j = si = 0x FF FF 80 00 = -32768;</code></pre>]]></content>
    
    
    <summary type="html">无符号编码，补码</summary>
    
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 01-Overview</title>
    <link href="https://yokumii.github.io/blog/2025/01/03/CSAPP%2001-Overview/"/>
    <id>https://yokumii.github.io/blog/2025/01/03/CSAPP%2001-Overview/</id>
    <published>2025-01-03T13:27:00.000Z</published>
    <updated>2025-01-04T01:32:48.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序的执行过程">程序的执行过程</h1><p><img src="1.png"></p><ul><li>编辑代码：高级程序语言阶段</li><li>Compiler编译器：汇编代码（指令操作用助记符表示）</li><li>Assembler汇编器：将汇编代码转为机器指令（01字符串）</li><li>执行机器代码，调度硬件，运行程序；</li></ul><h1 id="cpu">8086CPU</h1><p><img src="2.png"></p><blockquote><p>通用寄存器组GPRS<br>&gt;数据寄存器：<br>&gt;&gt;AX：累加器；<br>&gt;&gt;BX：基地址(Base)；<br>&gt;&gt; CX：计数寄存器(Counter)；<br>&gt;&gt; DX：数据寄存器；<br>&gt;地址寄存器：<br>&gt;&gt;SP：堆栈指针Stack Pointer；<br>&gt;&gt;BP：基址指针Base Pointer；<br>&gt;&gt;DI：目标地址Dest；<br>&gt;&gt;SI：源地址Source；</p></blockquote><blockquote><p>内部寄存器<br>&gt;CS：代码段code；和IP一起得到下一条指令的地址；<br>&gt;DS：数据段data；<br>&gt;SS：堆栈段；函数调用时的返回地址、局部变量和参数等；<br>&gt;ES：附加段：<br>&gt;IP：指令指针；总是指向<strong>当前正在执行的指令的下一条指令的偏移地址</strong>；</p></blockquote><blockquote><p>标志寄存器：<br>&gt;OF：溢出标志Overflow；<br>&gt;DF：方向Direction；<br>&gt;IF：中断允许；<br>&gt;SF：符号（ = 运算结果的最高位）；<br>&gt;ZF：零标志（运算结果 = 0时，ZF = 1）；<br>&gt;AF：辅助进位；<br>&gt;PF：奇偶（低8位满足偶校验，PF = 1）；<br>&gt;CF：进位/借位；</p></blockquote><ul><li>8086的地址总线为20，总共可寻址空间为<span class="math inline">\(2^{20} = 2MB\)</span>；</li></ul><h1 id="一个完整程序的执行过程">一个完整程序的执行过程</h1><ol type="1"><li>从键盘上读取hello命令，即从键盘到I/O中继器再到CPU；<img src="3.png"></li><li>从磁盘(外存)加载可执行文件到主存(内存)，在这之前CPU先向主存发送读取的指令；<img src="4.png"></li><li>执行程序，将输出字符串从存储器写到显示器，即CPU先从内存上获取字符串的地址存入寄存器，再控制I/O设备输出到图形化窗口；<img src="5.png"></li></ol>]]></content>
    
    
    <summary type="html">计算机系统漫游</summary>
    
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="https://yokumii.github.io/blog/2024/12/26/KMP%E7%AE%97%E6%B3%95/"/>
    <id>https://yokumii.github.io/blog/2024/12/26/KMP%E7%AE%97%E6%B3%95/</id>
    <published>2024-12-26T08:49:00.000Z</published>
    <updated>2024-12-28T02:49:06.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="next数组">next数组</h1><blockquote><p><code>next[j]=k</code>：k是当模式串中第j个字符与主串中相应字符“失配”时，在模式串中需重新和主串中该字符进行比较的字符的位置。</p></blockquote><p><span class="math display">\[\left.{next[j]=}\left\{\begin{array}{ll}\mathbf{0} &amp; \text{当 j=1 时(代表下一趟比较}\mathrm{i=i+1,j=1})\\\\\mathbf{max\{k\mid1&lt;k&lt;j}\text{且前k -1个元素和后k-1个元素一致}\}&amp;\text{此集合不为空时,下一趟比较i = i ,j= k}\\\\\mathbf{1}&amp;\text{其它情況(即$j \ne1且上述集合为空$)}\end{array}\right.\right.\]</span></p><blockquote><p><strong>快速填写记法：</strong></p><p>（1）字符串从1开始标号；</p><p>（2）next[1]默认为0；</p><p>（3）next[i] = 前 i -1 位字符串公共前后缀的长度 + 1；</p><p><strong>Notice：</strong></p><p>前缀：除最后一个字符外，一个字符串的全部头部组合；</p><p>后缀：除第一个字符外，一个字符串全部的尾部组合；所以，<code>"aaa"</code>的公共前缀和长度为2。</p></blockquote><pre class="c"><code>void GetNext(const char *T, int *next) &#123;    int j = 1, k = 0; // j 表示模式串位置, k 是前缀长度    next[1] = 0;      // 初始化 next 数组    while (j &lt; strlen(T)) &#123;        if (k == 0 || T[j] == T[k]) &#123;            j++;            k++;            next[j] = k; // 更新 next[j]        &#125; else &#123;            k = next[k]; // 回退        &#125;    &#125;&#125;</code></pre><h1 id="nextval数组">nextval数组</h1><blockquote><p><strong>引入原因</strong>：next数组中，前后两个相邻的字母如果相同，在匹配过程中遇到需要回退的情况，可以跳过回退到该字母。</p></blockquote><p><span class="math display">\[\begin{array}{l}nextval[i] &amp; = 1\\nextval[i] &amp; = \left\{\begin{array}{ll}nextval[i] = nextval[next[i]] &amp; \text{当$Pattern_i =Pattern_{next[i]}$时}\\\\nextval[i] = next[i] &amp; \text{当$Pattern_i \nePattern_{next[i]}$时}\end{array}\right.\end{array}\]</span></p><p><img src="KMP.png"></p><h1 id="完整代码">完整代码</h1><pre class="c"><code>#include &lt;stdio.h&gt;#include &lt;string.h&gt;void GetNextVal(const char *T, int *nextval) &#123;    int j = 1, k = 0; // j 表示模式串位置, k 是前缀长度    nextval[1] = 0;   // 初始化 nextval 数组        while (j &lt; strlen(T)) &#123;        if (k == 0 || T[j] == T[k]) &#123;            j++;            k++;            if (T[j] != T[k]) &#123;                nextval[j] = k; // 当 T[j] ≠ T[next[j]] 时，直接赋值            &#125; else &#123;                nextval[j] = nextval[k]; // 当 T[j] == T[next[j]] 时，优化跳跃            &#125;        &#125; else &#123;            k = nextval[k]; // 回退        &#125;    &#125;&#125;int Index_KMP(const char *S, const char *T, int pos) &#123;    int nextval[100]; // 假设模式串长度不超过 100    GetNextVal(T, nextval); // 生成 nextval 数组        int i = pos; // 主串的当前指针    int j = 1;   // 模式串的当前指针        printf(&quot;i\tj\n&quot;);    while (i &lt;= strlen(S) &amp;&amp; j &lt;= strlen(T)) &#123;        printf(&quot;%d\t%d\n&quot;, i, j); // 输出当前的 i 和 j 值                if (j == 0 || S[i - 1] == T[j - 1]) &#123;            i++;            j++;        &#125; else &#123;            j = nextval[j]; // 模式串向右移动        &#125;    &#125;        if (j &gt; strlen(T)) &#123;        return i - strlen(T); // 匹配成功，返回匹配位置    &#125; else &#123;        return 0; // 匹配失败    &#125;&#125;int main() &#123;    const char S[] = &quot;abcaacabcab&quot;; // 主串    const char T[] = &quot;abcab&quot;;       // 模式串        printf(&quot;主串: %s\n&quot;, S);    printf(&quot;模式串: %s\n&quot;, T);    printf(&quot;匹配过程:\n&quot;);        int pos = Index_KMP(S, T, 1); // 从第一个字符开始匹配        if (pos &gt; 0) &#123;        printf(&quot;匹配成功，位置: %d\n&quot;, pos);    &#125; else &#123;        printf(&quot;匹配失败\n&quot;);    &#125;    return 0;&#125;</code></pre>]]></content>
    
    
    <summary type="html">KMP算法自用</summary>
    
    
    
    <category term="数据结构" scheme="https://yokumii.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://yokumii.github.io/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://yokumii.github.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构Review</title>
    <link href="https://yokumii.github.io/blog/2024/12/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84Review/"/>
    <id>https://yokumii.github.io/blog/2024/12/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84Review/</id>
    <published>2024-12-20T14:36:00.000Z</published>
    <updated>2025-01-02T07:38:11.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="chapter1-概论">Chapter1 概论</h2><ul><li>数据、数据元素、数据项、数据对象、数据结构等基本概念<img src="概论概念.png"><img src="概论概念2.png"><img src="概论概念3.png"></li><li>逻辑结构，存储结构及数据运算的含义及其相互关系<img src="存储结构.png"><img src="相互关系.png"></li><li>算法评价标准：正确性、可读性、健壮性、效率与存储量需求、支持分布式和并行处理的算法在大数据场景下更有优势。</li></ul><h2 id="chapter2-线性表">Chapter2 线性表</h2><h3 id="链表">2.2链表</h3><ul><li>头节点的使用：头节点的指针域指向第一个数据节点的地址<img src="头节点.png"></li></ul><h2 id="chapter3-栈队列">Chapter3 栈、队列</h2><h3 id="栈">3.1 栈</h3><h4 id="顺序栈">3.1.1 顺序栈</h4><ul><li>非空栈中的栈顶指针<strong>top来指向栈顶元素的下一个位置</strong>；</li><li>空栈时top = base，栈中元素的数量 = top - base；<br>#### 3.1.2 链栈</li><li>链表指针方向是从栈顶指向栈底；</li></ul><h4 id="应用">3.1.3 应用</h4><ul><li>括弧匹配检验</li><li>中缀表达式：左括号在栈外时优先级最高，在栈内时优先级很低，仅高于栈外的右括号；</li><li>后缀表达式；<img src="中缀后缀转换.png"></li><li>尾递归：递归调用出现在函数中的最后一行，并且没有任何局部变量参与最后一行代码的计算。此时支持“尾递归优化”的编程语言就可以在执行尾递归代码时不进行入栈操作；</li></ul><h3 id="队列">3.2 队列</h3><h4 id="顺序队列">3.2.1 顺序队列</h4><ul><li>队空是front = rear =0；非空队列头指针始终指向队列头元素，而尾指针始终指向<strong>队列尾元素的下一个位置</strong>。</li><li>循环队列：解决“假溢出”；判空采用：front ==rear；判满采用：少用一个元素空间，当队尾指针加1就会从后面赶上队头指针，这种情况下队满的条件是：(rear+1)% MAXSIZE == front；<br>#### 3.2.2 链队</li></ul><h2 id="chapter4-串">Chapter4 串</h2><h3 id="串的基本操作">4.1 串的基本操作</h3><pre class="c"><code>Concat(&amp;T, S1, S2); // 用T返回由S1和S2连接而成的新串两串SubString(&amp;Sub, S, pos, len); // 用Sub返回S字符串第pos个位置开始的长度为len的子串StrCompare(S, T); // 两串比较S &gt; T，返回值 &gt; 0；S = T，返回值 = 0；S &lt; T，返回值 &lt; 0；Index(S, T, pos); // 在S中第pos个位置开始后的部分找到与T相同的子串，返回第一次出现的位置，未找到则返回 0Replace(&amp;S, T, V); // 用V替换S中与T相等的不重叠子串StrInsert(&amp;S, pos, T); // 在S的第pos个位置前插入TStrDelete(&amp;S, pos, len); // 在S中的第pos个位置开始删除长度为len的子串</code></pre><h3 id="串的模式匹配算法">4.2 串的模式匹配算法</h3><h4 id="简单模式匹配算法brute-force">4.2.1 简单模式匹配算法BruteForce</h4><p>逐个遍历字符串的每个字母，并逐个检查从它开始的长为len个的字符是否匹配；</p><pre class="c"><code>int Index(SString S, SString T, int pos) &#123;    i = pos;  j = 1;    while (i &lt;= S[0] &amp;&amp; j &lt;= T[0]) &#123;        if (S[i] == T[j]) &#123;             ++i;            ++j;         &#125;        // 继续比较后继字符        else &#123;             i = i-j+2;            j = 1;        &#125;         // 指针后退重新开始匹配    &#125;    if (j &gt; T[0])         return i-T[0];    else return 0;&#125; // Index</code></pre><p>最好情况下平均时间复杂度为<span class="math inline">\(O(m +n)\)</span>，最坏情况下为<span class="math inline">\(O(m *n)\)</span>。<br>#### 4.2.2 KMP算法<br>见<a href="https://yokumii.github.io/blog/2024/12/26/KMP%E7%AE%97%E6%B3%95/">KMP算法</a>。</p><h2 id="chapter5-数组与广义表">Chapter5 数组与广义表</h2><h3 id="数组">5.1 数组</h3><ul><li>数组是线性表的扩展，其数据元素本身也是线性表；</li><li>数组中各元素都具有统一的类型；<br>### 5. 2 矩阵的压缩存储</li><li>目的是为了节省空间；<br>#### 5.2.1 对称矩阵<br>#### 5.2.2 带状矩阵<br>#### 5.2.3 随机稀疏矩阵<br>（1）顺序存储方法：三元表法<br>（2）链式存储方法：十字链表法<br>在行、列两个方向上，将非零元素链接在一起。克服三元组表在矩阵的非零元素位置或个数经常变动时的使用不便。<img src="十字链表法.png"><br>### 5.3 广义表</li><li>广义表是由零个或多个原子或者子表组成的有限序列；<ul><li>原子：逻辑上不能再分解的元素；</li><li>子表：作为广义表中元素的广义表；</li></ul></li><li>广义表中的元素全部为原子时即为线性表，线性表是广义表的特例，广义表是线性表的推广；</li><li>一般用大写字母表示广义表的名称，用小写字母表示原子；</li><li>表的长度：表中的（第一层）元素个数；</li><li>表的深度：表中元素的最深嵌套层数；</li><li>表头：表中的第一个元素；</li><li>表尾：除第一个元素外，剩余元素<strong>构成的广义表</strong>。任何一个非空广义表的表尾必定仍为广义表；</li></ul><h2 id="chapter-6-树和二叉树">Chapter 6 树和二叉树</h2><h3 id="树">6.1 树</h3><h3 id="二叉树">6.2 二叉树</h3><h3 id="线索二叉树">6.3 线索二叉树</h3><ul><li>如果无左孩子，那利用左孩子指针指向直接前驱节点；如果无右孩子，那利用右孩子指针指向直接后继节点；</li></ul><h3 id="树和森林">6.4 树和森林</h3><ul><li>孩子兄弟链表表示法：左孩子，右兄弟；<br>#### 6.4.1 树转化为二叉树</li></ul><ol type="1"><li>在所有兄弟结点之间加一条连线；</li><li>对每个结点，除了保留与其长子的连线外，去掉该结点与其他孩子的连线；</li><li>以根为轴心将整棵树顺时针转45度；<br>特点：无右子树、左支是孩子、右支是兄弟；<br>#### 6.4.2 森林转化为二叉树</li><li>先将森林的每一个树转化为二叉树；</li><li>从后一棵树开始，将后一棵树作为前一棵树的右子；<br>#### 6.4.3 二叉树转化为树/森林</li><li>把双亲节点的左孩子的右孩子、右孩子的右孩子、……和双亲节点连接起来；</li><li>删除所有双亲节点与右孩子的连线；</li></ol><h4 id="树的遍历">6.4.4 树的遍历</h4><p><img src="树的遍历.png"></p><h4 id="森林的遍历">6.4.5 森林的遍历</h4><ul><li>先序遍历：逐棵先序遍历每棵子树/对应二叉树的先序遍历；</li><li>中序遍历：逐棵中序遍历每棵子树/对应二叉树的中序遍历；</li><li><h2 id="chapter7-图">Chapter7 图</h2><h3 id="一些基本概念">7.1 一些基本概念：</h3><img src="路.png"><br><img src="连通.png"><br><img src="强连通.png"><br><img src="连通分量.png"><br><img src="子图.png"></li></ul><h3 id="图的基本存储结构">7.2 图的基本存储结构</h3><p><img src="图的存储结构比较.png"><br><img src="十字表法.png"></p><h3 id="最小生成树">7.3 最小生成树</h3><p><img src="最小生成树.png"></p><h3 id="拓扑排序">7.4 拓扑排序</h3><h4 id="无前驱的顶点优先算法">7.4.1 无前驱的顶点优先算法</h4><p><img src="无前驱的顶点优先算法.png"></p><h4 id="无后继的顶点优先">7.4.2 无后继的顶点优先</h4><p><img src="无后继的顶点优先.png"></p><h3 id="关键路径">7.5 关键路径</h3><h4 id="aoe网">7.5.1 AOE网</h4><p><img src="AOE网.png"><br><img src="AOE网2.png"></p><h4 id="关键术语">7.5.2 关键术语</h4><p><img src="AOE网关键概念.png"></p><h4 id="求解方法">7.5.3 求解方法</h4><p>希望求解关键路径，即源点到汇点最长的路径；</p><ol type="1"><li>对于事件<ol type="1"><li>最早发生时间：源点为0，其他点 = Max(源点到该事件的路径长度)；</li><li>最迟发生时间：（倒着算）汇点 = 最早发生时间，其他点 =Min(下一个点最早发生时间 -边权)；（为了保证下一个事件能最早发生，所以取最小的那个时间）</li></ol></li><li>对于活动<ol type="1"><li>最早发生时间：等于起始点事件的最早发生时间；</li><li>最迟发生时间：等于终点时间的最迟发生时间 - 边权；<br>关键路径为最迟发生时间 - 最早发生时间 = 0的边；</li></ol></li></ol><h2 id="chapter9-查找">Chapter9 查找</h2><h3 id="顺序查找">9.1 顺序查找</h3><pre class="c"><code>int Search_Seq(SSTable ST, KeyType key) &#123;    ST.elem[0].key = key; // 用作哨兵；    for (int i = ST.length; key != ST.elem[i].key; i--) &#123;        return i; // 找到了就返回正确的位置，没找到返回0；    &#125;&#125;</code></pre><p>监视哨的好处：无需进行边界检测，提高效率；</p><p>平均查找长度ASL：</p><p>（1）成功ASL：<span class="math inline">\((1 + n)* n /2 * \frac{1}{n}= \frac{n+1}{2}\)</span>；</p><p>（2）失败ASL：<span class="math inline">\(1 + n\)</span>；</p><h3 id="折半查找">9.2 折半查找</h3><h4 id="构建步骤">9.2.1 构建步骤</h4><p>（1）mid = (1 + n)/2 作为根节点，(1 + mid - 1)/2 作为它的左孩子，(mid+ 1 + n)/2 作为右孩子；<br>（2）如此构建折半查找树；</p><h4 id="平均查找长度asl">9.2.2 平均查找长度ASL</h4><ol type="1"><li>成功ASL：待查找的节点在第<span class="math inline">\(x\)</span>层，需要比较的次数就是<span class="math inline">\(x\)</span>，加权求和即可；</li></ol><h3 id="二叉排序树">9.3 二叉排序树</h3><h4 id="构建步骤-1">9.3.1 构建步骤</h4><p>（1）给定序列，第一个节点作为根节点；<br>（2）如果比上一个节点小，则放在它的左子树；比上一个节点大，则放在它的右子树；</p><h4 id="调整删除节点p">9.3.2 调整（删除节点*p）</h4><p>（1）p是叶子结点：修改双亲指针即可；<br>（2）p只有左（右）孩子：用它左（右）孩子的指针代替它即可；<br>（3）p有两个孩子：用它的中序后继（或前驱）代替它；其实就是<strong>左子树中最右或者右子树中最左</strong>的节点代替它。</p><h3 id="平衡二叉树">9.4 平衡二叉树</h3><h4 id="维持平衡操作">9.4.1 维持平衡操作</h4><blockquote><p><strong>最小不平衡子树</strong>：最下往上，第一个出现左右子树深度之差&gt; 1的节点。</p></blockquote><h5 id="ll型">1. LL型</h5><blockquote><p>新插入的节点在最小不平衡子树的左孩子的左子树；</p><p>调整方法：左孩子向右上旋转；<img src="LL.png"></p></blockquote><h5 id="rr型">2. RR型</h5><blockquote><p>新插入的节点在最小不平衡子树的右孩子的右子树；</p><p>调整方法：右孩子向左上旋转；（和LL型刚好相反）<img src="RR.png"></p></blockquote><h5 id="lr型">3.LR型</h5><blockquote><p>新插入的节点在最小不平衡子树的左孩子的右子树；</p><p>调整方法：左孩子的右子树先左上旋，再右上旋；<img src="LR.png"></p></blockquote><h5 id="rl型">4. RL型</h5><blockquote><p>新插入的节点在最小不平衡子树的右孩子的左子树；</p><p>调整方法：右孩子的左子树先右上旋，再左上旋；（和LR型刚好相反）<img src="RL.png"></p></blockquote><h3 id="b-树">9.5 B-树</h3><p>B-树是一种多叉平衡搜索树。</p><p>对于<span class="math inline">\(m\)</span>叉树，要求：<br>* 每个节点最多有<span class="math inline">\(m\)</span>个分支，<span class="math inline">\(m-1\)</span>个元素；<br>* 根节点最少有<span class="math inline">\(2\)</span>个分支，<span class="math inline">\(1\)</span>个元素；<br>* 其他节点最少有<span class="math inline">\(\left \lceil \frac{m}{2}\right \rceil\)</span>个分支，<span class="math inline">\(\left \lceil\frac{m}{2} \right \rceil - 1\)</span>个节点；</p><h4 id="b-树的构建和插入">9.5.1 B-树的构建和插入</h4><ol type="1"><li>先查找到插入到位置进行插入；</li><li>如果没有上溢出，无需调整；</li><li>如果发生上溢出，将第<span class="math inline">\(\left \lceil\frac{m}{2} \right\rceil\)</span>个元素（中间元素）向上移动，两边分裂（直至不发生上溢出）；</li></ol><h4 id="b-树的删除">9.5.2 B-树的删除</h4><p>B-树的根结点可以始终置于内存中；其余非叶结点放置在外存上，每一结点可作为一个读取单位（页/块）；<br>选取较大的阶次m，降低树的高度，减少外存访问次数；</p><h3 id="b树">9.6 B+树</h3><h2 id="chapter-10-内部排序">Chapter 10 内部排序</h2><pre class="cpp"><code>#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt; // 用于 sort 函数#define MAXSIZE 20using namespace std;typedef int KeyType;typedef struct &#123;    KeyType r[MAXSIZE+1];  //r[0]闲置或作哨兵    int length;&#125;SqList;void CinList(SqList &amp;L) &#123;    cin&gt;&gt;L.length;    for (int i = 1; i &lt;= L.length; i++) &#123;        cin&gt;&gt;L.r[i];    &#125;&#125;void CoutList(SqList L) &#123;    for (int i = 1; i &lt;= L.length; i++) &#123;        cout&lt;&lt;L.r[i]&lt;&lt;&quot; &quot;;    &#125;&#125;// 基于比较的内部排序// 直接插入排序void InsertSort(SqList &amp;L) &#123;    for (int i = 2; i &lt;= L.length; i++) &#123; // 循环 n - 1 次        if (L.r[i] &lt; L.r[i - 1]) &#123;            L.r[0] = L.r[i]; // 用作监视哨            L.r[i] = L.r[i - 1]; // 算一次移动            int j;            for (j = i - 2; L.r[0] &lt; L.r[j]; j--) &#123;                L.r[j + 1] = L.r[j]; // 后移一位            &#125;            L.r[j + 1] = L.r[0]; // 算一次移动        &#125;    &#125;    // 稳定排序；    // 排序过程中，数据前一部分逐渐有序，不过可能出现最后一趟之前数据均未在最终位置（最后一个数据为最小值，前 n - 1）个数据均需后移；    // 最好情况：只需比较 n - 1 次（即循环趟数），移动 0 次，时间复杂度为 O(n)；    // 最坏情况：第 i 趟需要比较 i 次（从 i - 1 比较到 0 ），移动 i + 1 次（前 i - 1 个均后移一次，监视哨放置 1 次，监视哨后移 1 次）；        // 比较次数 = (n + 2)(n - 1)/2，移动次数 = (n + 4)(n - 1)/2，时间复杂度为 O(n^2)；    // 平均时间 O(n^2)；    // 优化操作：        // （1）折半插入排序：在找插入位置时采用二分查找，减少了比较次数，移动次数不变；&#125;// 希尔排序void ShellSort(SqList &amp;L) &#123;    // 间隔步长d选点作为一组子表进行插排，不断缩小步长，代码略，不太可能考写代码；        // 不稳定排序；    // 最好情况和最坏情况和直接插排一样；    // 平均时间 O(n^1.3)；&#125;// 冒泡排序void BubbleSort(SqList &amp;L) &#123;    bool isSorted = true;    for (int i = 0; i &lt; L.length - 1 &amp;&amp; isSorted; i++) &#123; // 最多排 n - 1 趟        isSorted = false;        for (int j = 1; j &lt; L.length - i; j++) &#123;            if (L.r[j] &gt; L.r[j + 1]) &#123; // 下沉                L.r[0] = L.r[j];                L.r[j] = L.r[j + 1];                L.r[j + 1] = L.r[0]; // 交换过程，记为3次移动                isSorted = true; // 标志进行交换；            &#125;        &#125;    &#125;    // 稳定排序    // 最好情况：只需比较 n - 1 次，无需移动，时间复杂度为 O(n)；    // 最坏情况：需要 n - 1 趟，第 i 趟需要比较 n - i 次，移动 3 * (n - i) 次；        // 比较次数 = n(n - 1) /2，移动次数 = 3n(n - 1)/2，时间复杂度为 O(n^2)；    // 平均时间 O(n^2)；    // 特点是，在排序过程中，每一趟中最大的元素逐渐下沉至尾部，即最终位置上；&#125;// 快速排序的划分过程int Partition(SqList &amp;L, int low, int high) &#123;    KeyType pivotkey = L.r[low];    L.r[0] = L.r[low]; // 选择low作为支点，同时将low移动到辅助空间，low的位置空出来放下一个找到的元素；    while (low &lt; high) &#123; // low和high相遇时停止        while (low &lt; high &amp;&amp; L.r[high] &gt;= pivotkey) &#123; // 从后往前，找到第一个小于支点的元素，将它放到支点原来的位置；            high--;        &#125;        L.r[low] = L.r[high];        while (low &lt; high &amp;&amp; L.r[low] &lt;= pivotkey) &#123; // 从前往后，找到第一个大于支点的元素，将它放到刚刚空出来的位置；            low++;        &#125;        L.r[high] = L.r[low];    &#125;    L.r[low] = L.r[0]; // 将支点移回去；    return low; // 返回支点位置，用于划分不同序列；&#125;// 快速排序递归的辅助函数void Qsort(SqList &amp;L,int low, int high) &#123;    if (low &lt; high) &#123;        int pivotloc = Partition(L, low, high); // 进行划分，确定支点位置；        Qsort(L, low, pivotloc - 1);        Qsort(L, pivotloc + 1, high); // 对支点左右两部分继续进行划分；    &#125;&#125;// 快速排序void QuickSort(SqList &amp;L) &#123;    Qsort(L, 1, L.length);        // 不稳定排序    // 划分时，比较次数 &lt;= n 次，时间复杂度为O(n)，移动次数为 4 次（支点移到辅助空间，大于支点的节点移动，小于节点的支点移动，支点移回去）；    // 最好情况：划分时划分为左右两个等长子序列，需要排序的趟数 &lt;= log_2(n)，所以时间复杂度为 O(nlogn)；    // 最坏情况：初始完全逆序，每次划分只能将最大的，即支点移动到最后面，得到一个子序列，时间复杂度为 O(n^2)；    // 快速排序通常被认为是同数量级中时间复杂度为 O(nlogn) 中平均性能最好的；    // 采用递归实现的快排，递归层数 = 二叉树深度，即排序的趟数，所以理想空间开销为 O(logn) ，最坏开销为 O(n)；    // 特点是，每一趟排完后，支点的位置就在最终文字；&#125;// 选择排序void SelectSort(SqList &amp;L) &#123;    for (int i = 1; i &lt;= L.length - 1; i++) &#123; // n - 1 趟；        int k = i; // 记录待替换的元素位置；        for (int j = i + 1; j &lt;= L.length; j++) &#123; // 找到 i + 1 位置到结尾处最小的元素放到 i 位置；            if (L.r[j] &lt; L.r[k]) &#123;                k = j;            &#125;        &#125;        if (i != k) &#123;            L.r[0] = L.r[i];            L.r[i] = L.r[k];            L.r[k] = L.r[0];            // 交换元素，记为 3 次移动；        &#125;    &#125;        // 不稳定排序，找到最小的过程中，选择的是下标最大的最小值；    // 排序过程中，前一部分数据逐渐有序，且放置在最终位置上；    // 排序趟数为 n - 1 趟，第 i 趟的比较次数为，n - i，总比较次数为 (1 + n - 1)(n - 1)/2 = n(n - 1)/2；    // 每趟排序交换 1 次，记为 3 次移动，移动次数为 3(n - 1)次；    // 时间复杂度为 O(n^2)；&#125;// 完全二叉堆的概念：    // 小顶堆：每个节点的值都小于等于左右孩子的值；    // 大顶堆：每个节点的值都大于等于左右孩子的值；// 输出堆顶元素后调整堆的操作——筛选：    // （1）将堆底元素移到堆顶，此时堆的性质被破坏，但左右子树仍保持堆的局部性质；    // （2）将此时的堆顶元素与左右孩子中较大的元素交换，如此做，直到满足了堆的性质；// 堆的构建：给定某一序列后，从最后一个非叶子结点的子树开始从下往上调整；    // 对于完全二叉树，最后一个非叶子结点序号为 n/2；    // 筛选void HeapAdjust(SqList &amp;L, int root, int end) &#123; // root 是待调整的子树根节点的序号，end 是待调整的子树的最后一个节点    L.r[0] = L.r[root]; // 存储当前堆顶元素    for (int j = 2 * root; j &lt;= end &amp;&amp; j + 1 &lt;= end; j *= 2) &#123;        if (L.r[j] &lt; L.r[j + 1]) &#123;            j++; // j 表示左右孩子中较大的节点；        &#125;        if (L.r[0] &gt;= L.r[j]) &#123;            break; // 父节点大于左右孩子，满足大顶堆的性质；        &#125;        L.r[root] = L.r[j]; // 孩子节点换到根节点        root = j; // 此时根节点指向交换下去的节点    &#125;    L.r[root] = L.r[0];&#125;// 堆排序void HeapSort(SqList &amp;L) &#123;    // 建立堆    for (int i = L.length / 2; i &gt; 0; i--) &#123; // 从最后一个非叶子结点开始，逐步从下往上调整；        HeapAdjust(L, i, L.length);    &#125;        // 每次取出最大的元素（堆顶），和堆底元素交换，重新调整堆；    for (int i = L.length; i &gt; 1; i--) &#123;        L.r[0] = L.r[1];        L.r[1] = L.r[i];        L.r[i] = L.r[0]; // 交换堆顶和堆底，记为 3 次移动；        HeapAdjust(L, 1, i - 1); // 调整剩余部分 1 ～ i - 1；    &#125;        // 不稳定排序    // 对于二叉树，树高 k = 「log_2(n)」+ 1；    // 每次筛选，从根到叶子结点，最多经过 2(k - 1) 次比较（左右孩子比较，较大者与父节点比较，共 2 次），最多经过 k 次交换，即 3 * k 次移动；    // 堆排序需要经过 n - 1 次筛选；    // 时间复杂度为 O(nlogn)；    // 排序过程中，序列后面的数据逐渐有序，并且在最终位置；    // 对记录数较大的文件很有效；&#125;// 2-路归并排序基本思想：    // 含有一个元素的子表总是有序的，所以对相邻的含有一个元素的子表进行合并，得到表长 = 2 的有序表；如此做直至生成表长 = n 的有序表；共需要 「log_2(n)」 趟；    // 合并两张子表(left表示第一张表的开头，mid表示第一张表的结尾，mid + 1表示第二张表的开头，right表示第二张表的结尾)void Merge(int Source[], int* Dest, int left, int mid, int right) &#123;    int i = left, j = mid + 1, k = left;    while (i &lt;= mid &amp;&amp; j &lt;= right) &#123;        if (Source[i] &lt; Source[j]) &#123; // 先判断小于条件，保证排序稳定性！！！            Dest[k] = Source[i];            i++;        &#125;        else &#123;            Dest[k] = Source[j];            j++;        &#125;        k++;    &#125;        // 此时一个数组已空，另一个数组非空，将剩余元素放入Dest；    while (i &lt;= mid) &#123;        Dest[k] = Source[i];        k++, i++;    &#125;    while (j &lt;= mid) &#123;        Dest[k] = Source[j];        k++, j++;    &#125;&#125;// 归并排序的递归辅助函数void MSort(int Source[], int* Dest, int start, int end) &#123;    if (start == end) &#123; // 当数组长度为 1 时，该数组已经有序的，不用再分解；        Dest[start] = Source[start]; // 改成 Return 也一样；    &#125;    else &#123;        int mid = (start + end) / 2;        int Temp[MAXSIZE]; // 辅助数组；        MSort(Source, Temp, start, mid); // 将 Source[start:mid] 归并为有序的 Temp[start:mid]；        MSort(Source, Temp, mid + 1, end); // 将 Source[mid + 1:end]归并为有序的 Temp[mid + 1:end]；        Merge(Temp, Dest, start, mid, end); // 将有序子表 Temp[start:mid] 和 Temp[mid + 1:end] 合并为 Dest[start:end]    &#125;&#125;// 归并排序void MergeSort(SqList &amp;L) &#123;    MSort(L.r, L.r, 1, L.length);        // 稳定排序    // 空间复杂度为 O(n)；    // 归并趟数 = 「log_2(n)」，每趟归并需要移动 n 次，时间复杂度为 O(nlogn)；&#125;// 基于比较的内部排序总结：    // 插入排序：直接插入排序、希尔排序（特点是移动次数较多）；    // 交换排序：冒泡排序、快速排序（相邻元素之间作比较，比较次数较多）；    // 选择排序：简单选择排序、堆排序（比较次数较多）；    // 归并排序；    // 稳定排序有：直接插入排序、冒泡排序、归并排序；    // 快速排序是目前基于比较的内部排序中最好的方法；    // 关键字随机分布时，快速排序的平均时间最短，堆排序次之，但后者所需的辅助空间少；    // 当 n 较小时，可采用直接插入或简单选择排序，前者是稳定排序，但后者通常记录移动次数少于前者（插入排序可能会导致 n - 1 个元素都需要移动，而选择排序每次只需要交换 1 次）；    // 当 n 较大时，应采用时间复杂度为 O(nlogn) 的排序方法(主要为快速排序和堆排序)或者基数排序的方法，但基数排序对关键字的结构有一定要求；    // 假设有 n 个值不同的元素存于顺序结构中，要求不经排序选出前 k (k &lt;= n) 个最小元素，问哪些方法可用，哪些方法比较次数最少？这 k 个元素也要有序如何？        // 选择排序或冒泡排序：k 趟（数据比较次数约为 k * n 次）；        // 快速排序：每次仅对第一个子序列划分，直至子序列长度小于等于k；长度不足k，则再对其后的子序列划分出补足的长度即可；        // 堆排序：先建小根堆，k-1 次堆调整（数据比较次数约为 4n + (k-1)logn）；        // 基于分配的内部排序// 桶排序void BucketSort(SqList &amp;L) &#123;    // 找到数组中的最大值和最小值    KeyType maxVal = L.r[1], minVal = L.r[1];    for (int i = 2; i &lt;= L.length; i++) &#123;        if (L.r[i] &gt; maxVal) maxVal = L.r[i];        if (L.r[i] &lt; minVal) minVal = L.r[i];    &#125;        // 计算桶的数量和范围    int bucketCount = L.length;    vector&lt;vector&lt;KeyType&gt;&gt; buckets(bucketCount);        // 将元素分配到对应的桶中    double range = (double)(maxVal - minVal + 1) / bucketCount; // 每个桶的范围    for (int i = 1; i &lt;= L.length; i++) &#123;        int index = (L.r[i] - minVal) / range; // 根据范围计算桶索引        if (index &gt;= bucketCount) index = bucketCount - 1;        buckets[index].push_back(L.r[i]);    &#125;        // 对每个桶内部进行排序    for (int i = 0; i &lt; bucketCount; i++) &#123;        sort(buckets[i].begin(), buckets[i].end()); // 使用 STL 的 sort 排序    &#125;        // 将排序后的数据从桶中取出，放回原数组    int idx = 1;    for (int i = 0; i &lt; bucketCount; i++) &#123;        for (KeyType val : buckets[i]) &#123;            L.r[idx++] = val;        &#125;    &#125;        // 稳定排序；    // 空间复杂度为 O(n + k)，其中 n 为元素数量，k 为桶的数量；    // 平均时间复杂度为 O(n + klogk)，最坏情况时间复杂度为 O(n^2)（所有元素都落在同一个桶中）；    // 适合待排序数据值域较大但分布比较均匀；&#125;// 计数排序void CountSort(SqList &amp;L) &#123;    int maxVal = L.r[1], minVal = L.r[L.length];    // 查找最大值和最小值    for (int i = 2; i &lt;= L.length; i++) &#123;        if (L.r[i] &gt; maxVal) &#123;            maxVal = L.r[i];        &#125;        if (L.r[i] &lt; minVal) &#123;            minVal = L.r[i];        &#125;    &#125;        // 计数数组    int* C = new int[maxVal - minVal + 1]();    // 计数    for (int i = 1; i &lt;= L.length; i++) &#123;        C[L.r[i] - minVal]++;    &#125;        int k = 1;    for (int i = minVal; i &lt;= maxVal; i++) &#123;        for (int j = 0; j &lt; C[i - minVal]; j++) &#123;            L.r[k] = i;            k++;        &#125;    &#125;        // 稳定排序（上述实现过程简略，没有体现稳定排序）；    // 当输入的元素是 n 个 0 到 k 之间的整数时，时间复杂度是 O(n+k)，空间复杂度也是 O(n+k)，其排序速度快于任何比较排序算法；    // 当 k 不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。当 k &gt; n 时，效率下降；&#125;// 基数排序void RadixSort(SqList &amp;L) &#123;    // 稳定排序；    // 设记录数为 n ，关键字位数为 d ，基数为 r；    // 每一趟，分配复杂度为 O(n)，收集复杂度为 O(r)；    // 共需要排 d 趟，所以时间复杂度 O(d * (n + r)) = O(n)（r 和 d 均为常数）；    // 辅助空间：n 个记录游标，队头指针数组[0:r - 1]和队尾指针数组[0:r - 1]，空间复杂度为 O(n + r)；&#125;int main() &#123;    SqList L;    // 测试数据 6 0 -4 8 1 -4 -6    // 答案 -6 -4 -4 0 1 8    CinList(L);    // InsertSort(L);    // BubbleSort(L);    // QuickSort(L);    // SelectSort(L);    // HeapSort(L);    // MergeSort(L);    // BucketSort(L);    CountSort(L);    CoutList(L);    return 0;&#125;</code></pre><h2 id="chapter-11-外部排序">Chapter 11 外部排序</h2><h3 id="置换选择法">11.1 置换选择法</h3><p>意义是<strong>在内存工作区容量的限制下，获得尽可能长的初始归并段</strong>。<br>假设内存中用到的优先队列WA规模为<span class="math inline">\(5\)</span>，初始待排序文件FI：</p><p><code>5, 20, 26, 46, 31, 25, 16, 51, 17, 28, 1</code></p><p>文件放入内存工作区：<br>WA：<code>5,20,26,46,31</code>；</p><p>第一趟：<br>WA：<code>25,20,26,46,31</code>，第一个归并段：<code>5</code>；</p><p>第二趟：<br>WA：<code>25,16,26,46,31</code>，第一个归并段：<code>5,20</code>；</p><p>第三趟：（不能出最小的16，要出一个比20大的）<br>WA：<code>51,16,26,46,31</code>，第一个归并段：<code>5,20,25</code>；</p><p>第四趟：<br>WA：<code>51,16,17,46,31</code>，第一个归并段：<code>5,20,25,26</code>；</p><p>第五趟：<br>WA：<code>51,16,17,46,28</code>，第一个归并段：<code>5,20,25,26,31</code>；</p><p>第六趟：<br>WA：<code>51,16,17,1,28</code>，第一个归并段：<code>5,20,25,26,31,46</code>；</p><p>第七趟：<br>WA：<code>16,17,1,28</code>，第一个归并段：<code>5,20,25,26,31,46,51</code>；</p><p>第八趟～第十一趟：（此时剩余待排序文件无法放入第一个归并段，生成第二个归并段）<br>第二个归并段：<code>1,16,17,28</code>；</p><h3 id="最佳归并树">11.2 最佳归并树</h3><p>最佳归并树即<span class="math inline">\(k\)</span>叉(阶)哈夫曼树。设初始归并段为<span class="math inline">\(m\)</span>个，进行<span class="math inline">\(k-\)</span>路归并。<br>需要补充<span class="math inline">\(y\)</span>个虚段（用元素<span class="math inline">\(0\)</span>表示）：<span class="math inline">\((k -1) * x + k = m + y\)</span>。<br>注意虚段在画哈夫曼树之前先添加。</p><h3 id="败者树">11.3 败者树</h3><p>对于初始为升序的归并段进行多路归并，败者树中记录的冠军节点保存的是<strong>最小关键字所在的归并段号</strong>，分支节点保存的是失败者所在的归并段号。</p>]]></content>
    
    
    <summary type="html">数据结构Review</summary>
    
    
    
    <category term="数据结构" scheme="https://yokumii.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://yokumii.github.io/blog/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>匹配问题</title>
    <link href="https://yokumii.github.io/blog/2024/12/17/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <id>https://yokumii.github.io/blog/2024/12/17/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/</id>
    <published>2024-12-17T14:45:00.000Z</published>
    <updated>2024-12-18T14:39:33.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="匹配对集问题">匹配/对集问题</h1><h2 id="定义">定义</h2><blockquote><p><img src="匹配定义.png"><br>翻译成人话就是，匹配要求边集中任何两条边不相邻，最大匹配要求边数最多，完全匹配要求所有顶点都包含。</p></blockquote><h2 id="霍尔婚姻定理-halls-marriage-theorem">霍尔婚姻定理 HALL’SMARRIAGE THEOREM</h2><blockquote><p><img src="霍尔婚姻定理.png"></p></blockquote><h1 id="稳定匹配问题">稳定匹配问题</h1><blockquote><p><strong>问题描述</strong>：给出一个<span class="math inline">\(n\)</span>个男性的集合<span class="math inline">\(M\)</span>和<span class="math inline">\(n\)</span>个女性的集合<span class="math inline">\(W\)</span>，找到一个“稳定”匹配。</p><blockquote><p>每位男性根据对女性的心仪程度从高至低进行排名；<br>每位女性根据对男性的心仪程度从高至低进行排名；</p></blockquote><p><strong>不稳定对</strong>：给出一个完美匹配<span class="math inline">\(S\)</span>，男性<span class="math inline">\(m\)</span>和女性<span class="math inline">\(w\)</span>是不稳定的，如果同时满足下列条件：</p><blockquote><p><span class="math inline">\(m\)</span>相比起当前配偶，更喜欢<span class="math inline">\(w\)</span>；<br><span class="math inline">\(w\)</span>相比起当前配偶，更喜欢<span class="math inline">\(m\)</span>；</p></blockquote><p><strong>稳定匹配</strong>：一个不包含不稳定对的完美匹配。</p></blockquote><h3 id="gale-shapley-算法延迟决定法">Gale-Shapley算法（延迟决定法）</h3><p><img src="Gale-Shapley算法%20.png"></p><pre class="cpp"><code>#include&lt;iostream&gt;using namespace std;const int N = 10005;int M[N] = &#123;0&#125;, W[N] = &#123;0&#125;; // 第0个元素表示已经配对的男性/女性个数；男性和女性集合，0表示目前还单身，&gt;0表示已经和该数字对应的异性配对int M_pri[N][N] = &#123;0&#125;, W_pri[N][N] = &#123;0&#125;; // 第0个元素记录的是男生 m 在寻找心仪女生时的进度；男性和女性对异性的心仪程度排名void getPri(int n);void G_S(int num);void output(int num);bool lovemore(int m,int w,int num);// 获取心仪程度输入void getPri(int n) &#123;    for (int i = 1; i &lt;= n; i++) &#123;        for (int j = 1; j &lt;= n; j++) &#123;            cin &gt;&gt; M_pri[i][j]; // 表示第i位男性对女性心仪程度排名，M_pri[i][j]位女生排名第j名；        &#125;    &#125;    for (int i = 1; i &lt;= n; i++) &#123;        for (int j = 1; j &lt;= n; j++) &#123;            cin &gt;&gt; W_pri[i][j]; // 表示第i位女性对男性心仪程度排名，W_pri[i][j]位男生排名第j名；        &#125;    &#125;&#125;// Gale-Shapley 算法void G_S(int num) &#123;    int m, w;    while (M[0] != num) // 男生们还未完成配对    &#123;        w = m = 0;        while (M[++m] != 0) ; // 找到第一个出现的还没有配对的男生m        w = M_pri[m][++M_pri[m][0]]; // 找到第m位男生心中剩下排名第一的女生w        if (W[w])   //如果女生已经在约会了        &#123;            if (lovemore(m,w,num)) // 如果w更爱m            &#123;                M[W[w]] = 0; // w 甩了当前和她配对的                M[m] = w;                W[w] = m;               &#125;            else                 continue;        &#125;        else // 如果女生没有约会还是自由状态，成功配对        &#123;            M[m]=w;            M[0]++;            W[w]=m;            W[0]++;        &#125;    &#125;&#125;// 判断w是不是更爱mbool lovemore(int m,int w,int num) &#123;    for (int i = 0; i &lt; num; i++) &#123; // 按排名从高到低往下找        if (W_pri[w][i] == W[w]) &#123; // 先找到和w配对的那个            return false;        &#125;        if (W_pri[w][i] == m) &#123; // 先找到m，说明更爱m            return true;        &#125;    &#125;&#125;void output(int num) &#123;    for (int i = 1;i &lt;= num; i++)        cout&lt;&lt;&quot;(&quot;&lt;&lt;i&lt;&lt;&quot;, &quot;&lt;&lt;M[i]&lt;&lt;&quot;)&quot;&lt;&lt;endl;&#125;void solve() &#123;    int n;    cin&gt;&gt;n;    getPri(n);    G_S(n);    output(n);&#125;int main() &#123;    solve();    return 0;&#125;</code></pre>]]></content>
    
    
    <summary type="html">匹配问题</summary>
    
    
    
    <category term="图论" scheme="https://yokumii.github.io/blog/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://yokumii.github.io/blog/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>图论题型</title>
    <link href="https://yokumii.github.io/blog/2024/12/17/%E5%9B%BE%E8%AE%BA%E9%A2%98%E5%9E%8B/"/>
    <id>https://yokumii.github.io/blog/2024/12/17/%E5%9B%BE%E8%AE%BA%E9%A2%98%E5%9E%8B/</id>
    <published>2024-12-17T13:02:00.000Z</published>
    <updated>2024-12-22T08:16:41.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="度序列可简单图化">10.1.1 度序列可简单图化</h1><blockquote><p><strong>可简单图化的充要条件</strong>：<img src="Havel定理.png"></p><p><strong>例题</strong>：<img src="可简单图化例题.png"></p><blockquote><p><strong>解法</strong>：每次度序列按非递增顺序排列，删除度最大的节点，更新其他节点的度，重新排列，继续重复上述过程。有2种不合理的情况：<br>（1）某次对剩下序列排序后，最大的度数（设为d1）超过了剩下的顶点数；<br>（2）对最大度数后面的d1个数各减1后，出现了负数。</p></blockquote><p><strong>应用</strong>：<strong>Frogs' Neighborhood</strong></p><blockquote><p><strong>Description</strong></p><blockquote><p>未名湖附近共<span class="math inline">\(N\)</span>个大小湖泊<span class="math inline">\(L_1, L_2,\cdots, L_n\)</span>(其中包括未名湖)，每个湖泊<span class="math inline">\(L_i\)</span>里住着一只青蛙<span class="math inline">\(F_i(1 \le i \le N)\)</span>。如果湖泊<span class="math inline">\(L_i\)</span>和<span class="math inline">\(L_j\)</span>之间有水路相连，则青蛙<span class="math inline">\(F_i\)</span>和<span class="math inline">\(F_j\)</span>互称为邻居。现在已知每只青蛙的邻居数目<span class="math inline">\(x_1, x_2,\cdots, x_n\)</span>，请你给出每两个湖泊之间的相连关系。</p></blockquote><p><strong>Input</strong></p><blockquote><p>第一行是测试数据的组数<span class="math inline">\(T(0 \le T \le20)\)</span>。每组数据包括两行，第一行是整数<span class="math inline">\(N(2 &lt; N &lt; 10)\)</span>，第二行是<span class="math inline">\(N\)</span>个整数，<span class="math inline">\(x_1, x_2,\cdots, x_n(0\le x_i \le N)\)</span>。</p></blockquote><p><strong>Output</strong></p><blockquote><p>对输入的每组测试数据，如果不存在可能的相连关系，输出"NO"。否则输出"YES"，并用<span class="math inline">\(N\timesN\)</span>的矩阵表示湖泊间的相邻关系，即如果湖泊<span class="math inline">\(i\)</span>与湖泊<span class="math inline">\(j\)</span>之间有水路相连，则第<span class="math inline">\(i\)</span>行的第<span class="math inline">\(j\)</span>个数字为<span class="math inline">\(1\)</span>，否则为<span class="math inline">\(0\)</span>。每两个数字之间输出一个空格。如果存在多种可能，只需给出一种符合条件的情形。相邻两组测试数据之间输出一个空行。</p></blockquote></blockquote><blockquote><p><strong>Source</strong></p><blockquote><p><a href="http://poj.org/searchproblem?field=source&amp;key=POJ+Monthly--2004.05.15+Alcyone%40pku">POJMonthly--2004.05.15 Alcyone@pku</a></p></blockquote><p><strong>参考代码</strong></p></blockquote></blockquote><pre class="cpp"><code>#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;struct node &#123;    int degree, id; // 顶点的度数和标号&#125; v[20];int map[20][20];bool cmp(node a, node b) &#123;    return a.degree &gt; b.degree; // 按度数降序排序&#125;int main() &#123;    int t, n, flag;    scanf(&quot;%d&quot;, &amp;t);  // 输入测试数据组数    while (t--) &#123;        scanf(&quot;%d&quot;, &amp;n);  // 输入当前测试的顶点数量        for (int i = 0; i &lt; n; i++) &#123;            scanf(&quot;%d&quot;, &amp;v[i].degree);  // 输入每个顶点的度数            v[i].id = i;  // 记录顶点编号        &#125;        memset(map, 0, sizeof(map));  // 初始化邻接矩阵        flag = 1;        // 贪心算法：依次处理每个顶点，尝试连接符合要求的邻接顶点        for (int k = 0; k &lt; n; k++) &#123;            sort(v + k, v + n, cmp);  // 对剩余的顶点按度数排序            int i = v[k].id;  // 当前要连的顶点编号            int d1 = v[k].degree;  // 当前节点的度数            if (d1 &gt; n - k - 1) &#123;  // 如果当前节点的度数大于剩余顶点数，无法构图                flag = 0;                break;            &#125;            // 从当前顶点开始，逐步连接其邻居，并减少相应邻居的度数            for (int r = 1; r &lt;= d1 &amp;&amp; flag; r++) &#123;                int j = v[k + r].id;  // 当前要连接的顶点编号                if (v[k + r].degree &lt;= 0) &#123;  // 如果有度数为负的节点，说明构图失败                    flag = 0;                    break;                &#125;                v[k + r].degree--;  // 减少邻居的度数                map[i][j] = map[j][i] = 1;  // 在邻接矩阵中标记连接            &#125;        &#125;        if (flag) &#123;            printf(&quot;YES\n&quot;);            // 输出邻接矩阵            for (int i = 0; i &lt; n; i++) &#123;                for (int j = 0; j &lt; n; j++) &#123;                    if (j) printf(&quot; &quot;);                    printf(&quot;%d&quot;, map[i][j]);                &#125;                printf(&quot;\n&quot;);            &#125;        &#125; else &#123;            printf(&quot;NO\n&quot;);        &#125;        if (t) printf(&quot;\n&quot;);  // 如果不是最后一组数据，输出空行    &#125;    return 0;&#125;</code></pre><h1 id="计算两点之间长度为k的通路数counting-paths-by-adjacency-matrices">10.1.2计算两点之间长度为k的通路数Counting Paths by Adjacency Matrices</h1><p><img src="计算两点间通路数.png"><br>类似求传递闭包。<img src="计算两点间通路数2.png"></p><h1 id="section">10.1.3</h1>]]></content>
    
    
    <summary type="html">应试题型总结</summary>
    
    
    
    <category term="图论" scheme="https://yokumii.github.io/blog/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://yokumii.github.io/blog/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>平面图</title>
    <link href="https://yokumii.github.io/blog/2024/12/10/%E5%B9%B3%E9%9D%A2%E5%9B%BE/"/>
    <id>https://yokumii.github.io/blog/2024/12/10/%E5%B9%B3%E9%9D%A2%E5%9B%BE/</id>
    <published>2024-12-10T06:53:00.000Z</published>
    <updated>2025-01-07T07:11:45.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一定义">一、定义</h1><ul><li>如果一个图能画在平面上使得它的边仅在端点相交，则称这个图为可嵌人平面的，或称为<strong>平面图</strong>。平面图G的这样一种画法称为G的一个<strong>平面嵌人</strong>。<br><img src="平面图定义.png" alt="平面图定义"></li><li>一个平图<span class="math inline">\(G\)</span>把平面划分成若干个连通区域，这些区域的闭包称为<span class="math inline">\(G\)</span>的<strong>面</strong>。面边界回路的长度称为<strong>面的次数</strong>，记为<span class="math inline">\(Deg(f)\)</span>或<span class="math inline">\(d(f)\)</span>。</li><li>每个平图恰有一个无界的面，称为<strong>外部面</strong>。</li></ul><h1 id="二相关性质和定理">二、相关性质和定理</h1><h2 id="面的次数之和与边数关系">2.1 面的次数之和与边数关系</h2><blockquote><p><span class="math inline">\(\sum {d(f)} = 2\varepsilon\)</span></p></blockquote><h2 id="euler公式">2.2 Euler公式</h2><blockquote><p>若<span class="math inline">\(G\)</span>是连通平图，则有：<span class="math inline">\(\nu - \varepsilon + \phi = 2\)</span></p></blockquote><blockquote><p><strong>简单平面图存在一个度数小于5的顶点</strong>；<br># 三、判断方法<br># 3.1 必要条件<br>1. 若<span class="math inline">\(G\)</span>是<span class="math inline">\(v \ge 3\)</span>的简单平面图，则<span class="math inline">\(\varepsilon \le 3\nu - 6\)</span>。</p><ol start="2" type="1"><li>Euler公式</li></ol></blockquote><h2 id="kuratowskis-theorem库拉托夫斯基定理">3.2 Kuratowski’sTheorem(库拉托夫斯基定理)</h2><blockquote><p>一个图是平面图当且仅当它不包含<span class="math inline">\(K_{3,3}\)</span>或<span class="math inline">\(K_5\)</span>的剖分图.</p><blockquote><p><strong>剖分图</strong>：把<span class="math inline">\(G\)</span>的边进行一系列剖分得到的图<br><img src="K4剖分图.png" alt="K4剖分图"><br>剖分图也可以这么理解：即用Path代替Edge。<br>把边<span class="math inline">\((u, v)\)</span>删除，添加一个点<span class="math inline">\(w\)</span>，再添加两条边<span class="math inline">\((u,w)\)</span>和<span class="math inline">\((w,v)\)</span>，称之为<strong>初等细分</strong>；<br>得到的新图和原图称之为是<strong>同胚(Homeomorphic)的</strong>；</p></blockquote><blockquote><p><strong>Platonic Solids(柏拉图体)</strong>:<img src="柏拉图体1.png" alt="柏拉图体1"><br><strong>顶点数、边数(棱数)、面数的关系</strong>：<br>其中，<span class="math inline">\(v\)</span>表示顶点数，<span class="math inline">\(e\)</span>表示棱数，<span class="math inline">\(f\)</span>表示面数，<span class="math inline">\(k\)</span>为每个顶点的出发边的数目，<span class="math inline">\(l\)</span>为每个面上边的数目，<span class="math inline">\(\sum deg(v) = 2e = fl = kv\)</span>.<img src="柏拉图体2.png" alt="柏拉图体2"></p></blockquote></blockquote>]]></content>
    
    
    <summary type="html">平面图</summary>
    
    
    
    <category term="图论" scheme="https://yokumii.github.io/blog/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://yokumii.github.io/blog/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>计算机导论与程序设计复习</title>
    <link href="https://yokumii.github.io/blog/2024/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AF%BC%E8%AE%BA%E4%B8%8E%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0/"/>
    <id>https://yokumii.github.io/blog/2024/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AF%BC%E8%AE%BA%E4%B8%8E%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0/</id>
    <published>2024-12-10T05:21:00.000Z</published>
    <updated>2025-01-03T07:38:16.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一程序语言概述">一、程序语言概述</h2><ul><li>可编程<img src="可编程.png"></li><li><strong>计算机信息处理本质</strong>是:接收输入的数据、对输入的数据进行加工和处理、产生结果并输出。</li><li>程序可以预先存储在计算机中调度运行。计算机的操作是在程序的控制下进行的。</li><li>可编程结构、图灵机都是计算机模型。</li><li>冯诺依曼机</li><li>程序的运行就是不断地取指令、分析指令、执行指令的过程，这3个步骤均由控制单元来控制。控制单元取指令、分析指令，产生操作控制信号发给输入输出设备、运算部件或者主存，完成指令的执行。</li><li><strong>指令</strong>由“0”和“1”的二进制码组成,是指挥计算机工作的命令，是计算机<strong><em>唯一可以直接识别</em></strong>的语言；</li><li><strong>指令系统</strong>：计算机能直接识别和执行的全部指令的集合，称为该种计算机的指令系统。</li><li><strong>程序</strong>是按事先设计的功能和性能要求编制的指令序列。</li><li><strong>算法</strong>：完成一个任务或者解决一个问题的步骤序列（操作序列）。</li><li><strong>符号语言</strong>：用符号或助记符来表示不同的机器语言指令(包括操作码和和操作数地址）。符号语言又称汇编语言。</li><li><strong>过程化的程序设计</strong>即是实现某一计算的操作过程和操作步骤，然后用编程语言来描述这些操作过程和步骤。</li><li><strong>程序要素</strong>：数据与运算表达式、输入输出、控制结构、子程序(函数)</li><li><strong>C编程活动</strong>：编辑程序-编译程序-链接程序-运行程序</li></ul><h2 id="二程序设计初步数据类型常量变量">二、程序设计初步：数据类型、常量、变量</h2><ul><li>最小的存储单元是<strong>位</strong>（bit）</li><li><strong>字</strong>（word）是设计计算机时运算单元给定的整数运算的数据通路的宽度。因此，计算机中每个数据的二进制位数都是固定长度的。</li><li>汉字数字化<img src="汉字数字化.png"></li><li>数据类型包括两层含义：定义了值的集合(属于该类型的数据能够<strong>取值的范围</strong>）以及能应用于这些数值上的操作集合（<strong>数据操作</strong>）。</li></ul><h2 id="三算数运算逻辑运算">三、算数运算/逻辑运算</h2><ul><li>C语言中默认的算术运算符的结合方向为“自左至右”,即先左后右。但是<strong>赋值运算符是右结合，即从右到左计算</strong>。</li><li><strong>命名常量</strong>：不能改写的变量(命名常量)。有些变量一旦定义并初始化,便不允许程序去改变该存储空间中的数据。例如，C语言中：</li></ul><pre class="c"><code>const float pi = 3.14;</code></pre><ul><li>小数转化为整数：<ul><li>小数四舍五入取整：(int)(2.5+0.5); (int)(-2.3-0.5);</li><li>小数向上取整：ceil函数返回大于等于参数的最小整数</li><li>小数向下取整：floor函数返回小于等于参数的最大整数</li></ul></li><li>逻辑非运算最高，然后是算术运算和关系运算，其他逻辑运算的优先级仅高于赋值运算。<strong>逻辑运算的结合性默认是左结合，只有非运算是右结合</strong>。<img src="运算符优先级.png"></li><li>发生意外或错误，程序无法继续处理时，需要终止，操作系统提供了exit()函数。</li></ul><pre class="c"><code>/*功 能: 关闭所有文件，终止正在执行的进程。exit(0)表示正常退出；exit(x)（x不为0）都表示异常退出，这个x是返回给操作系统的，以供其他程序使用；*/void exit(int status); // 参数status，程序退出的返回值</code></pre><ul><li>注意++和—有前缀和后缀的区别：<ul><li>++i，--i(在使用ｉ之前,先使 i 的值加(减)１)</li><li>i++，i--(在使用ｉ之后,使ｉ的值加(减)１)</li></ul></li></ul><h2 id="四有限自动状态机">四、有限自动状态机</h2><ul><li>有限状态机可以简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。<ul><li>状态：存储关于过去的信息，它反映从系 统开始到现在时刻的输入变化。</li><li>转移:指示状态变更，并且用必须满足来 确使转移发生的条件来描述它。</li><li>动作:在给定时刻要进行的活动的描述。</li></ul></li></ul><h2 id="五子程序">五、子程序</h2><ul><li>子程序是封装并给以命名的一段程序代码，这段程序代码完成子程序所定义的功能，可供调用。</li><li>封装：子程序可以独立完成功能，调用者只需知道如何调用子程序（即子程序接口）</li><li>引入子程序的目的：</li></ul><ol type="1"><li>程序"复用"，避免在程序中使用重复代码；</li><li>结构化程序设计的需要：自顶向下、逐步细化，将复杂问题分解为相对简单的子问题，这些子问题用子程序实现，从而提高主程序结构的清晰性和易读性。</li><li>使程序的调试和 维护变得更加容易。</li></ol><ul><li>子程序设计原则<ul><li>高内聚：功能相对独立和完整；</li><li>低耦合：与外界（调用者）的关系尽量松散，不要太紧密，使其能方便地被重用；</li></ul></li><li>子程序在C语言中的实现机制：C语言中的函数机制</li><li>return语句中返回值表达式的类型要和返回值的类型说明一致。如果不一致，则以<strong>返回值类型</strong>为准(进行类型转换，参数类型的转换有可能是低类型向高类型转换，也可能是高类型向低类型转换。高类型向低类型转换可能会导致不正确的结果（如long类型向short类型的转换）。)。<br><img src="常见函数设计错误.png"><br><img src="常见函数设计错误2.png"></li><li>函数的调用：函数的调用和执行的实质是<strong>控制转移</strong>，调用函数时，将控制转到被调用的函数，被调函数执行结束时，则将控制转回主调函数，继续执行后续的操作。</li><li>子程序参数传递两种方式：<strong>按值传递</strong>和<strong>按引用传递</strong>。</li><li>函数原型的作用：是对被调用函数的<strong>接口声明</strong>，它告诉编译器函数返回的数据类型、函数所要接收的参数个数、参数类型和参数顺序，编译器用函数原型校验函数调用是否正确。</li><li>数据在内存中的存储：<ul><li>系统区：用于存放系统软件和运行需要的数据，如操作系统。只要机器一运行，这部分空间就必须保留给系统软件使用</li><li>用户程序代码区：存放用户程序代码</li><li>静态存储区：存放程序运行期间不释放的数据（静态局部变量、全局变量）</li><li>栈区：存放程序运行期间会被释放的数据（函数参数、非静态局部变量）以及活动的控制信息</li><li>堆区：用户可以在程序运行过程中根据需要动态地进行存储空间的分配，这样的分配在堆区进行<br><img src="数据存储.png"></li></ul></li></ul><p><img src="函数的活动记录.png"><br>## 六、数组<br>* 线性表是具有相同数据类型的<span class="math inline">\(n(n&gt;=0)\)</span>个数据元素的有限序列。线性表数据元素之间为线性关系，即任意两个元素之间都可比较大小。<br>* 线性表有两种存储结构：连续（顺序表）、随机（链表）。<br>* 数组初始化是在编译阶段进行的。这样将减少运行时间，提高效率。<br>*若在定义一个数组的同时赋初值，如果初始化值的个数小于数组元素的个数，剩余的元素被自动初始化为0。(整型数组各元素不会自动初始化为0，至少要把第一个数组元素初始化为0，才能使剩下的元素自动初始化为0。)<br>*二维数组做形参，第2个下标必须给出，使编译器能确定元素内存地址；多维数组做函数形参时，需要给出除了第1个下标之外的其他所有的下标<img src="二维数组.png"></p><h2 id="七字符串">七、字符串</h2><ul><li>scanf函数读取用户键入的字符到字符数组，直到遇到空格、回车、或文件结束符为止。空格、回车、或文件结束符被丢弃，最后一个字符读入后往字符数组中写入结束符‘\0’。</li><li>gets()函数简单易用，它读取整行输入，直至遇到换行符，然后丢弃换行符，存储其余字符，并在这些字符的末尾添加一个空字符使其成为一个C字符串。它经常和puts()函数配对使用，该函数用于显示字符串，并在末尾添加换行符。成功则返回所读字符串指针，失败返回空指针.</li></ul><pre class="c"><code>char * gets(char * str);</code></pre><ul><li>将str所指向的字符串输出到文件或显示器上，字符串结束标记‘\0’不会被输出。成功则返回字符长度，失败返回-1。puts输出字符串时，会将字符数组中所有内容输出，直到‘\0’，但会在末尾自动追加输出‘’。</li></ul><pre class="c"><code>int puts(const char * str);</code></pre><ul><li>fgets从文件或键盘读取字符到str所指向的数组中，直到<strong>读够n-1个字符</strong>，或读到换行符‘’，但<strong>不会丢弃换行符</strong>，或者读到文件末尾。最后一个字符读入后自动写入一个'\0'。若成功则返回str，若无字符读入数组或者读取失败返回空指针NULL。</li></ul><pre class="c"><code>char * fgets(char *str, int n, FILE *stream);</code></pre><ul><li>将str所指向的字符串输出到文件或显示器上，字符串结束标记‘\0’不会被输出。</li></ul><pre class="c"><code>int fputs(const char * str, FILE *stream);</code></pre><h1 id="八自定义结构体">八、自定义结构体</h1><ul><li>结构是用其他类型的对象构造出来的派生数据类型（注意：结构是一种数据类型）；</li><li>结构既可以在函数外定义，也可以在函数内定义。但函数内定义的结构只能在本函数中使用；</li><li>同一结构中的成员不能同名，不同结构中的成员可以同名；</li><li>嵌套结构：结构中的数据项，可以是另一个已经定义的结构变量；</li><li>如果初始化的个数少于结构中的成员数目，剩余成员被自动化初始为0（整型、浮点型）、‘\0’（字符或者字符串型）、NULL（指针）；<br><img src="指针运算符.png"></li><li>传递结构变量方法：传递结构、还是指向结构的指针？<ul><li>传递指针<ul><li>优点：既可以工作在较早的C实现上，也可以工作在较新的C实现上；执行速度快：只需要传递一个地址。</li><li>缺点：缺少对数据的保护（可以使用const限定词解决这个问题）。</li></ul></li><li>传递结构：</li><li>优点：安全性。函数处理的是原始数据的副本。</li><li>缺点： 早期的C实现不处理这种代码，浪费时间和空间；</li></ul></li></ul><h1 id="九计算机原理">九、计算机原理</h1><ul><li>计算的定义：<ul><li>以数字为基础、遵循一定的计算规则进行;如：数的加减乘除，函数的微分、积分、方程的求解、定理的证明推导;</li><li>广义：计算就是把一个符号串f变换成另一个符号串g；</li><li>更广义：计算就是对信息的变换 ；</li><li>由于计算规则的机械化、公式化，可以借助计算工具来实现计算。</li></ul></li><li>图灵机：<img src="图灵机.png"></li><li>图灵机模型被认为是计算机的基本理论模型：计算机是使用相应的程序来完成任何设定好的任务。图灵机是一种<strong>离散的、有穷的、构造性</strong>的问题求解思路，一个问题的求解可以通过构造其图灵机(即程序)来解决。图灵认为：凡是能用算法方法解决的问题也一定能用图灵机解决;凡是图灵机解决不了的问题任何算法也解决不了----图灵可计算性问题。</li><li>巴贝奇的分析机由四部分构成：<ul><li>第一部分：保存数据的齿轮式"存贮仓库"(Store)；</li><li>第二部分：对数据进行各种运算的装置("作坊")；</li><li>第三部分：对操作顺序进行控制、并对所要处理的数据及输出结果加以选择的装置；</li><li>第四部分：送入和取出数据、以及在"存贮仓库"和"作坊"之间运输数据的输入输出部件。</li><li>分析机工作过程：通过输入部件将要处理的数据输入并存储到"存储仓库"中，在控制装置控制下，从存储仓库依次取出数据运输到运算装置进行运算，最终运算结果由输出部件进行输出。</li></ul></li><li>冯.诺依曼机体系结构的特点：<ul><li>指令和数据采用二进制表示，从而简化机器的逻辑线路；－－指令和数据的表示</li><li>指令和数据一样存储在主存储器中；－－指令和数据的存储</li><li>计算机由运算器、控制器、存储器、输入设备、输出设备五大部分组成。</li></ul></li><li>程序的运行就是不断地<strong>取指令、分析指令、执行指令</strong>的过程，这3个步骤均由控制器来控制。控制器取指令、分析指令，产生操作控制信号发给输入输出设备、运算部件或者主存，完成指令的执行。</li><li>计算机系统由硬件和软件两大部分组成；</li><li>操作系统是最基本、最重要的系统软件，直接运行在<strong>裸机（硬件）</strong>上，只有在操作系统的支持下，才可以运行其他软件，故操作系统是计算机软件的核心和基础。</li><li>操作系统的基本功能：<strong>作业管理、进程管理、内存管理、设备管理、文件管理</strong>；</li><li>进程是一个<strong>具有一定独立功能的程序关于某个数据集合的一次运行活动</strong>。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。</li><li>程序与进程的关系<ul><li>进程是动态的，强调执行过程，而程序是静态的；</li><li>进程具有并发性(宏观上同时运行)，程序没有；</li><li>不同的进程可以对应同一程序，只是该程序对应的数据集不同。</li></ul></li><li>进程状态转换：<ol type="1"><li>运行：当一个进程在处理机上运行时，则称该进程处于运行状态。处于此状态的进程的数目小于等于处理器的数目，对于单处理机系统，处于运行状态的进程只有一个。在没有其他进程可以执行时（如所有进程都在阻塞状态），通常会自动执行系统的空闲进程。 </li><li>就绪：当一个进程获得了除处理机以外的一切所需资源，一旦得到处理机即可运行，则称此进程处于就绪状态。就绪进程可以按多个优先级来划分队列。例如，当一个进程由于时间片用完而进入就绪状态时，排入低优先级队列；当进程由I／O操作完成而进入就绪状态时，排入高优先级队列。 </li><li>阻塞：也称为等待或睡眠状态，一个进程正在等待某一事件发生（例如请求I/O而等待I/O完成等）而暂时停止运行，这时即使把处理机分配给进程也无法运行，故称该进程处于阻塞状态。</li></ol></li></ul><h1 id="汇总简答题">汇总简答题</h1><ol type="1"><li><strong>什么是计算？</strong><ul><li>以数字为基础、遵循一定的计算规则进行；如：数的加减乘除，函数的微分、积分、方程的求解、定理的证明推导；</li><li>广义：计算就是把一个符号串f变换成另一个符号串g；</li><li>更广义：计算就是对信息的变换；</li></ul></li><li><strong>什么是冯诺依曼结构？</strong><ul><li>冯诺依曼结构是一种计算机设计模型，其核心思想是将数据和程序存储在同一存储器中，并通过控制器统一管理。其组成包括：<ul><li>输入设备</li><li>输出设备</li><li>控制器</li><li>运算器</li><li>存储器</li></ul></li></ul></li><li><strong>什么是内存？什么是外存？两者的区别是什么？</strong><ul><li><strong>内存</strong>：存储程序和数据的高速存储设备，直接与CPU交互，断电后数据丢失。</li><li><strong>外存</strong>：如硬盘、U盘，用于长期存储数据，断电后数据不会丢失。</li><li><strong>区别</strong>：内存速度快但容量小；外存容量大但速度慢。</li></ul></li><li><strong>什么是指令？什么是指令系统？什么是程序？</strong><ul><li><strong>指令</strong>：由“0”和“1”的二进制码组成,是指挥计算机工作的命令，是计算机<strong><em>唯一可以直接识别</em></strong>的语言；</li><li><strong>指令系统</strong>：计算机能直接识别和执行的全部指令的集合，称为该种计算机的指令系统。</li><li><strong>程序</strong>：<strong>程序</strong>是按事先设计的功能和性能要求编制的指令序列。</li></ul></li><li><strong>简述计算机的组成结构与工作原理。</strong><ul><li><strong>组成结构</strong>：包括输入设备、输出设备、存储器、运算器、控制器。</li><li><strong>工作原理</strong>：通过输入设备获取数据，存储器存储数据和程序，控制器按照指令系统控制运算器完成数据处理，结果通过输出设备输出。</li></ul></li><li><strong>计算机系统由哪两大部分组成？</strong><ul><li><strong>硬件系统</strong>：如CPU、内存、硬盘等。</li><li><strong>软件系统</strong>：如操作系统、应用程序等。</li></ul></li><li><strong>什么是操作系统？它具有哪些管理功能？</strong><ul><li><strong>操作系统</strong>：管理计算机硬件与软件资源的系统软件，提供用户与计算机交互的接口。</li><li><strong>管理功能</strong>：<ol type="1"><li>进程管理</li><li>内存管理</li><li>文件管理</li><li>设备管理</li><li>作业管理</li></ol></li></ul></li><li><strong>什么是机器语言、符号语言和高级语言？它们各自有什么特点？</strong><ul><li><strong>机器语言</strong>：由0和1组成的二进制代码，可直接被计算机识别；执行效率高但难以编写和理解。</li><li><strong>符号语言</strong>：使用助记符（如MOV、ADD）代替机器码，通过汇编程序翻译成机器语言；较容易理解。</li><li><strong>高级语言</strong>：接近自然语言，易读易写，通过编译或解释器转换成机器语言；跨平台且开发效率高。</li></ul></li><li><strong>计算机唯一可以直接识别的是什么语言？</strong><ul><li>计算机唯一可以直接识别的是<strong>机器语言</strong>。</li></ul></li><li><strong>简述预处理程序和翻译程序各自的功能。</strong><ul><li><strong>预处理程序</strong>：处理源代码中的指令（如宏定义、头文件引入），生成预处理后的代码。</li><li><strong>翻译程序</strong>：将源代码翻译为机器语言，生成目标文件。</li></ul></li><li><strong>链接程序的目的是什么？</strong><ul><li>链接程序的目的在于将多个目标文件和库文件连接成一个可执行文件，同时解决跨文件函数调用和变量引用的问题。</li></ul></li><li><strong>载入程序的功能是什么？</strong><ul><li>载入程序负责将可执行文件从外存加载到内存，并为其分配运行所需的资源，使程序可以被CPU执行。</li></ul></li><li><strong>程序是如何运行的？</strong><ul><li>程序的运行就是不断地<strong>取指令、分析指令、执行指令</strong>的过程，这3个步骤均由控制单元来控制。控制单元取指令、分析指令，产生操作控制信号发给输入输出设备、运算部件或者主存，完成指令的执行。</li></ul></li><li><strong>什么是标识符？</strong><ul><li>标识符是程序中用来标识变量、常量、函数、数组等名称的字符序列。</li></ul></li><li><strong>什么是常量？使用命名常量和符号常量有哪些好处？</strong><ul><li><strong>常量</strong>：程序中值固定不变的量，例如数字3.14或字符'A'。</li><li><strong>好处</strong>：<ol type="1"><li>增强代码的可读性，例如PI比3.14更具意义。</li><li>方便修改，只需更改定义处即可在全局生效。</li><li>避免代码中出现“魔法数”（即难以理解的硬编码值）。</li></ol></li></ul></li><li><strong>什么是函数？</strong><ul><li>函数是一个具有特定功能的代码块，用于完成某种任务。它通过调用来执行，可以提高代码的复用性和可读性。</li></ul></li><li><strong>函数声明的作用是什么？</strong><ul><li>函数声明（也称为函数原型）用于向编译器声明函数的名称、返回类型和参数类型，使编译器在函数调用时能进行正确的检查。</li></ul></li><li><strong>函数定义包括哪几部分内容？</strong><ul><li>函数定义通常包括以下部分：<ol type="1"><li><strong>返回类型</strong>：函数执行完后返回的值的类型，例如int、float。</li><li><strong>函数名</strong>：用于标识函数的名称，例如add。</li><li><strong>参数列表</strong>：函数接收的输入参数，包含类型和变量名，例如inta, int b。</li><li><strong>函数体</strong>：包含具体实现功能的代码块，用{}括起来。</li></ol></li></ul></li><li><strong>什么是算法?</strong></li><li><strong>结构化程序设计的主要内容是？</strong><ol type="1"><li><strong>程序控制结构：</strong><ul><li><strong>顺序结构</strong>：程序按照语句的书写顺序依次执行。</li><li><strong>选择结构</strong>：根据条件判断选择执行某一分支（如if-else、switch-case）。</li><li><strong>循环结构</strong>：重复执行某一代码块，直到满足特定条件（如for、while、do-while）。</li></ul></li><li><strong>模块化设计：</strong><ul><li>将程序划分为若干功能模块，每个模块完成一个独立的功能。</li><li>模块之间通过函数接口进行通信，减少相互依赖。</li></ul></li><li><strong>自顶向下设计：</strong><ul><li>从问题的整体出发，逐步细化，依次设计各子模块，最终实现整个程序。</li></ul></li><li><strong>封装与复用：</strong><ul><li>每个模块应具有独立性，其内部实现细节对外部隐藏，只通过定义好的接口与其他模块交互。</li><li>提高代码复用性，减少重复开发。</li></ul></li></ol></li></ol>]]></content>
    
    
    <summary type="html">计算机导论与程序设计期末复习</summary>
    
    
    
    <category term="计算机基础" scheme="https://yokumii.github.io/blog/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机基础" scheme="https://yokumii.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>欧拉环游和哈密尔顿环游</title>
    <link href="https://yokumii.github.io/blog/2024/12/06/%E6%AC%A7%E6%8B%89%E7%8E%AF%E6%B8%B8%E5%92%8C%E5%93%88%E5%AF%86%E5%B0%94%E9%A1%BF%E7%8E%AF%E6%B8%B8/"/>
    <id>https://yokumii.github.io/blog/2024/12/06/%E6%AC%A7%E6%8B%89%E7%8E%AF%E6%B8%B8%E5%92%8C%E5%93%88%E5%AF%86%E5%B0%94%E9%A1%BF%E7%8E%AF%E6%B8%B8/</id>
    <published>2024-12-06T07:08:00.000Z</published>
    <updated>2025-01-07T06:16:48.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欧拉环游">欧拉环游</h1><h2 id="定义">定义</h2><blockquote><p><strong>欧拉回路</strong>：我们称一个通过图的每条边恰好一次的闭途径为欧拉环游(Eulertour)；<br><strong>欧拉通路</strong>：我们称一个通过图的每条边恰好一次的路为欧拉通路；<br><strong>欧拉图</strong>：如果一个图包含一个欧拉环游，就称它是欧拉的(Eulerian)；</p></blockquote><h2 id="判断的充要条件">判断的充要条件</h2><blockquote><p>对于无向连通图，一个连通图是欧拉的<strong>当且仅当它的每个顶点度是偶数</strong>。<br>连通图<span class="math inline">\(G\)</span>是存在从<span class="math inline">\(a\)</span>到<span class="math inline">\(b\)</span>的欧拉路径，当且仅当<span class="math inline">\(G\)</span>是连通的，并且除<span class="math inline">\(a\)</span>和<span class="math inline">\(b\)</span>(<span class="math inline">\(a \neb\)</span>)的度为奇数(odd)之外，没有度为奇数(odd)的顶点；</p></blockquote><blockquote><p>对于有向连通图，一个连通图是欧拉的当且仅当<span class="math inline">\(G\)</span>是连通的，且每个顶点的出度 =入度；<br>有向连通图<span class="math inline">\(G\)</span>含有欧拉通路，当且仅当<span class="math inline">\(G\)</span>是连通的，并且<span class="math inline">\(G\)</span>中除两个顶点(节点不相等)外，其余每个顶点的入度=出度，且此两点满足<span class="math inline">\(\left |deg^+{(u)} - deg^-{(v)}\right | =1\)</span></p></blockquote><h1 id="哈密尔顿通路">哈密尔顿通路</h1><h2 id="定义-1">定义</h2><blockquote><p><strong>哈密尔顿回路</strong>：图<span class="math inline">\(G\)</span>的哈密顿回路(Hamiltoniancircuit)指的是遍历<span class="math inline">\(G\)</span>中每一个点且只遍历一次的回路,这样的轨迹称为哈密顿环游(Hamiltonian tour)；<br><strong>哈密尔顿通路</strong>：1. 图G的哈密顿路径(Hamiltonianpath)指的是遍历G中每一个点且只遍历一次的路径,这样的轨迹称为哈密顿轨迹(Hamiltonian trail)；</p></blockquote><h2 id="一些充分条件">一些充分条件</h2><h3 id="diracs-theorem狄拉克定理">Dirac's theorem狄拉克定理</h3><blockquote><p>对于简单连通图<span class="math inline">\(G\)</span>，如果<span class="math inline">\(G\)</span>的顶点数<span class="math inline">\(n\ge 3\)</span>，且所有顶点的度都<span class="math inline">\(\ge\frac{n}{2}\)</span>，那么<span class="math inline">\(G\)</span>存在哈密尔顿回路；</p></blockquote><h3 id="ores-theorem欧尔定理">Ore's theorem欧尔定理</h3><blockquote><p>对于简单连通图<span class="math inline">\(G\)</span>，如果<span class="math inline">\(G\)</span>的顶点数<span class="math inline">\(n\ge 3\)</span>，且对于每一对不相邻的顶点<span class="math inline">\(u,v\)</span>，都有<span class="math inline">\(deg(u) + deg(v) \gen\)</span>，那么<span class="math inline">\(G\)</span>存在哈密尔顿回路；</p></blockquote><h2 id="必要条件可以用来判断不是哈密尔顿通路">必要条件(可以用来判断不是哈密尔顿通路)</h2><blockquote><p>设无向图<span class="math inline">\(G = (V,E)\)</span>，非空子集<span class="math inline">\(V_1 \subset V\)</span>，则<span class="math inline">\(P(G - V_1)\le \left | V_1 \right|\)</span>，其中<span class="math inline">\(p(G - V_1)\)</span>为图<span class="math inline">\(G\)</span>删除<span class="math inline">\(V_1\)</span>中的节点后的连通分支数；</p></blockquote>]]></content>
    
    
    <summary type="html">欧拉环游</summary>
    
    
    
    <category term="图论" scheme="https://yokumii.github.io/blog/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://yokumii.github.io/blog/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>图论基本概念</title>
    <link href="https://yokumii.github.io/blog/2024/12/05/%E5%9B%BE%E8%AE%BA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://yokumii.github.io/blog/2024/12/05/%E5%9B%BE%E8%AE%BA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2024-12-05T14:55:43.000Z</published>
    <updated>2024-12-22T08:12:11.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图论中的基本概念">图论中的基本概念</h1><h2 id="图的基本概念">图的基本概念</h2><ul><li><strong>图</strong>：具有顶点集<span class="math inline">\(V\)</span>的图亦称为<span class="math inline">\(V\)</span>上的图(a graph on V)，图<span class="math inline">\(G\)</span>的顶点集记为<span class="math inline">\(V(G)\)</span>, 边集记为<span class="math inline">\(E(G)\)</span>；</li><li><strong>邻接Adjacency</strong>：如果<span class="math inline">\({x,y}\)</span>是<span class="math inline">\(G\)</span>的一条边，则称两个顶点<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>是相邻的(adjacent)或邻点(neighbour)，<span class="math inline">\(x,y\)</span>称为边的endpoint；如果两条边<span class="math inline">\(e \ne f\)</span>有一个公共端点，则称<span class="math inline">\(e\)</span>和<span class="math inline">\(f\)</span>是相邻的；</li><li><strong>领域、邻点集Neiborhood</strong>：The set of all neighbors ofa vertex <span class="math inline">\(v\)</span> of <span class="math inline">\(G = (V,E)\)</span>, denoted by <span class="math inline">\(N(v)\)</span>, is called the neighborhood of <span class="math inline">\(v\)</span>. 即顶点<span class="math inline">\(v\)</span>的所有邻点构成的集合。If <span class="math inline">\(A\)</span> is a subset of <span class="math inline">\(V\)</span> , we denote by <span class="math inline">\(N(A)\)</span> the set of all vertices in G thatare adjacent to at least one vertex in <span class="math inline">\(A\)</span>. So,<span class="math inline">\(N(A)=\bigcup_{\nu\in A}N(\nu)\)</span>.</li><li><strong>度</strong>：A vertex with degree <span class="math inline">\(0\)</span> is called isolated.(孤立点);A vertex of degree <span class="math inline">\(1\)</span> is called pendant.(悬挂点);</li><li><strong>生成子图Spanning subgraph</strong>：删边不删点；</li><li><strong>导出子图Induced subgraph</strong>：若<span class="math inline">\(G&#39; \subset G\)</span>且<span class="math inline">\(G&#39;\)</span>包含了<span class="math inline">\(E\)</span>中所有满足<span class="math inline">\(x,y \in E\)</span>的边<span class="math inline">\(xy\)</span>,则称<span class="math inline">\(Q\)</span>是<span class="math inline">\(G\)</span>的导出子图(inducedsubgraph)；（人话，删点不删边）；</li><li><strong>图的收缩The contraction of G</strong>：<img src="图的收缩.png"></li><li><strong>补图Graph complement</strong>：相对于完全图的补<img src="补图.png"></li><li><strong>关联矩阵Incidence matrices</strong>：<img src="关联矩阵.png">即第<span class="math inline">\(i\)</span>行表示第<span class="math inline">\(i\)</span>个顶点与哪些边连接，第<span class="math inline">\(j\)</span>列表示第<span class="math inline">\(j\)</span>条边连接哪些顶点。</li></ul><blockquote><p><strong>握手定理Handshaking Theorem</strong>：<img src="握手定理.png"><br>无向图中，如果有度为奇数的点，那么这些点的个数必为偶数个。</p></blockquote><ul><li><strong>有向图的度</strong>：The in-degree of <span class="math inline">\(v\)</span>, <span class="math inline">\(deg^-(v)\)</span>, is the number of edges going to <span class="math inline">\(v\)</span>(入度); The out-degree of <span class="math inline">\(v\)</span>, <span class="math inline">\(deg^+(v)\)</span>, is the number of edges coming from <span class="math inline">\(v\)</span>(出度); The degree of <span class="math inline">\(v\)</span>, <span class="math inline">\(deg(v):deg^-(v)+deg^+ (v)\)</span>, isthe sum of v’s in-degree and out-degree.</li></ul><blockquote><p><strong>有向图握手定理</strong>：<img src="有向图握手定理.png"></p></blockquote><ul><li><strong>阶</strong>：一个图的顶点个数称为它的阶(order),记为<span class="math inline">\(\left | G \right |\)</span>，它的边数记为<span class="math inline">\(\Vert G \Vert\)</span>；</li><li><strong>平凡图</strong>：阶为0或1的图称为平凡的 (trivial)；</li><li><strong>独立</strong>：互不相邻的顶点/边称独立顶点/独立边(independentvertex/edge)。若一个顶点集或边集中没有两个元素是相邻的，则该集合称为<strong>独立集</strong>(independentset)；独立的顶点集也称作<strong>稳定集</strong>(stable set)；</li></ul><h2 id="一些特殊的图结构special-graph-structures">一些特殊的图结构Special Graph Structures</h2><ul><li><strong>完全图<span class="math inline">\(K^n\)</span></strong>：若<span class="math inline">\(G\)</span>的所有顶点都是两两相邻的，则称<span class="math inline">\(G\)</span>是完全的(complete)，n个顶点的完全图记为<span class="math inline">\(K^n\)</span>；<img src="完全图.png"></li><li><strong>环图<span class="math inline">\(C^n\)</span></strong>：<img src="环图.png"></li><li><strong>轮图<span class="math inline">\(W^n\)</span></strong>：<img src="轮图.png"><span class="math inline">\(W^n\)</span>有<span class="math inline">\(n+1\)</span>个顶点，中心点度为<span class="math inline">\(n-1\)</span>，边上<span class="math inline">\(n\)</span>个点度为<span class="math inline">\(3\)</span>。</li><li><strong>n维体图 n-Cubes/hypercubes<span class="math inline">\(Q^n\)</span></strong>：<img src="n维体图.png"></li><li><strong>Plato graphs（柏拉图图）</strong>：<img src="柏拉图图.png"></li><li><strong>彼德森图（Petersen）</strong>：<img src="彼得森图.png"></li><li><strong>Bipartite Graphs二分图</strong>：<img src="二分图.png">判断方法：1. 可以用两种颜色染色； 2.图中不存在长度为奇数的回路；</li><li><strong>Complete Bipartite Graphs 完全二分图</strong>：<img src="完全二分图.png"></li></ul><h2 id="图的同构graph-isomorphism">图的同构Graph Isomorphism</h2><ul><li><strong>图的同构</strong>：<img src="图的同构.png"></li><li></li><li><strong>图不变量graph invariants</strong>：对于图上的一个映射，如果对每个同构图它均取相同的值，则这样的映射称为一个图不变量(graphinvariant)。一个图的顶点数和边数就是两个简单的图不变量；图中两两相邻的最大顶点数也是图不变量。</li></ul><h2 id="图的连通性connectivity">图的连通性Connectivity</h2><ul><li><strong>路</strong>：这里所有的<span class="math inline">\(x_i\)</span>均互不相同，顶点<span class="math inline">\(x_0和\)</span><span class="math inline">\(x_n\)</span>由路<span class="math inline">\(P\)</span>连接(link)，并称它们为路的端点(endvertex)或顶端(end)；而<span class="math inline">\(x_1,x_2,\dots,x_{n-1}\)</span>称为<span class="math inline">\(P\)</span>的内部(inner)顶点。一条路上的边数称为路的长度(length)，长度为k的路记为<span class="math inline">\(P^k\)</span>；</li><li><strong>简单路</strong>：A path is simple if it contains no edge more than once.</li><li><strong>独立路</strong>：如果其中任意一条路不包含另一条路的内部顶点,则称它们是独立路(independent path)；</li><li><strong>连通图</strong>：如果非空图<span class="math inline">\(G\)</span>中的任意两个顶点之间均有一条路相连，我们称<span class="math inline">\(G\)</span>是连通的(connected)；</li><li><strong>连通分支/独立子图Connected component</strong>：设<span class="math inline">\(G =(V,E)\)</span>是一个图，则它的极大连通子图称为分支(component)；</li><li><strong>割点cutvertex</strong>：the removal from a graph of a vertex and all incident edges produces a subgraph with more connected components. </li><li><strong>割边cutedge</strong>：an edge whose removal produces a graph with more connected components；</li><li><strong>点连通度</strong>：使得G是k-连通的最大整数k称为G的连通度(connectivity)，并记为<span class="math inline">\(\kappa (G)\)</span>；</li><li><strong>边连通度</strong>：记为<span class="math inline">\(\lambda(G)\)</span>；<br><img src="连通度例子.png"><br><img src="连通度定理.png"></li><li><strong>有向图中的强连通、弱连通</strong>：强连通要求A directed graph is stronglyconnected if there is a path from a to b and from b to a whenever a and b are vertices in the graph. 弱连通与无向图类似；</li><li><strong>圈</strong>：<span class="math inline">\(x_0x_1\dotsx_{k-1}x_0\)</span>；</li><li><strong>围长和圈长</strong>：图<span class="math inline">\(G\)</span>中最短圈的长度叫做围长(girth),记为<span class="math inline">\(g(G)\)</span>,而<span class="math inline">\(G\)</span>中最长圈的长度称为周长(circumference)；</li><li><strong>弦</strong>：图中不在圈上但连接圈中两个顶点的边称为这个圈的弦(chord)；</li><li><strong>导出圈</strong>：<span class="math inline">\(G\)</span>的导出圈(inducedcycle)是不含弦的圈，即<span class="math inline">\(G\)</span>的导出子图是个圈；<br><img src="导出圈.png" alt="导出圈"></li><li><strong>距离、直径、中心点、半径</strong>：暂略；</li><li><strong>树、森林</strong>：暂略；</li></ul>]]></content>
    
    
    <summary type="html">图论中的基本概念梳理</summary>
    
    
    
    <category term="图论" scheme="https://yokumii.github.io/blog/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="图论" scheme="https://yokumii.github.io/blog/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>CMU Bomb Lab 个人题解</title>
    <link href="https://yokumii.github.io/blog/2024/11/05/BombLab/"/>
    <id>https://yokumii.github.io/blog/2024/11/05/BombLab/</id>
    <published>2024-11-05T13:54:18.000Z</published>
    <updated>2024-12-05T14:48:40.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一实验目的">一、实验目的</h2><p>1.理解C语言程序的机器级表示。</p><p>2.初步掌握GDB调试器的用法。</p><p>3.阅读C编译器生成的x86-64机器代码，理解不同控制结构生成的基本指令模式，过程的实现。</p><h2 id="二实验环境">二、实验环境</h2><ol type="1"><li>作业服务器</li><li>MacOS终端工具</li><li>Linux</li><li>Objdump命令反汇编</li><li>GDB调试工具</li><li>积分榜</li></ol><h2 id="三实验内容">三、实验内容</h2><p>登录作业服务器，在home目录下可以找到Evil博士专门为你量身定制的一个bomb，当运行时，它会要求你输入一个字符串，如果正确，则进入下一关，继续要求你输入下一个字符串；否则，炸弹就会爆炸，输出一行提示信息并向计分服务器提交扣分信息。因此，本实验要求你必须通过反汇编和逆向工程对bomb执行文件进行分析，找到正确的字符串来解除这个的炸弹。</p><p>本实验通过要求使用课程所学知识拆除一个“binarybombs”来增强对程序的机器级表示、汇编语言、调试器和逆向工程等方面原理与技能的掌握。“binarybombs”是一个Linux可执行程序，包含了5个阶段（或关卡）。炸弹运行的每个阶段要求你输入一个特定字符串，你的输入符合程序预期的输入，该阶段的炸弹就被拆除引信；否则炸弹“爆炸”，打印输出“BOOM!!!”。炸弹的每个阶段考察了机器级程序语言的一个不同方面，难度逐级递增。</p><p>为完成二进制炸弹拆除任务，需要使用gdb调试器和objdump来反汇编bomb文件，可以单步跟踪调试每一阶段的机器代码，也可以阅读反汇编代码，从中理解每一汇编语言代码的行为或作用，进而设法推断拆除炸弹所需的目标字符串。</p><h2 id="四实验步骤及实验分析">四、实验步骤及实验分析</h2><h3 id="准备工作">准备工作</h3><ul><li>首先通过 <code>ls</code> 命令查看文件，找到炸弹文件包<code>bomb. tar</code>；</li><li>然后通过命令 <code>tar -xvf bomb.tar</code> 解压得到三个文件；</li></ul><h3 id="第一阶段">第一阶段</h3><ul><li>使用 <code>gdb</code> 运行<code>bomb</code>；</li><li>设置断点在函数 <code>phase_1</code>处，开始运行，输入测试字符串<code>12345</code>；</li><li>用<code>\disas</code> 显示<code>phase_1</code>部分的汇编代码开始分析；</li></ul><p><img src="1.png" alt="phase_1汇编代码"></p><ul><li>观察到调用了一个 <code>strings_not_equal</code>函数，根据函数名，其功能很可能是比较输入字符和正确字符是否匹配的函数；</li><li>在<code>strings_not_equal</code>函数处设置断点，直接<code>continue</code>运行进入该函数；</li><li>显示<code>strings_not_equal</code> 的汇编代码开始分析；</li></ul><p><img src="2.png" alt="strings_not_equal 函数汇编代码"></p><p><strong>Note! <code>%rdi</code>存放函数的第一个输入，<code>%rsi</code>存放函数的第二个输入，<code>%eax</code> 存放函数的返回值。</strong></p><ul><li>观察到调用了 <code>string_length</code>函数，根据函数名，其功能很可能是获取输入字符数量的函数；</li><li>在 <code>string_length</code>函数处设置断点，直接<code>continue</code>运行进入该函数；</li><li>分析可得其先比较字符串长度，二者不相等则在 <code>%eax</code> 中存 1返回；若相等，则比较具体内容，若不相等则在 <code>%eax</code> 中存 1返回；</li><li>结合寄存器功能和汇编代码可以得到函数比较的字符串内容分别存放在<code>%rdi</code> 和 <code>%rsi</code> 中，分别打印寄存器的值如下：</li></ul><p><img src="3.png" alt="字符串内容"></p><ul><li>得到 <code>%rdi</code> 存放的是我们输入的字符串， <code>%rsi</code>是目标字符串。函数中，<code>%rsi</code> 的值被赋给 <code>%rbp</code>，<code>%rbp</code> 和 <code>%rdi</code> 上的字符串进行比较。所以<code>phase_1</code> 需要我们输入与其相同的字符串即可通过。</li></ul><h3 id="第二阶段">第二阶段</h3><ul><li>在 <code>phase_2</code> 入口处设置断点，运行程序，输入<code>phase_1</code> 答案，进入阶段2；同上操作得到汇编代码进行分析；</li></ul><p><img src="4.png" alt="第二阶段开始"></p><ul><li>观察发现其调用<code>read_six_numbers</code>函数，设置断点进入，显示该函数的汇编代码，观察到将地址<code>$0x402a31</code>存入<code>%esi</code> 后调用 <code>scanf</code>函数，打印该地址的值，验证了该函数的需要输入6个整数。也可以由下面的<code>cmp</code> 语句得到，如果<code>scanf</code>的返回值小于等于5会触发爆炸。</li></ul><p><img src="5.png" alt="第二阶段输入格式确定"></p><p><strong>Note! <code>%rsp</code>存放堆栈指针，括号表示获取地址上的值。<code>%rbp</code>存放的是栈的基址。</strong></p><ul><li>继续回到 <code>phase_2</code>，由 <code>cmpl</code>语句可见第一个输入的整数(<code>%rsp</code>存的地址上的值)需要 &gt;=1，将其存放到 <code>%eax</code> 上，并将其变为2倍后继续存在<code>%eax</code>，再与输入的第二个整数比较，要求结果相等，否则触发爆炸。然后检查当前栈指针是否到达栈的基址<code>%rbp</code>，如果顺利到达则跳出，成功通过。</li><li>可以推测出 <code>phase_2</code>是一种循环结构，依次比较每个输入整数是否符合是前一个输入的2倍，推出一个答案为<code>1 2 4 8 16 32</code>。</li></ul><h3 id="第三阶段">第三阶段</h3><ul><li>同上操作，此处不再赘述，进入<code>phase_3</code>并得到汇编代码如下：</li></ul><p><img src="6.png" alt="第三阶段汇编代码1"></p><p><img src="7.png" alt="第三阶段汇编代码2"></p><ul><li>第三阶段代码较为冗长，先通过打印 <code>scanf</code>函数的调用值得到输入格式为两个整数和一个字符。</li></ul><p><img src="8.png" alt="第三阶段输入格式"></p><ul><li>分析在 <code>0x400fe4</code> 处的 <code>cmpl $0x7, 0x10(%rsp)</code>指令以及下一条指令 <code>ja 0x4010ef</code>，得出<code>0x10(%rsp)</code> 处的值，即输入的第一个整数（占2<sup>4</sup> = 0x10 个字节） ≤ 7。</li><li><code>0x400ff3</code> 处的指令 <code>jmpq \*0x4027a0(,%rax,8)</code>表示跳转到 <code>0x4027a0+输入的第一个整数 *8</code>所存储的地址处，打印出所有可能的跳转地址如下：</li></ul><p><img src="9.png" alt="所有可能地址"></p><p><strong>Note！<code>*</code> 表示间接跳转，<code>0x4027a0</code>是一个基地址（立即数），语句应跳转到计算得到的地址上存的地址值。</strong></p><ul><li>此时，再结合 <code>phase_3</code> 整体代码，进行拆分，可以推测其为<code>switch</code> 分支结构，选择 <code>case 0</code>进行分析。（每个case结构都基本相同）：</li></ul><p><img src="10.png" alt="case 0结构"></p><ul><li>分析可得，首先比较输入的第二个整数与<code>0x2d7（727）</code>，相等则跳至<code>4010eb &lt;+318&gt;:  cmp 0xf(%rsp),%al</code>，将输入的字符与<code>%al (0x77)</code>，对应 ASCII 码<code>w</code>比较，相等则通过。</li></ul><p><strong>Note！<code>%al</code> 和 <code>%eax</code>为同一个寄存器，<code>%al</code> 是 <code>%rax</code> 寄存器的最低 8位。<code>%eax</code> 是低 32 位。</strong></p><ul><li>以此类推，得到所有可能答案如下：</li></ul><table><thead><tr><th style="text-align: center;"><strong>第一个整数</strong></th><th style="text-align: center;"><strong>字符</strong></th><th style="text-align: center;"><strong>第二个整数</strong></th></tr></thead><tbody><tr><td style="text-align: center;">0</td><td style="text-align: center;">w</td><td style="text-align: center;">727</td></tr><tr><td style="text-align: center;">1</td><td style="text-align: center;">u</td><td style="text-align: center;">786</td></tr><tr><td style="text-align: center;">2</td><td style="text-align: center;">g</td><td style="text-align: center;">63</td></tr><tr><td style="text-align: center;">3</td><td style="text-align: center;">f</td><td style="text-align: center;">363</td></tr><tr><td style="text-align: center;">4</td><td style="text-align: center;">s</td><td style="text-align: center;">117</td></tr><tr><td style="text-align: center;">5</td><td style="text-align: center;">d</td><td style="text-align: center;">602</td></tr><tr><td style="text-align: center;">6</td><td style="text-align: center;">q</td><td style="text-align: center;">818</td></tr><tr><td style="text-align: center;">7</td><td style="text-align: center;">e</td><td style="text-align: center;">197</td></tr></tbody></table><h3 id="第四阶段">第四阶段</h3><ul><li>同上操作，此处不再赘述，进入 phase_4 并得到汇编代码如下。</li></ul><p><img src="11.png" alt="第四阶段汇编代码"></p><ul><li>先通过打印 <code>scanf</code>函数的调用值得到输入格式为两个整数。</li></ul><p><img src="12.png" alt="第四阶段输入格式"></p><ul><li>发现 <code>phase_4</code> 调用了<code>func4</code>函数，在这之前，先检查了输入是否为2个整数，再将第二个输入的整数赋给<code>%eax</code>，减2后和2比较大小，如果小于等于2则继续。得到第二个整数&lt;= 4。</li><li>在进入函数之前，观察得到 <code>%esi</code>（第二个输入的整数）和<code>%rdi (8)</code>作为参数被传入 <code>func4</code>。</li><li>进入函数，打印其汇编代码如下：</li></ul><p><img src="13.png" alt="func4汇编代码"></p><ul><li>大致观察即可发现其为递归函数，分析汇编指令画出大致流程图如下：</li></ul><p><img src="14.png" alt="个人绘制的大致流程图"></p><ul><li>分析得到递归函数如下：<code>func4(n, x) = x + func4(n – 1, x) + func4(n – 2, x), n &gt; 1；func4(1, x) = x, func4(0, x) = 0</code>。</li><li>如果第二个输入为2，那么可以推出<code>func4(8, 2) = 108</code>，再根据函数结束后中<code>cmp 0x4(%rsp),%eax</code>可以判断返回值需要和第一个输入相等，所以一个答案为<code>108 2</code>。</li></ul><p><img src="15.png" alt="递归树状图"></p><h3 id="第五阶段">第五阶段</h3><ul><li>同上操作，此处不再赘述，进入 <code>phase_5</code>并得到汇编代码如下：</li></ul><p><img src="16.png" alt="第五阶段汇编代码"></p><ul><li>同样发现其调用 <code>strings_length</code>函数，由第一阶段分析可知，输入的字符串长度应为6。并且函数尾部调用<code>strings_not_equal</code>函数，比较输入字符串（<code>%rdi</code>）和目标字符串（<code>%rsi</code>）是否相等。</li><li>由<code>0x401204 &lt;+76&gt;: mov $0x40278f,%esi</code>语句可知目标字符串的地址，打印内容可得：</li></ul><p><img src="17.png" alt="目标字符串内容"></p><ul><li>再分析中间对字符串的操作部分。先将输入字符串存入 <code>%rbx</code>中，然后通过指令 <code>movzbl (%rbx,%rax,1),%edx</code>取出输入字符的第一位存到 <code>%edx</code> 中。</li></ul><p><strong>Note! <code>movzbl</code> 从源操作数读取一个 8位值，并将其扩展到 32 位，填充高 24位为零，然后存入目标寄存器。</strong></p><p><strong>Note!<code>(%rbx, %rax, 1)</code>是内存地址的计算方式，表示从<code>(%rbx + %rax * 1)</code> 地址处读取一个字节的数据。其中<code>%rbx</code> 是基地址寄存器，<code>%rax</code>是索引寄存器，1是偏移量。</strong></p><ul><li>对于取出的字符，执行<code>and  $0xf,%edx</code>，分析可得其作用是将其低四位保留下来，其余位清零。</li><li>接着执行<code>movzbl 0x4027e0(%rdx),%edx</code>，表示从<code>0x4027e0 + %rdx</code> 处取出 1 字节数据扩展后存储 到<code>%edx</code> 中，然后将 <code>%dl</code> 中的数据存储在<code>(%rbx + %rax \* 1)</code> 处；</li><li>上述操作重复 6 次直到 <code>%rax</code> 等于6，即字符串操作完毕。</li><li>打印 <code>0x4027e0</code>上的内容：</li></ul><p><img src="18.png" alt="密钥内容"></p><ul><li><p>分析可得，该阶段是在 <code>0x4027e0</code> 处挑选第<code>%rdx</code>个字符，然后这些挑选出的字符组合成一个字符串，即目标字符串<code>bruins</code>；</p></li><li><p>但是我们要进行的是解密操作，<code>bruins</code>在密钥中对应的索引为<code>13，6，3，4，8，7</code>，所以只需要输入的字符的低四位符合对应的索引即可，一个答案是<code>MFCDHG</code> 。</p></li><li><p>简述一下<code>phase_6</code>和<code>secret_phase</code>，两者都涉及到对自定义结构体的操作，<code>phase_6</code>是对链表按照数据大小进行重排，而<code>secret_phase</code>是一个二叉搜索树。</p></li></ul><p><img src="19.png" alt="答案汇总"></p><p><img src="20.png" alt="通过截图"></p>]]></content>
    
    
    <summary type="html">Bomb Lab 个人题解
</summary>
    
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/categories/CSAPP/"/>
    
    
    <category term="CSAPP" scheme="https://yokumii.github.io/blog/tags/CSAPP/"/>
    
    <category term="汇编代码" scheme="https://yokumii.github.io/blog/tags/%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>9.4 Group 群</title>
    <link href="https://yokumii.github.io/blog/2024/11/04/9.4%20Groups%20%E7%BE%A4/"/>
    <id>https://yokumii.github.io/blog/2024/11/04/9.4%20Groups%20%E7%BE%A4/</id>
    <published>2024-11-04T10:05:00.000Z</published>
    <updated>2024-11-28T11:51:44.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="inverse"><em>Inverse</em></h1><blockquote><p><strong><em>Defination:</em></strong> 令<span class="math inline">\((S, *)\)</span>是一个幺半群，<span class="math inline">\(x \in S\)</span>。当<span class="math inline">\(\exists y \in S, x * y = y * x =e\)</span>，则称<span class="math inline">\(y\)</span>为<span class="math inline">\(x\)</span>的逆元，记为<span class="math inline">\(x^{-1}\)</span>。<br>单位元一定是可逆的。<br>逆元是唯一的。<br><strong><em>Prove:</em></strong> 设<span class="math inline">\((S,*)\)</span>是一个幺半群，<span class="math inline">\(x \inS\)</span>可逆，若<span class="math inline">\(\existsy_1,y_2\)</span>为<span class="math inline">\(x\)</span>的逆元，<br>有<span class="math inline">\(y_1 = y_1 * e = y_1 * (x * y_2) = (y_1 *x) * (y_2) = e * y_2 = y_2\)</span></p></blockquote><h1 id="group-群"><em>Group 群</em></h1><blockquote><p><strong><em>Defination1:</em></strong> 由上面引出，若<span class="math inline">\((S,*)\)</span>是一个幺半群，如果每一个元素均可逆，则<span class="math inline">\((S, *)\)</span>构成一个群。<br><strong><em>Defination2:</em></strong> 拓展半群的定义：<br>&gt;1. <strong><em>Closure</em></strong> 运算封闭性；<br>&gt;2. <strong><em>Associativity</em></strong> 结合律<br>&gt;3. <strong><em>Identity</em></strong> 存在单位元<br>&gt;4. <strong><em>Inverse</em></strong> 每个元素都有逆元<br><strong><em>引理:</em></strong> <span class="math inline">\((S,*)\)</span>是幺半群，令<span class="math inline">\(G\)</span>是其所有可逆元素构成的子集，则<span class="math inline">\((G, *)\)</span>是群。<br><strong><em>Properties:</em></strong><br>&gt; 1. <span class="math inline">\((a^{-1})^{-1} = a\)</span><br>&gt; 2. <span class="math inline">\((ab)^{-1} =b^{-1}a^{-1}\)</span><br>&gt; 3. <span class="math inline">\(ab = ac \rightarrow b =c\)</span>（左消去律）<br>&gt; 4. <span class="math inline">\(ba = ca \rightarrow b =c\)</span>（右消去律）<br>事实上，群的定义可以减弱为<span class="math inline">\(\textbf{ea =a}\)</span><br><strong><em>Prove:</em></strong> <span class="math inline">\(ae =aa^{-1}(a^{-1})^{-1} = e(a^{-1})^{-1} = ea\)</span></p></blockquote><h1 id="几类特殊的群"><em>几类特殊的群</em></h1><h2 id="abelian-group-阿贝尔群交换群"><em>Abelian Group阿贝尔群/交换群</em></h2><blockquote><p><strong><em>Defination:</em></strong> <span class="math inline">\((G,*),\forall x,y \in G, x * y = y * x\)</span>。</p></blockquote><h2 id="平凡群"><em>平凡群</em></h2><blockquote><p><strong><em>Defination:</em></strong> <span class="math inline">\((\{e\}, *)\)</span></p></blockquote><h2 id="general-linear-group-n阶一般线性群"><em>General Linear Groupn阶一般线性群</em></h2><blockquote><p><strong><em>Defination:</em></strong> <span class="math inline">\(n *n\)</span>阶可逆实矩阵构成的乘法群，<span class="math inline">\(GL_n(R)= \{A \in M_n(R):det(A)\neq0\}\)</span></p></blockquote><h1 id="subgroup-子群"><em>Subgroup 子群</em></h1><blockquote><p><strong><em>Defination:</em></strong> <span class="math inline">\(H\)</span>是<span class="math inline">\(G\)</span>的子群，记作$H &lt; G，满足：<br>&gt;1. <span class="math inline">\(e \in H\)</span><br>&gt;2. 封闭性<br>&gt;3. 都有逆元<br>&gt;还可以压缩为：<br>&gt;1. 非空<span class="math inline">\(H \subset G\)</span><br>&gt;2. <span class="math inline">\(\forall x,y \in H,ab^{-1} \inH\)</span><br>上述也可以作为<strong><em>判定方法</em></strong>。</p></blockquote><h1 id="homomorphism-群同态"><em>Homomorphism 群同态</em></h1><blockquote><p><strong><em>Defination:</em></strong> <span class="math inline">\((G,*),(G&#39;,*&#39;)\)</span> 是两个群，<span class="math inline">\(f:G\rightarrow G&#39;\)</span>是一个群同态，那么有<br>&gt; 1. <span class="math inline">\(f(e) = e&#39;\)</span>；<br>&gt; 2. <span class="math inline">\(f(a^{-1})=(f(a))^{-1}\)</span>；<br>&gt; 3. <span class="math inline">\(H\)</span>是<span class="math inline">\(G\)</span>的一个子群，那么<span class="math inline">\(f(H) = \{f(h)|h \in H\}\)</span>也是<span class="math inline">\(G&#39;\)</span>的一个子群；<br><strong><em>命题:</em></strong> <span class="math inline">\(det:GL_n(R)\rightarrow (R,*)\)</span>是一个乘法群同态，即行列式是一般线性群到实数乘群的一个群同态。<br>对<span class="math inline">\(SL_n(R)=\{A \in GL_n(R):det(A) =1\}\)</span>，显然1是<span class="math inline">\((R,*)\)</span>的单位元，那么，<br><span class="math inline">\(SL_n(R) =det^{-1}(1)=det^{-1}(\{1\})\)</span>，翻译成人话，特殊线性群是那些映射到单位元元素的矩阵的集合，即它是实数乘群中单位元的一个原象，也是下面提到的<strong><em>正规子群</em></strong>。<br><strong><em>满同态，单同态</em></strong><br><strong><em>Note!</em></strong> 单同态当且仅当<span class="math inline">\(Ker(f) =\{e\}\)</span>，要证明群同态是单射，只需证<span class="math inline">\(Ker(f) = \{e\}\)</span>。</p></blockquote><h2 id="kernal-image-核像">Kernal, Image 核/像</h2><blockquote><p><strong><em>Defination:</em></strong> <span class="math inline">\(f:G\rightarrow G&#39;\)</span>是一个群同态，<span class="math inline">\(Ker(f) = \{a\in G|f(a)=e&#39;\},Im(f)=f(G)=\{y\inG:\exists x\in G,y = f(x)\}\)</span></p></blockquote><h2 id="同态基本定理">同态基本定理</h2><p><strong><em>Defination:</em></strong> 设<span class="math inline">\(f:G \rightarrow G&#39;\)</span>是同态，<span class="math inline">\(R\)</span>是<span class="math inline">\(G\)</span>上的关系且被定义为<span class="math inline">\(aRb \iff f(a) = f(b)\)</span>，那么有：<br>&gt; 1）<span class="math inline">\(R\)</span>是同余关系；<br>&gt; 2）<span class="math inline">\(G&#39;\)</span>和<span class="math inline">\(G/R\)</span>同构；<img src="img/Wondershare%20PDFelement%202024-11-05%2012.08.43.png"></p><h1 id="isomorphism-同构"><em>Isomorphism 同构</em></h1><blockquote><p><strong><em>Defination:</em></strong> 双射的同态。</p></blockquote><h1 id="direct-product-群的直积"><em>Direct Product 群的直积</em></h1><blockquote><p><strong><em>Defination:</em></strong> <span class="math inline">\((x,y)*(x&#39;,y&#39;)=(x \circ_1 x&#39;, y \circ_2 y&#39;)\)</span></p></blockquote><h1 id="finate-group-有限群"><em>Finate Group 有限群</em></h1><blockquote><p><strong><em>Defination:</em></strong> <span class="math inline">\(G\space is\space Finate\space Group \iffG\)</span>是一个有限集合<br><strong><em>The Order of Group 群的阶</em></strong><br>&gt; <strong><em>Defination:</em></strong> 若<span class="math inline">\(x \in G\)</span>，如果<span class="math inline">\(\exists 最小正整数n \inN,s.t.x^n=e\)</span>，则<span class="math inline">\(|G|=n\)</span>，若不存在，则<span class="math inline">\(|G|=\infty\)</span><br><strong><em>命题1:</em></strong>有限群的每一个元素经过有限次自乘都可以得到单位元。</p></blockquote><h1 id="cyclic-group-循环群"><em>Cyclic Group 循环群</em></h1><blockquote><p><strong><em>命题1:</em></strong> 令<span class="math inline">\(G=&lt;x&gt;\)</span>是有限循环群，假设<span class="math inline">\(|x| = n\)</span>，则<span class="math inline">\(G= \{e,x^2,……,x^n\}\)</span>，其中元素是两两不同的，则称有限群<span class="math inline">\(G\)</span>的阶为<span class="math inline">\(n\)</span>。<br>可以用<strong><em>Cayley图</em></strong>进行可视化表示：<img src="img/Google%20Chrome%202024-11-05%2008.56.29.png"><strong><em>命题2:</em></strong>任意n阶循环群互相同构，无限循环群也是互相同构的。<br><strong><em>命题3:</em></strong> 任意循环群都是交换群。<br><strong><em>命题4:</em></strong> 令<span class="math inline">\(G =&lt;x&gt;\)</span>为无限循环群，G只有两个生成元分别为<span class="math inline">\(x,x^{-1}\)</span>。<br><strong><em>几类特殊的循环群:</em></strong><br>&gt; <span class="math inline">\((Z, +) = &lt;1&gt;,1\)</span>或<span class="math inline">\(-1\)</span>是它的生成元，无限循环群；<br><strong><em>Lagrange定理:</em></strong> 若<span class="math inline">\(H\)</span>是<span class="math inline">\(G\)</span>的子群，则<span class="math inline">\(|H|\space |\space |G|\)</span>。</p></blockquote><h1 id="coset-陪集">Coset 陪集</h1><blockquote><p><strong><em>左陪集</em></strong><br>&gt; <strong><em>Defination:</em></strong> <span class="math inline">\(H\)</span>是<span class="math inline">\(G\)</span>的一个子群，<span class="math inline">\(aH = \{ah|h \in H\},a \inG\)</span>，陪集一般不是子群。<br>&gt; 定义<span class="math inline">\(f:H \rightarrowaH,f(x)=ax\)</span>，显然是双射，则<span class="math inline">\(|H|=|aH|\)</span>。<br>&gt; <strong><em>命题1:</em></strong>两个左陪集要么相等要么无交，所有陪集构成群的一个分拆。<br>&gt; 可以定义为商集<span class="math inline">\(G/H\)</span><br><strong><em>右陪集</em></strong><br>如何赋予商集一个群的结构？</p></blockquote><h1 id="normal-group-正规子群"><em>Normal Group 正规子群</em></h1><blockquote><p><strong><em>Defination:</em></strong> <span class="math inline">\(N&lt;G,\forall a \in G,aN = Na\)</span>，记作<span class="math inline">\(H \lhd G\)</span>，此时<span class="math inline">\((G/N,\circ)\)</span>称为商群。其单位元为<span class="math inline">\(eN = N\)</span>，逆元为<span class="math inline">\(a^{-1}N\)</span><br><strong><em>商群:</em></strong>可以通过正规子群来生成商集，并定义二元运算为<span class="math inline">\((aN) \times (bN)=[a]\circ [b] = [a * b] =abN\)</span><br>同时有函数定义为<span class="math inline">\(f_R:G \rightarrow G/R,f_R(a) = aN\)</span>,则<span class="math inline">\(f_R\)</span>是由<span class="math inline">\(G \rightarrow G/R\)</span>的同态，一般记为<span class="math inline">\(G/N\)</span>。<br><strong><em>定理:</em></strong> 设<span class="math inline">\(G\)</span>的正规子群<span class="math inline">\(N\)</span>，设定义在<span class="math inline">\(G\)</span>上的关系<span class="math inline">\(R:aRb \iff ab^{-1} \in N\)</span>，那么有：<br>&gt; 1. <span class="math inline">\(R\)</span>是<span class="math inline">\(G\)</span>上的同余关系；<br>&gt; 2. <span class="math inline">\(N = [e]\)</span>；<br><strong><em>Prove:</em></strong> <span class="math inline">\(证明自反性:aa^{-1}=e \in N \Rightarrow aRa\)</span><br><span class="math inline">\(证明对称性, if\space aRb, then\spaceab^{-1}\in N,由于其存在逆元，则(ab^{-1})^{-1}=ba^{-1}\RightarrowbRa\)</span><br><span class="math inline">\(证明传递性,if\space aRb,bRc,then\spaceab^{-1},bc^{-1}\in N,由封闭性,ab^{-1}bc^{-1} = ac^{-1}\in N\RightarrowaRc\)</span><br><span class="math inline">\(证明同余关系,\)</span></p></blockquote>]]></content>
    
    
    <summary type="html">群
</summary>
    
    
    
    <category term="群论" scheme="https://yokumii.github.io/blog/categories/%E7%BE%A4%E8%AE%BA/"/>
    
    
    <category term="群论" scheme="https://yokumii.github.io/blog/tags/%E7%BE%A4%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>9.3 Products and Quotients of Semigroups 乘积半群、商半群</title>
    <link href="https://yokumii.github.io/blog/2024/11/04/9.%203%20Products%20and%20Quotients%20of%20Semigroups%20%E4%B9%98%E7%A7%AF%E5%8D%8A%E7%BE%A4%E3%80%81%E5%95%86%E5%8D%8A%E7%BE%A4/"/>
    <id>https://yokumii.github.io/blog/2024/11/04/9.%203%20Products%20and%20Quotients%20of%20Semigroups%20%E4%B9%98%E7%A7%AF%E5%8D%8A%E7%BE%A4%E3%80%81%E5%95%86%E5%8D%8A%E7%BE%A4/</id>
    <published>2024-11-04T04:38:03.000Z</published>
    <updated>2024-11-28T11:51:51.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="products-semigroups-积半群半群的笛卡尔积"><em>ProductsSemigroups 积半群（半群的笛卡尔积）</em></h1><blockquote><p><strong><em>定理1:</em></strong> 两个半群的笛卡尔积也是半群。<img src="img/Wondershare%20PDFelement%202024-11-04%2018.29.31.png"><br><strong><em>定理2:</em></strong>类似，两个幺半群的笛卡尔积也是幺半群且其幺元为<span class="math inline">\((e_S,e_T)\)</span>。<img src="img/Wondershare%20PDFelement%202024-11-04%2018.31.58.png"></p></blockquote><h1 id="congruence-relation-同余关系"><em>Congruence relation同余关系</em></h1><blockquote><p><strong><em>Defination:</em></strong> 在半群<span class="math inline">\((S,∗)\)</span>上的等价关系R，如果满足：任意<span class="math inline">\(a R a&#39;\)</span>并且<span class="math inline">\(b R b&#39;\)</span> <span class="math inline">\(\Rightarrow\)</span> <span class="math inline">\((a∗b) R (a&#39;∗ b&#39;)\)</span>，则称<span class="math inline">\(R\)</span>为半群上的同余关系。<br><strong><em>回忆:</em></strong>等价关系满足自反性、对称性、传递性。<br><strong><em>解题法:</em></strong><br>&gt; <strong><em>Prove Step:</em></strong> R是半群上的同余关系？<br>&gt; 1. 等价关系显然（已知给出）。<br>&gt; 2. 根据<span class="math inline">\(a R a&#39;\)</span>和<span class="math inline">\(b R b&#39;\)</span>可以推出 <span class="math inline">\((a∗b) R (a&#39;∗ b&#39;)\)</span>。<br><strong><em>Note!</em></strong> 等价关系不一定是同余关系。反例：<img src="img/Wondershare%20PDFelement%202024-11-04%2018.53.08.png"></p></blockquote><h1 id="quotients-semigroups-商半群">Quotients Semigroups 商半群</h1><blockquote><p><strong><em>Defination:</em></strong> <img src="img/Wondershare%20PDFelement%202024-11-04%2019.01.38.png"><br>其实就是按照以下步骤定义了一种二元运算：<br>&gt; 1. <span class="math inline">\(S =\{a,b,c,……,a&#39;,b&#39;,c&#39;,……\}\)</span><br>&gt; 2. 设定价类<span class="math inline">\([a] = \{a, a&#39;,……\},[b] =\{b, b&#39;,……\},[c] = \{c, c&#39;,……\},……\)</span><br>&gt; 3. <span class="math inline">\(S/R =\{[a],[b],[c],……\}\)</span><br>&gt; 4. <span class="math inline">\(S/R \times S/R =\{([a],[a]),([a],[b]),([a],[c]),……\}\)</span><br>&gt; 5. <span class="math inline">\(f:S/R \times S/R \rightarrowS/R\)</span><br>&gt; 6. <span class="math inline">\(f([a],[b]) = [c] \leftrightarrow [a]\otimes [b] = [c]\)</span><br><strong><em>Note!</em></strong> 注意<span class="math inline">\(\otimes\)</span>是等价类之间的运算，可以用代入等价类中的元素进行计算，即<span class="math inline">\([a] \otimes [b] = [a * b]\)</span><br><strong><em>幺半群导出的商半群也是幺半群</em></strong> <img src="img/Wondershare%20PDFelement%202024-11-04%2019.43.44.png"><br><strong><em>Prove:</em></strong><br><span class="math inline">\([a] \otimes [e] = [a * e] = [a]=[e * a] =[e] \otimes [a]\)</span></p></blockquote><h1 id="natural-homomorphism-自然同态"><em>Natural Homomorphism自然同态</em></h1><blockquote><p><strong><em>Defination:</em></strong> <span class="math inline">\(f_R:S \rightarrow S/R\space defined\space by\spacef_R(a) = [a]\)</span>，显然满射(onto)。<img src="img/Wondershare%20PDFelement%202024-11-04%2019.51.57.png"></p></blockquote><h1 id="fundamental-homomorphism-同态基本定理">*Fundamental Homomorphism同态基本定理</h1><blockquote><p><strong><em>Defination:</em></strong> 设<span class="math inline">\(f:S \rightarrow T\)</span>是同态，<span class="math inline">\(R\)</span>是<span class="math inline">\(S\)</span>上的关系且被定义为<span class="math inline">\(aRb \iff f(a) = f(b)\)</span>，那么有：<br>1）<span class="math inline">\(R\)</span>是同余关系；<br>2）<span class="math inline">\(T\)</span>和<span class="math inline">\(S/R\)</span>同构；<img src="img/Wondershare%20PDFelement%202024-11-04%2020.17.07.png"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;products-semigroups-积半群半群的笛卡尔积&quot;&gt;&lt;em&gt;Products
Semigroups 积半群（半群的笛卡尔积）&lt;/em&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;定理1:&lt;/em&gt;&lt;/strong&gt; 两个半群的笛</summary>
      
    
    
    
    <category term="群论" scheme="https://yokumii.github.io/blog/categories/%E7%BE%A4%E8%AE%BA/"/>
    
    
    <category term="群论" scheme="https://yokumii.github.io/blog/tags/%E7%BE%A4%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>9.2 Semigroups 半群、同态、同构</title>
    <link href="https://yokumii.github.io/blog/2024/11/03/9.2%20Semigroups%20%E5%8D%8A%E7%BE%A4%E3%80%81%E5%90%8C%E6%80%81%E3%80%81%E5%90%8C%E6%9E%84/"/>
    <id>https://yokumii.github.io/blog/2024/11/03/9.2%20Semigroups%20%E5%8D%8A%E7%BE%A4%E3%80%81%E5%90%8C%E6%80%81%E3%80%81%E5%90%8C%E6%9E%84/</id>
    <published>2024-11-03T14:54:04.000Z</published>
    <updated>2024-11-28T11:52:03.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="semigroups"><em>Semigroups</em></h1><ul><li><p><strong><em>Defination</em></strong><br>&gt; 非空集合<br>&gt; 结合性（自然满足封闭性）<br>&gt; 如果可交换，则为Abel半群</p></li><li><p><strong><em>自由半群</em></strong><br>&gt; 操作符 · 是指连接运算，显然其具有结合律。<br>&gt; 称 <span class="math inline">\((A^∗, · )\)</span> 为由 A生成的自由半群 (free semigroup generated by A)。<img src="img/Wondershare%20PDFelement%202024-11-03%2019.35.46.png"></p></li><li><p><strong><em>Identity 单位元，幺元</em></strong><br>&gt; 单位元若存在必唯一。<br>&gt; <strong><em>Prove:</em></strong><br>&gt; 假设<span class="math inline">\(e,e&#39;\)</span>都是单位元，由单位元性质可得<span class="math inline">\(e= e * e&#39; = e&#39;\)</span>。</p></li><li><p><strong><em>Monoid——独异点，幺半群</em></strong><br>&gt; 半群 <span class="math inline">\((S, *)\)</span>中存在单位元，则称为独异点。</p></li><li><p><strong><em>定理 1半群的卡特兰律（广义结合律）</em></strong><br>&gt; 如果 <span class="math inline">\(a_1,\ a_2,\ …,\ a_n\)</span>是半群的任意元素（其中 <span class="math inline">\(n ≥3\)</span>），那么在任意元素的乘积中插入有意义的括号形成的乘积是相等的。<br>&gt; <strong><em>翻译成人话就是，任意加括号都成立</em></strong><br>&gt; <strong><em>引理1:</em></strong><span class="math inline">\((x_1……x_n) * (y_1……y_n) =x_1……x_ny_1……y_n\)</span>成立<br>&gt; <strong><em>Prove:</em></strong>（数学归纳法）<br>&gt; 取定<span class="math inline">\(n \in N\)</span>,对<span class="math inline">\(n\)</span>做数学归纳：<br>&gt; 1）若<span class="math inline">\(m = 1\)</span><br>&gt; <span class="math inline">\((x_1……x_n)y_1 =x_1……x_ny_1\)</span><br>&gt; 2）由<span class="math inline">\(m \rightarrow m + 1\)</span><span class="math display">\[\begin{align}(x_1……x_n) * (y_1……y_{m+1})\\&amp;= (x_1……x_n) * ((y_1……y_m) * y_{m + 1})\\&amp;= ((x_1……x_n) * (y_1……y_{m})) * y_{m + 1}\\&amp;= (x_1……x_ny_1……y_{m+1}) * y_{m + 1}\\&amp;= x_1……x_ny_1……y_{m+1}\end{align}\]</span>至于为什么要说这个，就是这个才保证了下面的定义。</p></li><li><p><strong><em>Powers of A 幂</em></strong><br>&gt; <strong><em>Defination:</em></strong> <span class="math inline">\(x^n = x^{n - 1} * x = x * x * ……*x\)</span>，规定<span class="math inline">\(x^0 = e\)</span>。<br>&gt; 显然，不规定也行，<span class="math inline">\(x^m * x^n = x^{m+n},\forall m,n \ge 1\)</span>是显然的，如果我们希望更完备呢？<br>&gt; <span class="math inline">\(x^m * x^0 =x^m\)</span>如果成立，那么<span class="math inline">\(x^0\)</span>不就等于单位元吗？<br>&gt; 有了这个规定自然又得到了以下性质。</p></li><li><p><strong><em>生成半群/生成子幺半群</em></strong><br>&gt; <strong><em>Defination:</em></strong> 设<span class="math inline">\((S, *)\)</span>是幺半群，而<span class="math inline">\(A \subset S\)</span>，则<span class="math inline">\(A\)</span>生成的子幺半群记作<span class="math inline">\(&lt; A &gt; = \cap T,T \supset A, T &lt;S\)</span><br>&gt; 人话，<span class="math inline">\(&lt; A &gt;\)</span>是所有<span class="math inline">\(S\)</span>中包含了<span class="math inline">\(A\)</span>的子幺半群的交集。<br>&gt; 子半群和子幺半群可以按照如下方式生成。<img src="img/Wondershare%20PDFelement%202024-11-03%2022.48.18.png"></p></li></ul><h1 id="subsemigroup"><em>Subsemigroup</em></h1><ul><li><p><strong><em>Defination</em></strong><br>&gt; 子集<br>&gt; 运算封闭（一定满足结合性）</p></li><li><p><strong><em>Submonoid——子独异点</em></strong><br>&gt; 子集<br>&gt; 运算封闭<br>&gt; 幺元属于T<br>&gt; <strong><em>Note! T的幺元必须和S的幺元相同</em></strong><img src="img/Wondershare%20PDFelement%202024-11-03%2019.50.28%201.png"><br>&gt; T 是 S 的子集，并且 <span class="math inline">\((T, *)\)</span>同样满足独异点定义，同时 <span class="math inline">\(e∈T\)</span>；<br>&gt; 显然，半群<span class="math inline">\((S, *)\)</span> 本身也是<span class="math inline">\(S\)</span>的子半群；独异点<span class="math inline">\((S, *)\)</span> 本身也是<span class="math inline">\(S\)</span>的子独异点；<br>&gt; <span class="math inline">\(T = \{e\}\)</span>一定是群<span class="math inline">\((S, *)\)</span> 的子独异点。</p></li></ul><h1 id="homomorphism-同态"><em>Homomorphism 同态</em></h1><blockquote><p><strong><em>Defination:</em></strong>人话，保持运算，保持特殊元素。<br>如果<span class="math inline">\(S\)</span>和<span class="math inline">\(T\)</span>的满足<strong><em>幺半群同态</em></strong>关系，<span class="math display">\[  f:(S, ·) \rightarrow (T, *)\leftrightarrow \left\{\begin{aligned}&amp;保持乘法，即\forall x,y \in S, f(x · y) = f(x) * f(y)\\&amp;保持单位元，即f(e) = e&#39;\end{aligned}\right.\]</span>直观理解如下图：<img src="img/Wondershare%20PDFelement%202024-11-04%2012.17.01.png">人话，两个元素作运算能映射到另一个集合，另一个集合中的元素作运算也能映射回原集合</p></blockquote><h1 id="isomorphism-同构"><em>Isomorphism 同构</em></h1><blockquote><p><strong><em>Defination:</em></strong>人话，双射，保持运算，保持特殊元素。<br>直观理解如下图：<img src="img/Wondershare%20PDFelement%202024-11-04%2012.14.53.png"><br><strong><em>&amp;0</em></strong> 如果<span class="math inline">\(S\)</span>和<span class="math inline">\(T\)</span>的满足<strong><em>幺半群同构</em></strong>关系，<span class="math display">\[  f:(S, ·) \rightarrow (T, *)\leftrightarrow \left\{\begin{aligned}&amp;满足双射，即\forall x,y \in S,x \leftrightarrow f(x),y\leftrightarrow f(y), x · y \leftrightarrow f(x) * f(y)\\&amp;保持乘法，即\forall x,y \in S, f(x * y) = f(x) · f(y)\\&amp;保持单位元，即f(e) = e&#39;\end{aligned}\right.\]</span><strong><em>&amp;1 恒等映射</em></strong>，即<span class="math inline">\(S\)</span>是自己的同构。<br><strong><em>&amp;2</em></strong> 如果 <span class="math inline">\(f\)</span> 是从 <span class="math inline">\(S\rightarrow T\)</span> 的同构，即 <span class="math inline">\(f\)</span> 是从 <span class="math inline">\(S\rightarrow T\)</span>的<strong>一一对应</strong>的函数，那么 <span class="math inline">\(f^{−1}\)</span> 必定存在，并且 <span class="math inline">\(f^{−1}\)</span> 是从 <span class="math inline">\(S\rightarrow T\)</span> 的一一对应的函数,且一定是同构。<br><strong><em>&amp;3</em></strong> 显然，如果<span class="math inline">\((S,∗)\)</span>有独异点，但<span class="math inline">\((T,∗)\)</span>没有独异点，那么必定不存在从 <span class="math inline">\(S\rightarrow T\)</span> 的同构<strong>(常用于证明不存在同构)</strong><br><strong><em>$4</em></strong>显然，同态和同构均满足像点的乘积等于乘积的像点，区别是，同构需要一一对应。</p></blockquote><h1 id="满同态"><em>满同态</em></h1><blockquote><p><strong>定理1</strong> 如果<span class="math inline">\(S\)</span>和<span class="math inline">\(T\)</span>是幺半群，且幺元分别为<span class="math inline">\(e,e&#39;\)</span>，<span class="math inline">\(S\rightarrow T\)</span>为满同态映射，那么有<span class="math inline">\(f(e) = e&#39;\)</span>。<br><strong><em>Prove:</em></strong> 由同态定义，<span class="math inline">\(\forall a \in S,f(e · a) = f(a) * f(e) =f(a)\)</span>，但是首先需要保证<span class="math inline">\(f(a) \inT\)</span>，即满射，才能成立，此时<span class="math inline">\(f(e) =e&#39;\)</span>。<br><strong>定理2</strong> 如果<span class="math inline">\(S\)</span>和<span class="math inline">\(T\)</span>是幺半群，且<span class="math inline">\(S\)</span>为可交换半群，<span class="math inline">\(S\rightarrow T\)</span>为满同态映射，那么<span class="math inline">\(T\)</span>也是可交换半群。</p></blockquote><h1 id="解题法"><em>解题法</em></h1><ul><li><p><strong><em>Example:</em></strong> <span class="math inline">\((S, *)\)</span>是幺半群吗？<br>&gt; <strong><em>Prove Step:</em></strong><br>&gt; 1. 有没有封闭性？<br>&gt; 2. 结合律？<br>&gt; 3. 有没有单位元？</p></li><li><p><strong><em>Example:</em></strong>构造同构/证明是否为同构？<br>&gt; <strong><em>Prove Step:</em></strong><br>&gt; 1. (构造或直接给出)构造一个函数 <span class="math inline">\(f:S\rightarrow T\)</span> , 使得 <span class="math inline">\(f\)</span>的定义域 <span class="math inline">\(Dom (f) = S\)</span>;<br>&gt; 2. 证明 <span class="math inline">\(f\)</span> 是单射(one-to-one)的，可用反证法<br>&gt; 3. 证明 <span class="math inline">\(f\)</span> 是满射 (onto)的<span class="math inline">\(\rightarrow\)</span> 故而是双射的<br>&gt; 4. 证明 <span class="math inline">\(f(a ·b)=f(a)∗f(b)\)</span><br>&gt; 同态无需证明<span class="math inline">\(Step2,Step3\)</span></p></li></ul>]]></content>
    
    
    <summary type="html">半群
</summary>
    
    
    
    <category term="群论" scheme="https://yokumii.github.io/blog/categories/%E7%BE%A4%E8%AE%BA/"/>
    
    
    <category term="群论" scheme="https://yokumii.github.io/blog/tags/%E7%BE%A4%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>9.1 群论Intro</title>
    <link href="https://yokumii.github.io/blog/2024/11/03/9.1%20%E7%BE%A4%E8%AE%BAIntro/"/>
    <id>https://yokumii.github.io/blog/2024/11/03/9.1%20%E7%BE%A4%E8%AE%BAIntro/</id>
    <published>2024-11-03T13:54:18.000Z</published>
    <updated>2024-12-19T05:21:03.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="binary-operation"><em>Binary operation</em></h1><blockquote><p><strong>Defination:</strong>对两个对象进行操作的运算称为二元运算。一般在《离散数学》这门课中只研究离散结构，e.g.集合。</p></blockquote><h1 id="some-properties-of-binary-operations"><em>Some Properties ofBinary Operations</em></h1><h2 id="closure"><em>Closure</em></h2><blockquote><p><strong>Defination:</strong> 设集合 S 有二元运算∗, 若对 S中的任意两个元素 <span class="math inline">\(a_1\)</span>、<span class="math inline">\(a_2\)</span>, 都有: <span class="math inline">\(a_1∗a_2∈S\)</span>, 则称运算∗对集合 S 封闭。</p></blockquote><h2 id="commutative"><em>Commutative</em></h2><blockquote><p><strong>Defination:</strong> 交换律也称为Abel 律，设有代数 <span class="math inline">\((S,∗)\)</span>，若对任意 <span class="math inline">\(a_1,a_2∈S\)</span>,都符合等式: <span class="math inline">\(a_1∗a_2=a_2∗a_1\)</span>,那么称代数 <span class="math inline">\((S,∗)\)</span> 运算符合交换律。<br><strong>推广:</strong> 如果 <span class="math inline">\((S,∗)\)</span>运算符合交换律，那么对于运算序列 <span class="math inline">\(a_1∗a_2∗...∗a_n\)</span>，设 <span class="math inline">\(θ(12...n)\)</span> 为任意重排列，那么有: <span class="math inline">\(a_θ(1)∗a_θ(2)∗...∗a_θ(n)=a_1∗a_2∗...∗a_n\)</span>。</p></blockquote><h2 id="associative"><em>Associative</em></h2><blockquote><p><strong>Defination:</strong> if * is a binary operation, then * isassociative or has the associative property:<span class="math inline">\((x * y) * z = x * (y *z)\)</span>，在运算过程中不需要再考虑括号了！</p></blockquote><h2 id="distributive"><em>Distributive</em></h2><blockquote><p>略。</p></blockquote><h2 id="de-morgans-laws"><em>De Morgan‘s laws</em></h2><blockquote><p>扔个PPT在这。<img src="imgs/Wondershare%20PDFelement%202024-11-03%2017.07.25.png"></p></blockquote><h2 id="idempotent"><em>Idempotent</em></h2><blockquote><p><strong>Defination:</strong> <span class="math inline">\(a * a =a\)</span></p></blockquote><h2 id="note"><em>Note！</em></h2><blockquote><p>An operation has a property means the statement of the property istrue when the operation is used with any objects in the structure.</p></blockquote><h1 id="a-binary-operation-on-a-set"><em>A binary operation on aset</em></h1><blockquote><p><strong>Defination:</strong> Everywhere defined <span class="math inline">\(f:A×A\rightarrowA\)</span>，同时需要满足封闭性和运算结果唯一，即双射性质。</p></blockquote><h1 id="tables运算表"><em>Tables(运算表)</em></h1><blockquote><p><strong>Defination:</strong> If A is a finite set, we can define abinary operation on A by means of a table.<img src="img/Wondershare%20PDFelement%202024-11-03%2017.15.57.png"></p></blockquote><h1 id="some-special-elements"><em>Some Special Elements</em></h1><h2 id="identity中性元"><em>Identity(中性元)</em></h2><blockquote><p><strong>Defination:</strong> <span class="math inline">\(e∗x=x∗e=x\)</span></p></blockquote><h2 id="zero零元"><em>Zero(零元)</em></h2><blockquote><p><strong>Defination:</strong> <span class="math inline">\(\theta ∗ x=x∗ \theta= \theta\)</span></p></blockquote><h2 id="inverse逆元"><em>Inverse(逆元)</em></h2><blockquote><p><strong>Defination:</strong> <span class="math inline">\(x * y = y *x = e\)</span>，两者互为逆元</p></blockquote><h2 id="note-1"><em>Note!</em></h2><blockquote><ol type="1"><li>单位元以及零元的唯一性</li><li>如果<span class="math inline">\(\left| A \right| &gt; 1, \theta \neqe\)</span></li><li>可结合的运算逆元唯一性</li></ol></blockquote>]]></content>
    
    
    <summary type="html">群论的引入知识：二元运算等</summary>
    
    
    
    <category term="群论" scheme="https://yokumii.github.io/blog/categories/%E7%BE%A4%E8%AE%BA/"/>
    
    
    <category term="群论" scheme="https://yokumii.github.io/blog/tags/%E7%BE%A4%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>卡尔曼滤波</title>
    <link href="https://yokumii.github.io/blog/2024/10/26/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/"/>
    <id>https://yokumii.github.io/blog/2024/10/26/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/</id>
    <published>2024-10-26T03:35:00.000Z</published>
    <updated>2025-03-16T07:41:23.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述">1. 简述</h2><p>在目标轨迹追踪领域，传统均值/中值滤波器仅能处理位置信息且存在滞后问题。R.E.Kalman于1960年提出的卡尔曼滤波，通过融合物理动力学模型与传感器观测数据，实现状态向量（位置、速度等）的最优估计。其核心优势在于：<br>- 利用先验知识降低测量噪声影响<br>- 无延迟的实时递推计算<br>- 提供估计结果的置信度评价（协方差矩阵）</p><hr><h2 id="推导">2. 推导</h2><h3 id="系统模型框架">2.1 系统模型框架</h3><p>设系统状态向量为<span class="math inline">\(x_i \in\mathbb{R}^n\)</span>，包含位置、速度等多维变量。卡尔曼滤波建立两套数学模型：</p><p><strong>动态模型</strong>（状态转移方程）:<br><span class="math display">\[x_i = F_ix_{i-1} + w_i,\quad w_i \sim \mathcal{N}(0,Q_i)\]</span><br>其中<span class="math inline">\(F_i\)</span>为状态转移矩阵，<span class="math inline">\(w_i\)</span>为过程噪声</p><p><strong>观测模型</strong>（测量方程）:<br><span class="math display">\[z_i = H_ix_i + v_i,\quad v_i \sim \mathcal{N}(0,R_i)\]</span><br><span class="math inline">\(H_i\)</span>为观测矩阵，<span class="math inline">\(v_i\)</span>为测量噪声</p><h3 id="递推算法推导">2.2 递推算法推导</h3><p>滤波过程分为预测与更新两阶段：</p><p><strong>(1) 先验估计预测</strong><br><span class="math display">\[\hat{x}_i^{(-)} = F_i\hat{x}_{i-1}^{(+)}\]</span><br><span class="math display">\[P_i^{(-)} = F_iP_{i-1}^{(+)}F_i^T + Q_i\]</span><br>其中<span class="math inline">\(P_i\)</span>为状态协方差矩阵，表征估计不确定性</p><p><strong>(2) 后验估计更新</strong><br>计算卡尔曼增益：<br><span class="math display">\[K_i = P_i^{(-)}H_i^T(H_iP_i^{(-)}H_i^T + R_i)^{-1}\]</span><br>融合观测值：<br><span class="math display">\[\hat{x}_i^{(+)} = \hat{x}_i^{(-)} + K_i(z_i - H_i\hat{x}_i^{(-)})\]</span><br>更新协方差：</p><p><span class="math display">\[P_i^{(+)} = (I - K_iH_i)P_i^{(-)}\]</span><br>---</p><h2 id="应用与参数调优">3. 应用与参数调优</h2><h3 id="过程噪声影响">3.1 过程噪声影响</h3><p>以行人轨迹跟踪为例，过程噪声协方差<span class="math inline">\(Q\)</span>中的<span class="math inline">\(\sigma_s\)</span>参数调节动力学模型信任度：<br>- 大<span class="math inline">\(\sigma_s\)</span>值：优先响应观测数据，轨迹更接近原始测量<br>- 小<span class="math inline">\(\sigma_s\)</span>值：强化物理约束，输出更平滑轨迹</p><h3 id="python实现示例">3.2 Python实现示例</h3><pre class="python"><code>import numpy as np# 状态向量 [位置, 速度]x = np.array([[0.0], [0.0]])F = np.array([[1, 1], [0, 1]])  # 状态转移矩阵H = np.array([[1, 0]])          # 观测矩阵Q = np.diag([0.1, 0.01])       # 过程噪声协方差 R = np.array([[10.0]])         # 测量噪声方差for measurement in measurements:    # 预测步骤    x = F @ x    P = F @ P @ F.T + Q      # 更新步骤    K = P @ H.T @ np.linalg.inv(H @ P @ H.T + R)    x += K @ (measurement - H @ x)    P = (np.eye(2) - K @ H) @ P</code></pre><hr><h2 id="总结">4. 总结</h2><h3 id="优势">4.1 优势</h3><ul><li>线性高斯系统下的最优估计</li><li>计算复杂度仅与状态维度立方相关</li><li>提供实时置信度评分</li></ul>]]></content>
    
    
    <summary type="html">个人关于卡尔曼滤波算法的学习笔记</summary>
    
    
    
    <category term="数据挖掘与分析" scheme="https://yokumii.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="数据挖掘与分析" scheme="https://yokumii.github.io/blog/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
